// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "../../init.dart" show jlookup;

class ObbInfo extends jni.JlObject {
  ObbInfo.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.content.res.ObbInfo> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_content_res_ObbInfo_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get CREATOR => jni.JlObject.fromRef(_getCREATOR());

  /// from: static public final int OBB_OVERLAY
  static const OBB_OVERLAY = 1;

  /// from: public java.lang.String filename
  static final _getfilename = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_ObbInfo_filename")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>();
  jni.JlString get filename => jni.JlString.fromRef(_getfilename(reference));
  static final _setfilename = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "set_android_content_res_ObbInfo_filename")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
  set filename(jni.JlString value) => _setfilename(reference, value.reference);

  /// from: public int flags
  static final _getflags = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_ObbInfo_flags")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get flags => _getflags(reference);
  static final _setflags = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_ObbInfo_flags")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set flags(int value) => _setflags(reference, value);

  /// from: public java.lang.String packageName
  static final _getpackageName = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_ObbInfo_packageName")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>();
  jni.JlString get packageName =>
      jni.JlString.fromRef(_getpackageName(reference));
  static final _setpackageName = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "set_android_content_res_ObbInfo_packageName")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
  set packageName(jni.JlString value) =>
      _setpackageName(reference, value.reference);

  /// from: public int version
  static final _getversion = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_ObbInfo_version")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get version => _getversion(reference);
  static final _setversion = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_ObbInfo_version")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set version(int value) => _setversion(reference, value);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_ObbInfo_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  ObbInfo() : super.fromRef(_ctor());

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ObbInfo_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ObbInfo_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_ObbInfo_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(jni.JlObject dest, int parcelableFlags) =>
      _writeToParcel(reference, dest.reference, parcelableFlags);
}

class ColorStateList extends jni.JlObject {
  ColorStateList.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.content.res.ColorStateList> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_content_res_ColorStateList_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get CREATOR => jni.JlObject.fromRef(_getCREATOR());

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ColorStateList_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(int[][] states, int[] colors)
  ColorStateList(jni.JlObject states, jni.JlObject colors)
      : super.fromRef(_ctor(states.reference, colors.reference));

  static final _valueOf =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_content_res_ColorStateList_valueOf")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: static public android.content.res.ColorStateList valueOf(int color)
  static ColorStateList valueOf(int color) =>
      ColorStateList.fromRef(_valueOf(color));

  static final _createFromXml = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ColorStateList_createFromXml")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.res.ColorStateList createFromXml(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser)
  static ColorStateList createFromXml(Resources r, jni.JlObject parser) =>
      ColorStateList.fromRef(_createFromXml(r.reference, parser.reference));

  static final _createFromXml_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ColorStateList_createFromXml_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.res.ColorStateList createFromXml(android.content.res.Resources r, org.xmlpull.v1.XmlPullParser parser, android.content.res.Resources.Theme theme)
  static ColorStateList createFromXml_1(
          Resources r, jni.JlObject parser, Resources_Theme theme) =>
      ColorStateList.fromRef(
          _createFromXml_1(r.reference, parser.reference, theme.reference));

  static final _withAlpha = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_ColorStateList_withAlpha")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.ColorStateList withAlpha(int alpha)
  ColorStateList withAlpha(int alpha) =>
      ColorStateList.fromRef(_withAlpha(reference, alpha));

  static final _getChangingConfigurations =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ColorStateList_getChangingConfigurations")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() => _getChangingConfigurations(reference);

  static final _isStateful =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ColorStateList_isStateful")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isStateful()
  bool isStateful() => _isStateful(reference) != 0;

  static final _isOpaque =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ColorStateList_isOpaque")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOpaque()
  bool isOpaque() => _isOpaque(reference) != 0;

  static final _getColorForState = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_ColorStateList_getColorForState")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getColorForState(int[] stateSet, int defaultColor)
  int getColorForState(jni.JlObject stateSet, int defaultColor) =>
      _getColorForState(reference, stateSet.reference, defaultColor);

  static final _getDefaultColor =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ColorStateList_getDefaultColor")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDefaultColor()
  int getDefaultColor() => _getDefaultColor(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ColorStateList_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_ColorStateList_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_ColorStateList_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(jni.JlObject dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class AssetManager extends jni.JlObject {
  AssetManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int ACCESS_BUFFER
  static const ACCESS_BUFFER = 3;

  /// from: static public final int ACCESS_RANDOM
  static const ACCESS_RANDOM = 1;

  /// from: static public final int ACCESS_STREAMING
  static const ACCESS_STREAMING = 2;

  /// from: static public final int ACCESS_UNKNOWN
  static const ACCESS_UNKNOWN = 0;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_AssetManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  AssetManager() : super.fromRef(_ctor());

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _open = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_open")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream open(java.lang.String fileName)
  jni.JlObject open(jni.JlString fileName) =>
      jni.JlObject.fromRef(_open(reference, fileName.reference));

  static final _open_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_AssetManager_open_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.io.InputStream open(java.lang.String fileName, int accessMode)
  jni.JlObject open_1(jni.JlString fileName, int accessMode) =>
      jni.JlObject.fromRef(_open_1(reference, fileName.reference, accessMode));

  static final _openFd = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_openFd")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.AssetFileDescriptor openFd(java.lang.String fileName)
  AssetFileDescriptor openFd(jni.JlString fileName) =>
      AssetFileDescriptor.fromRef(_openFd(reference, fileName.reference));

  static final _list = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_list")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] list(java.lang.String path)
  jni.JlObject list(jni.JlString path) =>
      jni.JlObject.fromRef(_list(reference, path.reference));

  static final _openNonAssetFd = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_openNonAssetFd")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String fileName)
  AssetFileDescriptor openNonAssetFd(jni.JlString fileName) =>
      AssetFileDescriptor.fromRef(
          _openNonAssetFd(reference, fileName.reference));

  static final _openNonAssetFd_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_openNonAssetFd_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.AssetFileDescriptor openNonAssetFd(int cookie, java.lang.String fileName)
  AssetFileDescriptor openNonAssetFd_1(int cookie, jni.JlString fileName) =>
      AssetFileDescriptor.fromRef(
          _openNonAssetFd_1(reference, cookie, fileName.reference));

  static final _openXmlResourceParser = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_openXmlResourceParser")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String fileName)
  XmlResourceParser openXmlResourceParser(jni.JlString fileName) =>
      XmlResourceParser.fromRef(
          _openXmlResourceParser(reference, fileName.reference));

  static final _openXmlResourceParser_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_openXmlResourceParser_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.XmlResourceParser openXmlResourceParser(int cookie, java.lang.String fileName)
  XmlResourceParser openXmlResourceParser_1(
          int cookie, jni.JlString fileName) =>
      XmlResourceParser.fromRef(
          _openXmlResourceParser_1(reference, cookie, fileName.reference));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);

  static final _getLocales = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager_getLocales")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getLocales()
  jni.JlObject getLocales() => jni.JlObject.fromRef(_getLocales(reference));
}

class AssetManager_AssetInputStream extends jni.JlObject {
  AssetManager_AssetInputStream.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int64)>>(
              "android_content_res_AssetManager__AssetInputStream_new")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: void <init>(long assetNativePtr)
  AssetManager_AssetInputStream(int assetNativePtr)
      : super.fromRef(_ctor(assetNativePtr));

  static final _read =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager__AssetInputStream_read")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int read()
  int read() => _read(reference);

  static final _read_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager__AssetInputStream_read_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int read(byte[] b)
  int read_1(jni.JlObject b) => _read_1(reference, b.reference);

  static final _read_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_AssetManager__AssetInputStream_read_2")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int read(byte[] b, int off, int len)
  int read_2(jni.JlObject b, int off, int len) =>
      _read_2(reference, b.reference, off, len);

  static final _skip = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_content_res_AssetManager__AssetInputStream_skip")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long skip(long n)
  int skip(int n) => _skip(reference, n);

  static final _available =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager__AssetInputStream_available")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int available()
  int available() => _available(reference);

  static final _markSupported = jlookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetManager__AssetInputStream_markSupported")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean markSupported()
  bool markSupported() => _markSupported(reference) != 0;

  static final _mark = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_AssetManager__AssetInputStream_mark")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void mark(int readlimit)
  void mark(int readlimit) => _mark(reference, readlimit);

  static final _reset =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager__AssetInputStream_reset")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void reset()
  void reset() => _reset(reference);

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager__AssetInputStream_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetManager__AssetInputStream_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);
}

class AssetFileDescriptor extends jni.JlObject {
  AssetFileDescriptor.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.content.res.AssetFileDescriptor> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_content_res_AssetFileDescriptor_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get CREATOR => jni.JlObject.fromRef(_getCREATOR());

  /// from: static public final long UNKNOWN_LENGTH
  static const UNKNOWN_LENGTH = -1;

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Int64)>>("android_content_res_AssetFileDescriptor_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void <init>(android.os.ParcelFileDescriptor fd, long startOffset, long length)
  AssetFileDescriptor(jni.JlObject fd, int startOffset, int length)
      : super.fromRef(_ctor(fd.reference, startOffset, length));

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int64, ffi.Int64, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_new_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.ParcelFileDescriptor fd, long startOffset, long length, android.os.Bundle extras)
  AssetFileDescriptor.ctor_1(
      jni.JlObject fd, int startOffset, int length, jni.JlObject extras)
      : super.fromRef(
            _ctor_1(fd.reference, startOffset, length, extras.reference));

  static final _getParcelFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_getParcelFileDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.ParcelFileDescriptor getParcelFileDescriptor()
  jni.JlObject getParcelFileDescriptor() =>
      jni.JlObject.fromRef(_getParcelFileDescriptor(reference));

  static final _getFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_getFileDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.FileDescriptor getFileDescriptor()
  jni.JlObject getFileDescriptor() =>
      jni.JlObject.fromRef(_getFileDescriptor(reference));

  static final _getStartOffset =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetFileDescriptor_getStartOffset")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getStartOffset()
  int getStartOffset() => _getStartOffset(reference);

  static final _getExtras = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_getExtras")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getExtras()
  jni.JlObject getExtras() => jni.JlObject.fromRef(_getExtras(reference));

  static final _getLength =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetFileDescriptor_getLength")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getLength()
  int getLength() => _getLength(reference);

  static final _getDeclaredLength =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetFileDescriptor_getDeclaredLength")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getDeclaredLength()
  int getDeclaredLength() => _getDeclaredLength(reference);

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetFileDescriptor_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _createInputStream = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_createInputStream")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.FileInputStream createInputStream()
  jni.JlObject createInputStream() =>
      jni.JlObject.fromRef(_createInputStream(reference));

  static final _createOutputStream = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_createOutputStream")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.FileOutputStream createOutputStream()
  jni.JlObject createOutputStream() =>
      jni.JlObject.fromRef(_createOutputStream(reference));

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_AssetFileDescriptor_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_AssetFileDescriptor_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(jni.JlObject out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class AssetFileDescriptor_AutoCloseOutputStream extends jni.JlObject {
  AssetFileDescriptor_AutoCloseOutputStream.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseOutputStream_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.res.AssetFileDescriptor fd)
  AssetFileDescriptor_AutoCloseOutputStream(AssetFileDescriptor fd)
      : super.fromRef(_ctor(fd.reference));

  static final _write = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseOutputStream_write")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void write(byte[] buffer, int offset, int count)
  void write(jni.JlObject buffer, int offset, int count) =>
      _write(reference, buffer.reference, offset, count);

  static final _write_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseOutputStream_write_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void write(byte[] buffer)
  void write_1(jni.JlObject buffer) => _write_1(reference, buffer.reference);

  static final _write_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseOutputStream_write_2")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void write(int oneByte)
  void write_2(int oneByte) => _write_2(reference, oneByte);
}

class AssetFileDescriptor_AutoCloseInputStream extends jni.JlObject {
  AssetFileDescriptor_AutoCloseInputStream.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.res.AssetFileDescriptor fd)
  AssetFileDescriptor_AutoCloseInputStream(AssetFileDescriptor fd)
      : super.fromRef(_ctor(fd.reference));

  static final _available = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_available")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int available()
  int available() => _available(reference);

  static final _read = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_read")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int read()
  int read() => _read(reference);

  static final _read_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_read_1")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int read(byte[] buffer, int offset, int count)
  int read_1(jni.JlObject buffer, int offset, int count) =>
      _read_1(reference, buffer.reference, offset, count);

  static final _read_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_read_2")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int read(byte[] buffer)
  int read_2(jni.JlObject buffer) => _read_2(reference, buffer.reference);

  static final _skip = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_skip")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long skip(long count)
  int skip(int count) => _skip(reference, count);

  static final _mark = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_mark")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void mark(int readlimit)
  void mark(int readlimit) => _mark(reference, readlimit);

  static final _markSupported = jlookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_markSupported")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean markSupported()
  bool markSupported() => _markSupported(reference) != 0;

  static final _reset = jlookup<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_AssetFileDescriptor__AutoCloseInputStream_reset")
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: synchronized public void reset()
  void reset() => _reset(reference);
}

class Configuration extends jni.JlObject {
  Configuration.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int COLOR_MODE_HDR_MASK
  static const COLOR_MODE_HDR_MASK = 12;

  /// from: static public final int COLOR_MODE_HDR_NO
  static const COLOR_MODE_HDR_NO = 4;

  /// from: static public final int COLOR_MODE_HDR_SHIFT
  static const COLOR_MODE_HDR_SHIFT = 2;

  /// from: static public final int COLOR_MODE_HDR_UNDEFINED
  static const COLOR_MODE_HDR_UNDEFINED = 0;

  /// from: static public final int COLOR_MODE_HDR_YES
  static const COLOR_MODE_HDR_YES = 8;

  /// from: static public final int COLOR_MODE_UNDEFINED
  static const COLOR_MODE_UNDEFINED = 0;

  /// from: static public final int COLOR_MODE_WIDE_COLOR_GAMUT_MASK
  static const COLOR_MODE_WIDE_COLOR_GAMUT_MASK = 3;

  /// from: static public final int COLOR_MODE_WIDE_COLOR_GAMUT_NO
  static const COLOR_MODE_WIDE_COLOR_GAMUT_NO = 1;

  /// from: static public final int COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED
  static const COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED = 0;

  /// from: static public final int COLOR_MODE_WIDE_COLOR_GAMUT_YES
  static const COLOR_MODE_WIDE_COLOR_GAMUT_YES = 2;

  /// from: static public final android.os.Parcelable.Creator<android.content.res.Configuration> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_content_res_Configuration_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get CREATOR => jni.JlObject.fromRef(_getCREATOR());

  /// from: static public final int DENSITY_DPI_UNDEFINED
  static const DENSITY_DPI_UNDEFINED = 0;

  /// from: static public final int HARDKEYBOARDHIDDEN_NO
  static const HARDKEYBOARDHIDDEN_NO = 1;

  /// from: static public final int HARDKEYBOARDHIDDEN_UNDEFINED
  static const HARDKEYBOARDHIDDEN_UNDEFINED = 0;

  /// from: static public final int HARDKEYBOARDHIDDEN_YES
  static const HARDKEYBOARDHIDDEN_YES = 2;

  /// from: static public final int KEYBOARDHIDDEN_NO
  static const KEYBOARDHIDDEN_NO = 1;

  /// from: static public final int KEYBOARDHIDDEN_UNDEFINED
  static const KEYBOARDHIDDEN_UNDEFINED = 0;

  /// from: static public final int KEYBOARDHIDDEN_YES
  static const KEYBOARDHIDDEN_YES = 2;

  /// from: static public final int KEYBOARD_12KEY
  static const KEYBOARD_12KEY = 3;

  /// from: static public final int KEYBOARD_NOKEYS
  static const KEYBOARD_NOKEYS = 1;

  /// from: static public final int KEYBOARD_QWERTY
  static const KEYBOARD_QWERTY = 2;

  /// from: static public final int KEYBOARD_UNDEFINED
  static const KEYBOARD_UNDEFINED = 0;

  /// from: static public final int MNC_ZERO
  static const MNC_ZERO = 65535;

  /// from: static public final int NAVIGATIONHIDDEN_NO
  static const NAVIGATIONHIDDEN_NO = 1;

  /// from: static public final int NAVIGATIONHIDDEN_UNDEFINED
  static const NAVIGATIONHIDDEN_UNDEFINED = 0;

  /// from: static public final int NAVIGATIONHIDDEN_YES
  static const NAVIGATIONHIDDEN_YES = 2;

  /// from: static public final int NAVIGATION_DPAD
  static const NAVIGATION_DPAD = 2;

  /// from: static public final int NAVIGATION_NONAV
  static const NAVIGATION_NONAV = 1;

  /// from: static public final int NAVIGATION_TRACKBALL
  static const NAVIGATION_TRACKBALL = 3;

  /// from: static public final int NAVIGATION_UNDEFINED
  static const NAVIGATION_UNDEFINED = 0;

  /// from: static public final int NAVIGATION_WHEEL
  static const NAVIGATION_WHEEL = 4;

  /// from: static public final int ORIENTATION_LANDSCAPE
  static const ORIENTATION_LANDSCAPE = 2;

  /// from: static public final int ORIENTATION_PORTRAIT
  static const ORIENTATION_PORTRAIT = 1;

  /// from: static public final int ORIENTATION_SQUARE
  static const ORIENTATION_SQUARE = 3;

  /// from: static public final int ORIENTATION_UNDEFINED
  static const ORIENTATION_UNDEFINED = 0;

  /// from: static public final int SCREENLAYOUT_LAYOUTDIR_LTR
  static const SCREENLAYOUT_LAYOUTDIR_LTR = 64;

  /// from: static public final int SCREENLAYOUT_LAYOUTDIR_MASK
  static const SCREENLAYOUT_LAYOUTDIR_MASK = 192;

  /// from: static public final int SCREENLAYOUT_LAYOUTDIR_RTL
  static const SCREENLAYOUT_LAYOUTDIR_RTL = 128;

  /// from: static public final int SCREENLAYOUT_LAYOUTDIR_SHIFT
  static const SCREENLAYOUT_LAYOUTDIR_SHIFT = 6;

  /// from: static public final int SCREENLAYOUT_LAYOUTDIR_UNDEFINED
  static const SCREENLAYOUT_LAYOUTDIR_UNDEFINED = 0;

  /// from: static public final int SCREENLAYOUT_LONG_MASK
  static const SCREENLAYOUT_LONG_MASK = 48;

  /// from: static public final int SCREENLAYOUT_LONG_NO
  static const SCREENLAYOUT_LONG_NO = 16;

  /// from: static public final int SCREENLAYOUT_LONG_UNDEFINED
  static const SCREENLAYOUT_LONG_UNDEFINED = 0;

  /// from: static public final int SCREENLAYOUT_LONG_YES
  static const SCREENLAYOUT_LONG_YES = 32;

  /// from: static public final int SCREENLAYOUT_ROUND_MASK
  static const SCREENLAYOUT_ROUND_MASK = 768;

  /// from: static public final int SCREENLAYOUT_ROUND_NO
  static const SCREENLAYOUT_ROUND_NO = 256;

  /// from: static public final int SCREENLAYOUT_ROUND_UNDEFINED
  static const SCREENLAYOUT_ROUND_UNDEFINED = 0;

  /// from: static public final int SCREENLAYOUT_ROUND_YES
  static const SCREENLAYOUT_ROUND_YES = 512;

  /// from: static public final int SCREENLAYOUT_SIZE_LARGE
  static const SCREENLAYOUT_SIZE_LARGE = 3;

  /// from: static public final int SCREENLAYOUT_SIZE_MASK
  static const SCREENLAYOUT_SIZE_MASK = 15;

  /// from: static public final int SCREENLAYOUT_SIZE_NORMAL
  static const SCREENLAYOUT_SIZE_NORMAL = 2;

  /// from: static public final int SCREENLAYOUT_SIZE_SMALL
  static const SCREENLAYOUT_SIZE_SMALL = 1;

  /// from: static public final int SCREENLAYOUT_SIZE_UNDEFINED
  static const SCREENLAYOUT_SIZE_UNDEFINED = 0;

  /// from: static public final int SCREENLAYOUT_SIZE_XLARGE
  static const SCREENLAYOUT_SIZE_XLARGE = 4;

  /// from: static public final int SCREENLAYOUT_UNDEFINED
  static const SCREENLAYOUT_UNDEFINED = 0;

  /// from: static public final int SCREEN_HEIGHT_DP_UNDEFINED
  static const SCREEN_HEIGHT_DP_UNDEFINED = 0;

  /// from: static public final int SCREEN_WIDTH_DP_UNDEFINED
  static const SCREEN_WIDTH_DP_UNDEFINED = 0;

  /// from: static public final int SMALLEST_SCREEN_WIDTH_DP_UNDEFINED
  static const SMALLEST_SCREEN_WIDTH_DP_UNDEFINED = 0;

  /// from: static public final int TOUCHSCREEN_FINGER
  static const TOUCHSCREEN_FINGER = 3;

  /// from: static public final int TOUCHSCREEN_NOTOUCH
  static const TOUCHSCREEN_NOTOUCH = 1;

  /// from: static public final int TOUCHSCREEN_STYLUS
  static const TOUCHSCREEN_STYLUS = 2;

  /// from: static public final int TOUCHSCREEN_UNDEFINED
  static const TOUCHSCREEN_UNDEFINED = 0;

  /// from: static public final int UI_MODE_NIGHT_MASK
  static const UI_MODE_NIGHT_MASK = 48;

  /// from: static public final int UI_MODE_NIGHT_NO
  static const UI_MODE_NIGHT_NO = 16;

  /// from: static public final int UI_MODE_NIGHT_UNDEFINED
  static const UI_MODE_NIGHT_UNDEFINED = 0;

  /// from: static public final int UI_MODE_NIGHT_YES
  static const UI_MODE_NIGHT_YES = 32;

  /// from: static public final int UI_MODE_TYPE_APPLIANCE
  static const UI_MODE_TYPE_APPLIANCE = 5;

  /// from: static public final int UI_MODE_TYPE_CAR
  static const UI_MODE_TYPE_CAR = 3;

  /// from: static public final int UI_MODE_TYPE_DESK
  static const UI_MODE_TYPE_DESK = 2;

  /// from: static public final int UI_MODE_TYPE_MASK
  static const UI_MODE_TYPE_MASK = 15;

  /// from: static public final int UI_MODE_TYPE_NORMAL
  static const UI_MODE_TYPE_NORMAL = 1;

  /// from: static public final int UI_MODE_TYPE_TELEVISION
  static const UI_MODE_TYPE_TELEVISION = 4;

  /// from: static public final int UI_MODE_TYPE_UNDEFINED
  static const UI_MODE_TYPE_UNDEFINED = 0;

  /// from: static public final int UI_MODE_TYPE_VR_HEADSET
  static const UI_MODE_TYPE_VR_HEADSET = 7;

  /// from: static public final int UI_MODE_TYPE_WATCH
  static const UI_MODE_TYPE_WATCH = 6;

  /// from: public int colorMode
  static final _getcolorMode = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_colorMode")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get colorMode => _getcolorMode(reference);
  static final _setcolorMode = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_colorMode")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set colorMode(int value) => _setcolorMode(reference, value);

  /// from: public int densityDpi
  static final _getdensityDpi = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_densityDpi")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get densityDpi => _getdensityDpi(reference);
  static final _setdensityDpi = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_densityDpi")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set densityDpi(int value) => _setdensityDpi(reference, value);

  /// from: public float fontScale
  static final _getfontScale = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_fontScale")
      .asFunction<
          double Function(
    ffi.Pointer<ffi.Void>,
  )>();
  double get fontScale => _getfontScale(reference);
  static final _setfontScale = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Float)>>(
          "set_android_content_res_Configuration_fontScale")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, double)>();
  set fontScale(double value) => _setfontScale(reference, value);

  /// from: public int hardKeyboardHidden
  static final _gethardKeyboardHidden = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_hardKeyboardHidden")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get hardKeyboardHidden => _gethardKeyboardHidden(reference);
  static final _sethardKeyboardHidden = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_hardKeyboardHidden")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set hardKeyboardHidden(int value) => _sethardKeyboardHidden(reference, value);

  /// from: public int keyboard
  static final _getkeyboard = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_keyboard")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get keyboard => _getkeyboard(reference);
  static final _setkeyboard = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_Configuration_keyboard")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set keyboard(int value) => _setkeyboard(reference, value);

  /// from: public int keyboardHidden
  static final _getkeyboardHidden = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_keyboardHidden")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get keyboardHidden => _getkeyboardHidden(reference);
  static final _setkeyboardHidden = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_keyboardHidden")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set keyboardHidden(int value) => _setkeyboardHidden(reference, value);

  /// from: public java.util.Locale locale
  static final _getlocale = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_locale")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>();
  jni.JlObject get locale => jni.JlObject.fromRef(_getlocale(reference));
  static final _setlocale = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "set_android_content_res_Configuration_locale")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
  set locale(jni.JlObject value) => _setlocale(reference, value.reference);

  /// from: public int mcc
  static final _getmcc = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_mcc")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get mcc => _getmcc(reference);
  static final _setmcc = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_Configuration_mcc")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set mcc(int value) => _setmcc(reference, value);

  /// from: public int mnc
  static final _getmnc = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_mnc")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get mnc => _getmnc(reference);
  static final _setmnc = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_Configuration_mnc")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set mnc(int value) => _setmnc(reference, value);

  /// from: public int navigation
  static final _getnavigation = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_navigation")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get navigation => _getnavigation(reference);
  static final _setnavigation = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_navigation")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set navigation(int value) => _setnavigation(reference, value);

  /// from: public int navigationHidden
  static final _getnavigationHidden = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_navigationHidden")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get navigationHidden => _getnavigationHidden(reference);
  static final _setnavigationHidden = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_navigationHidden")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set navigationHidden(int value) => _setnavigationHidden(reference, value);

  /// from: public int orientation
  static final _getorientation = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_orientation")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get orientation => _getorientation(reference);
  static final _setorientation = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_orientation")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set orientation(int value) => _setorientation(reference, value);

  /// from: public int screenHeightDp
  static final _getscreenHeightDp = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_screenHeightDp")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get screenHeightDp => _getscreenHeightDp(reference);
  static final _setscreenHeightDp = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_screenHeightDp")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set screenHeightDp(int value) => _setscreenHeightDp(reference, value);

  /// from: public int screenLayout
  static final _getscreenLayout = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_screenLayout")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get screenLayout => _getscreenLayout(reference);
  static final _setscreenLayout = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_screenLayout")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set screenLayout(int value) => _setscreenLayout(reference, value);

  /// from: public int screenWidthDp
  static final _getscreenWidthDp = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_screenWidthDp")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get screenWidthDp => _getscreenWidthDp(reference);
  static final _setscreenWidthDp = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_screenWidthDp")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set screenWidthDp(int value) => _setscreenWidthDp(reference, value);

  /// from: public int smallestScreenWidthDp
  static final _getsmallestScreenWidthDp = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_smallestScreenWidthDp")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get smallestScreenWidthDp => _getsmallestScreenWidthDp(reference);
  static final _setsmallestScreenWidthDp = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_smallestScreenWidthDp")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set smallestScreenWidthDp(int value) =>
      _setsmallestScreenWidthDp(reference, value);

  /// from: public int touchscreen
  static final _gettouchscreen = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_touchscreen")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get touchscreen => _gettouchscreen(reference);
  static final _settouchscreen = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_content_res_Configuration_touchscreen")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set touchscreen(int value) => _settouchscreen(reference, value);

  /// from: public int uiMode
  static final _getuiMode = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_content_res_Configuration_uiMode")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get uiMode => _getuiMode(reference);
  static final _setuiMode = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_content_res_Configuration_uiMode")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set uiMode(int value) => _setuiMode(reference, value);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_Configuration_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Configuration() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.res.Configuration o)
  Configuration.ctor_1(Configuration o) : super.fromRef(_ctor_1(o.reference));

  static final _isLayoutSizeAtLeast = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Configuration_isLayoutSizeAtLeast")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean isLayoutSizeAtLeast(int size)
  bool isLayoutSizeAtLeast(int size) =>
      _isLayoutSizeAtLeast(reference, size) != 0;

  static final _setTo = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_setTo")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTo(android.content.res.Configuration o)
  void setTo(Configuration o) => _setTo(reference, o.reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _setToDefaults =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_setToDefaults")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void setToDefaults()
  void setToDefaults() => _setToDefaults(reference);

  static final _updateFrom = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_updateFrom")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int updateFrom(android.content.res.Configuration delta)
  int updateFrom(Configuration delta) =>
      _updateFrom(reference, delta.reference);

  static final _diff = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_diff")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int diff(android.content.res.Configuration delta)
  int diff(Configuration delta) => _diff(reference, delta.reference);

  static final _needNewResources =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int32, ffi.Int32)>>(
              "android_content_res_Configuration_needNewResources")
          .asFunction<int Function(int, int)>();

  /// from: static public boolean needNewResources(int configChanges, int interestingChanges)
  static bool needNewResources(int configChanges, int interestingChanges) =>
      _needNewResources(configChanges, interestingChanges) != 0;

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Configuration_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(jni.JlObject dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _readFromParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_readFromParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel source)
  void readFromParcel(jni.JlObject source) =>
      _readFromParcel(reference, source.reference);

  static final _compareTo = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_compareTo")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(android.content.res.Configuration that)
  int compareTo(Configuration that) => _compareTo(reference, that.reference);

  static final _equals_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(android.content.res.Configuration that)
  bool equals_1(Configuration that) =>
      _equals_1(reference, that.reference) != 0;

  static final _equals_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_equals_2")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object that)
  bool equals_2(jni.JlObject that) => _equals_2(reference, that.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _getLocales = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_getLocales")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.LocaleList getLocales()
  jni.JlObject getLocales() => jni.JlObject.fromRef(_getLocales(reference));

  static final _setLocales = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_setLocales")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocales(android.os.LocaleList locales)
  void setLocales(jni.JlObject locales) =>
      _setLocales(reference, locales.reference);

  static final _setLocale = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_setLocale")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocale(java.util.Locale loc)
  void setLocale(jni.JlObject loc) => _setLocale(reference, loc.reference);

  static final _getLayoutDirection =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_getLayoutDirection")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getLayoutDirection()
  int getLayoutDirection() => _getLayoutDirection(reference);

  static final _setLayoutDirection = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Configuration_setLayoutDirection")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setLayoutDirection(java.util.Locale loc)
  void setLayoutDirection(jni.JlObject loc) =>
      _setLayoutDirection(reference, loc.reference);

  static final _isScreenRound =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_isScreenRound")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isScreenRound()
  bool isScreenRound() => _isScreenRound(reference) != 0;

  static final _isScreenWideColorGamut =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_isScreenWideColorGamut")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isScreenWideColorGamut()
  bool isScreenWideColorGamut() => _isScreenWideColorGamut(reference) != 0;

  static final _isScreenHdr =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Configuration_isScreenHdr")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isScreenHdr()
  bool isScreenHdr() => _isScreenHdr(reference) != 0;
}

class TypedArray extends jni.JlObject {
  TypedArray.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_content_res_TypedArray_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.content.res.Resources resources)
  TypedArray(Resources resources) : super.fromRef(_ctor(resources.reference));

  static final _length =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_TypedArray_length")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int length()
  int length() => _length(reference);

  static final _getIndexCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_TypedArray_getIndexCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getIndexCount()
  int getIndexCount() => _getIndexCount(reference);

  static final _getIndex = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getIndex")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getIndex(int at)
  int getIndex(int at) => _getIndex(reference, at);

  static final _getResources = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_TypedArray_getResources")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.Resources getResources()
  Resources getResources() => Resources.fromRef(_getResources(reference));

  static final _getText = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getText")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.CharSequence getText(int index)
  jni.JlObject getText(int index) =>
      jni.JlObject.fromRef(_getText(reference, index));

  static final _getString = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getString")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getString(int index)
  jni.JlString getString(int index) =>
      jni.JlString.fromRef(_getString(reference, index));

  static final _getNonResourceString = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_TypedArray_getNonResourceString")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getNonResourceString(int index)
  jni.JlString getNonResourceString(int index) =>
      jni.JlString.fromRef(_getNonResourceString(reference, index));

  static final _getBoolean = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Uint8)>>("android_content_res_TypedArray_getBoolean")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public boolean getBoolean(int index, boolean defValue)
  bool getBoolean(int index, bool defValue) =>
      _getBoolean(reference, index, defValue ? 1 : 0) != 0;

  static final _getInt = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_content_res_TypedArray_getInt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getInt(int index, int defValue)
  int getInt(int index, int defValue) => _getInt(reference, index, defValue);

  static final _getFloat = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Float)>>("android_content_res_TypedArray_getFloat")
      .asFunction<double Function(ffi.Pointer<ffi.Void>, int, double)>();

  /// from: public float getFloat(int index, float defValue)
  double getFloat(int index, double defValue) =>
      _getFloat(reference, index, defValue);

  static final _getColor = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_content_res_TypedArray_getColor")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getColor(int index, int defValue)
  int getColor(int index, int defValue) =>
      _getColor(reference, index, defValue);

  static final _getColorStateList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_TypedArray_getColorStateList")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.ColorStateList getColorStateList(int index)
  ColorStateList getColorStateList(int index) =>
      ColorStateList.fromRef(_getColorStateList(reference, index));

  static final _getInteger = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_content_res_TypedArray_getInteger")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getInteger(int index, int defValue)
  int getInteger(int index, int defValue) =>
      _getInteger(reference, index, defValue);

  static final _getDimension = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Float)>>("android_content_res_TypedArray_getDimension")
      .asFunction<double Function(ffi.Pointer<ffi.Void>, int, double)>();

  /// from: public float getDimension(int index, float defValue)
  double getDimension(int index, double defValue) =>
      _getDimension(reference, index, defValue);

  static final _getDimensionPixelOffset = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_TypedArray_getDimensionPixelOffset")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getDimensionPixelOffset(int index, int defValue)
  int getDimensionPixelOffset(int index, int defValue) =>
      _getDimensionPixelOffset(reference, index, defValue);

  static final _getDimensionPixelSize = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_TypedArray_getDimensionPixelSize")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getDimensionPixelSize(int index, int defValue)
  int getDimensionPixelSize(int index, int defValue) =>
      _getDimensionPixelSize(reference, index, defValue);

  static final _getLayoutDimension = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_content_res_TypedArray_getLayoutDimension")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public int getLayoutDimension(int index, java.lang.String name)
  int getLayoutDimension(int index, jni.JlString name) =>
      _getLayoutDimension(reference, index, name.reference);

  static final _getLayoutDimension_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_TypedArray_getLayoutDimension_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getLayoutDimension(int index, int defValue)
  int getLayoutDimension_1(int index, int defValue) =>
      _getLayoutDimension_1(reference, index, defValue);

  static final _getFraction = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Float)>>("android_content_res_TypedArray_getFraction")
      .asFunction<
          double Function(ffi.Pointer<ffi.Void>, int, int, int, double)>();

  /// from: public float getFraction(int index, int base, int pbase, float defValue)
  double getFraction(int index, int base, int pbase, double defValue) =>
      _getFraction(reference, index, base, pbase, defValue);

  static final _getResourceId = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_content_res_TypedArray_getResourceId")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int getResourceId(int index, int defValue)
  int getResourceId(int index, int defValue) =>
      _getResourceId(reference, index, defValue);

  static final _getDrawable = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getDrawable")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.drawable.Drawable getDrawable(int index)
  jni.JlObject getDrawable(int index) =>
      jni.JlObject.fromRef(_getDrawable(reference, index));

  static final _getFont = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getFont")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.Typeface getFont(int index)
  jni.JlObject getFont(int index) =>
      jni.JlObject.fromRef(_getFont(reference, index));

  static final _getTextArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getTextArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.CharSequence[] getTextArray(int index)
  jni.JlObject getTextArray(int index) =>
      jni.JlObject.fromRef(_getTextArray(reference, index));

  static final _getValue = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_content_res_TypedArray_getValue")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getValue(int index, android.util.TypedValue outValue)
  bool getValue(int index, jni.JlObject outValue) =>
      _getValue(reference, index, outValue.reference) != 0;

  static final _getType = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_getType")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getType(int index)
  int getType(int index) => _getType(reference, index);

  static final _hasValue = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_hasValue")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasValue(int index)
  bool hasValue(int index) => _hasValue(reference, index) != 0;

  static final _hasValueOrEmpty = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_hasValueOrEmpty")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasValueOrEmpty(int index)
  bool hasValueOrEmpty(int index) => _hasValueOrEmpty(reference, index) != 0;

  static final _peekValue = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_TypedArray_peekValue")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.util.TypedValue peekValue(int index)
  jni.JlObject peekValue(int index) =>
      jni.JlObject.fromRef(_peekValue(reference, index));

  static final _getPositionDescription = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_TypedArray_getPositionDescription")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPositionDescription()
  jni.JlString getPositionDescription() =>
      jni.JlString.fromRef(_getPositionDescription(reference));

  static final _recycle =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_TypedArray_recycle")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recycle()
  void recycle() => _recycle(reference);

  static final _getChangingConfigurations =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_TypedArray_getChangingConfigurations")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() => _getChangingConfigurations(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_TypedArray_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class ObbScanner extends jni.JlObject {
  ObbScanner.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_ObbScanner_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  ObbScanner() : super.fromRef(_ctor());

  static final _getObbInfo = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_ObbScanner_getObbInfo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.res.ObbInfo getObbInfo(java.lang.String filePath)
  static ObbInfo getObbInfo(jni.JlString filePath) =>
      ObbInfo.fromRef(_getObbInfo(filePath.reference));
}

class Resources extends jni.JlObject {
  Resources.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_content_res_Resources_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.res.AssetManager assets, android.util.DisplayMetrics metrics, android.content.res.Configuration config)
  Resources(AssetManager assets, jni.JlObject metrics, Configuration config)
      : super.fromRef(
            _ctor(assets.reference, metrics.reference, config.reference));

  static final _getSystem =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_Resources_getSystem")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.content.res.Resources getSystem()
  static Resources getSystem() => Resources.fromRef(_getSystem());

  static final _getText = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getText")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.CharSequence getText(int id)
  jni.JlObject getText(int id) => jni.JlObject.fromRef(_getText(reference, id));

  static final _getFont = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getFont")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.Typeface getFont(int id)
  jni.JlObject getFont(int id) => jni.JlObject.fromRef(_getFont(reference, id));

  static final _getQuantityText = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_content_res_Resources_getQuantityText")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public java.lang.CharSequence getQuantityText(int id, int quantity)
  jni.JlObject getQuantityText(int id, int quantity) =>
      jni.JlObject.fromRef(_getQuantityText(reference, id, quantity));

  static final _getString = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getString")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getString(int id)
  jni.JlString getString(int id) =>
      jni.JlString.fromRef(_getString(reference, id));

  static final _getString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getString_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getString(int id, java.lang.Object[] formatArgs)
  jni.JlString getString_1(int id, jni.JlObject formatArgs) =>
      jni.JlString.fromRef(_getString_1(reference, id, formatArgs.reference));

  static final _getQuantityString = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getQuantityString")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getQuantityString(int id, int quantity, java.lang.Object[] formatArgs)
  jni.JlString getQuantityString(
          int id, int quantity, jni.JlObject formatArgs) =>
      jni.JlString.fromRef(
          _getQuantityString(reference, id, quantity, formatArgs.reference));

  static final _getQuantityString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_Resources_getQuantityString_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public java.lang.String getQuantityString(int id, int quantity)
  jni.JlString getQuantityString_1(int id, int quantity) =>
      jni.JlString.fromRef(_getQuantityString_1(reference, id, quantity));

  static final _getText_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getText_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getText(int id, java.lang.CharSequence def)
  jni.JlObject getText_1(int id, jni.JlObject def) =>
      jni.JlObject.fromRef(_getText_1(reference, id, def.reference));

  static final _getTextArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getTextArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.CharSequence[] getTextArray(int id)
  jni.JlObject getTextArray(int id) =>
      jni.JlObject.fromRef(_getTextArray(reference, id));

  static final _getStringArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getStringArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String[] getStringArray(int id)
  jni.JlObject getStringArray(int id) =>
      jni.JlObject.fromRef(_getStringArray(reference, id));

  static final _getIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getIntArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int[] getIntArray(int id)
  jni.JlObject getIntArray(int id) =>
      jni.JlObject.fromRef(_getIntArray(reference, id));

  static final _obtainTypedArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_obtainTypedArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.TypedArray obtainTypedArray(int id)
  TypedArray obtainTypedArray(int id) =>
      TypedArray.fromRef(_obtainTypedArray(reference, id));

  static final _getDimension = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getDimension")
      .asFunction<double Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public float getDimension(int id)
  double getDimension(int id) => _getDimension(reference, id);

  static final _getDimensionPixelOffset = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getDimensionPixelOffset")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getDimensionPixelOffset(int id)
  int getDimensionPixelOffset(int id) =>
      _getDimensionPixelOffset(reference, id);

  static final _getDimensionPixelSize = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getDimensionPixelSize")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getDimensionPixelSize(int id)
  int getDimensionPixelSize(int id) => _getDimensionPixelSize(reference, id);

  static final _getFraction = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
                  ffi.Int32)>>("android_content_res_Resources_getFraction")
      .asFunction<double Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public float getFraction(int id, int base, int pbase)
  double getFraction(int id, int base, int pbase) =>
      _getFraction(reference, id, base, pbase);

  static final _getDrawable = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getDrawable")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.drawable.Drawable getDrawable(int id)
  jni.JlObject getDrawable(int id) =>
      jni.JlObject.fromRef(_getDrawable(reference, id));

  static final _getDrawable_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getDrawable_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable getDrawable(int id, android.content.res.Resources.Theme theme)
  jni.JlObject getDrawable_1(int id, Resources_Theme theme) =>
      jni.JlObject.fromRef(_getDrawable_1(reference, id, theme.reference));

  static final _getDrawableForDensity = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_content_res_Resources_getDrawableForDensity")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public android.graphics.drawable.Drawable getDrawableForDensity(int id, int density)
  jni.JlObject getDrawableForDensity(int id, int density) =>
      jni.JlObject.fromRef(_getDrawableForDensity(reference, id, density));

  static final _getDrawableForDensity_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getDrawableForDensity_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable getDrawableForDensity(int id, int density, android.content.res.Resources.Theme theme)
  jni.JlObject getDrawableForDensity_1(
          int id, int density, Resources_Theme theme) =>
      jni.JlObject.fromRef(
          _getDrawableForDensity_1(reference, id, density, theme.reference));

  static final _getMovie = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getMovie")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.Movie getMovie(int id)
  jni.JlObject getMovie(int id) =>
      jni.JlObject.fromRef(_getMovie(reference, id));

  static final _getColor = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getColor")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getColor(int id)
  int getColor(int id) => _getColor(reference, id);

  static final _getColor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getColor_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public int getColor(int id, android.content.res.Resources.Theme theme)
  int getColor_1(int id, Resources_Theme theme) =>
      _getColor_1(reference, id, theme.reference);

  static final _getColorStateList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getColorStateList")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.ColorStateList getColorStateList(int id)
  ColorStateList getColorStateList(int id) =>
      ColorStateList.fromRef(_getColorStateList(reference, id));

  static final _getColorStateList_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getColorStateList_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.ColorStateList getColorStateList(int id, android.content.res.Resources.Theme theme)
  ColorStateList getColorStateList_1(int id, Resources_Theme theme) =>
      ColorStateList.fromRef(
          _getColorStateList_1(reference, id, theme.reference));

  static final _getBoolean = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getBoolean")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBoolean(int id)
  bool getBoolean(int id) => _getBoolean(reference, id) != 0;

  static final _getInteger = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getInteger")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getInteger(int id)
  int getInteger(int id) => _getInteger(reference, id);

  static final _getLayout = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getLayout")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.XmlResourceParser getLayout(int id)
  XmlResourceParser getLayout(int id) =>
      XmlResourceParser.fromRef(_getLayout(reference, id));

  static final _getAnimation = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getAnimation")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.XmlResourceParser getAnimation(int id)
  XmlResourceParser getAnimation(int id) =>
      XmlResourceParser.fromRef(_getAnimation(reference, id));

  static final _getXml = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getXml")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.XmlResourceParser getXml(int id)
  XmlResourceParser getXml(int id) =>
      XmlResourceParser.fromRef(_getXml(reference, id));

  static final _openRawResource = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_openRawResource")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.io.InputStream openRawResource(int id)
  jni.JlObject openRawResource(int id) =>
      jni.JlObject.fromRef(_openRawResource(reference, id));

  static final _openRawResource_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_openRawResource_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream openRawResource(int id, android.util.TypedValue value)
  jni.JlObject openRawResource_1(int id, jni.JlObject value) =>
      jni.JlObject.fromRef(_openRawResource_1(reference, id, value.reference));

  static final _openRawResourceFd = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_openRawResourceFd")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.res.AssetFileDescriptor openRawResourceFd(int id)
  AssetFileDescriptor openRawResourceFd(int id) =>
      AssetFileDescriptor.fromRef(_openRawResourceFd(reference, id));

  static final _getValue = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_content_res_Resources_getValue")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void getValue(int id, android.util.TypedValue outValue, boolean resolveRefs)
  void getValue(int id, jni.JlObject outValue, bool resolveRefs) =>
      _getValue(reference, id, outValue.reference, resolveRefs ? 1 : 0);

  static final _getValueForDensity = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_content_res_Resources_getValueForDensity")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void getValueForDensity(int id, int density, android.util.TypedValue outValue, boolean resolveRefs)
  void getValueForDensity(
          int id, int density, jni.JlObject outValue, bool resolveRefs) =>
      _getValueForDensity(
          reference, id, density, outValue.reference, resolveRefs ? 1 : 0);

  static final _getValue_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_content_res_Resources_getValue_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void getValue(java.lang.String name, android.util.TypedValue outValue, boolean resolveRefs)
  void getValue_1(jni.JlString name, jni.JlObject outValue, bool resolveRefs) =>
      _getValue_1(
          reference, name.reference, outValue.reference, resolveRefs ? 1 : 0);

  static final _newTheme = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_newTheme")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.Resources.Theme newTheme()
  Resources_Theme newTheme() => Resources_Theme.fromRef(_newTheme(reference));

  static final _obtainAttributes = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_obtainAttributes")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet set, int[] attrs)
  TypedArray obtainAttributes(jni.JlObject set_, jni.JlObject attrs) =>
      TypedArray.fromRef(
          _obtainAttributes(reference, set_.reference, attrs.reference));

  static final _updateConfiguration = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_updateConfiguration")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void updateConfiguration(android.content.res.Configuration config, android.util.DisplayMetrics metrics)
  void updateConfiguration(Configuration config, jni.JlObject metrics) =>
      _updateConfiguration(reference, config.reference, metrics.reference);

  static final _getDisplayMetrics = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getDisplayMetrics")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.DisplayMetrics getDisplayMetrics()
  jni.JlObject getDisplayMetrics() =>
      jni.JlObject.fromRef(_getDisplayMetrics(reference));

  static final _getConfiguration = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getConfiguration")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.Configuration getConfiguration()
  Configuration getConfiguration() =>
      Configuration.fromRef(_getConfiguration(reference));

  static final _getIdentifier = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getIdentifier")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getIdentifier(java.lang.String name, java.lang.String defType, java.lang.String defPackage)
  int getIdentifier(
          jni.JlString name, jni.JlString defType, jni.JlString defPackage) =>
      _getIdentifier(
          reference, name.reference, defType.reference, defPackage.reference);

  static final _getResourceName = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_content_res_Resources_getResourceName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getResourceName(int resid)
  jni.JlString getResourceName(int resid) =>
      jni.JlString.fromRef(_getResourceName(reference, resid));

  static final _getResourcePackageName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getResourcePackageName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getResourcePackageName(int resid)
  jni.JlString getResourcePackageName(int resid) =>
      jni.JlString.fromRef(_getResourcePackageName(reference, resid));

  static final _getResourceTypeName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getResourceTypeName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getResourceTypeName(int resid)
  jni.JlString getResourceTypeName(int resid) =>
      jni.JlString.fromRef(_getResourceTypeName(reference, resid));

  static final _getResourceEntryName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources_getResourceEntryName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getResourceEntryName(int resid)
  jni.JlString getResourceEntryName(int resid) =>
      jni.JlString.fromRef(_getResourceEntryName(reference, resid));

  static final _parseBundleExtras = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_parseBundleExtras")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void parseBundleExtras(android.content.res.XmlResourceParser parser, android.os.Bundle outBundle)
  void parseBundleExtras(XmlResourceParser parser, jni.JlObject outBundle) =>
      _parseBundleExtras(reference, parser.reference, outBundle.reference);

  static final _parseBundleExtra = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_parseBundleExtra")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void parseBundleExtra(java.lang.String tagName, android.util.AttributeSet attrs, android.os.Bundle outBundle)
  void parseBundleExtra(
          jni.JlString tagName, jni.JlObject attrs, jni.JlObject outBundle) =>
      _parseBundleExtra(
          reference, tagName.reference, attrs.reference, outBundle.reference);

  static final _getAssets = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources_getAssets")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.AssetManager getAssets()
  AssetManager getAssets() => AssetManager.fromRef(_getAssets(reference));

  static final _flushLayoutCache =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Resources_flushLayoutCache")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void flushLayoutCache()
  void flushLayoutCache() => _flushLayoutCache(reference);

  static final _finishPreloading =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Resources_finishPreloading")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void finishPreloading()
  void finishPreloading() => _finishPreloading(reference);
}

class Resources_Theme extends jni.JlObject {
  Resources_Theme.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_Resources__Theme_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  Resources_Theme() : super.fromRef(_ctor());

  static final _applyStyle = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Uint8)>>(
          "android_content_res_Resources__Theme_applyStyle")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void applyStyle(int resId, boolean force)
  void applyStyle(int resId, bool force) =>
      _applyStyle(reference, resId, force ? 1 : 0);

  static final _setTo = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__Theme_setTo")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTo(android.content.res.Resources.Theme other)
  void setTo(Resources_Theme other) => _setTo(reference, other.reference);

  static final _obtainStyledAttributes = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__Theme_obtainStyledAttributes")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.TypedArray obtainStyledAttributes(int[] attrs)
  TypedArray obtainStyledAttributes(jni.JlObject attrs) =>
      TypedArray.fromRef(_obtainStyledAttributes(reference, attrs.reference));

  static final _obtainStyledAttributes_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__Theme_obtainStyledAttributes_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.TypedArray obtainStyledAttributes(int resId, int[] attrs)
  TypedArray obtainStyledAttributes_1(int resId, jni.JlObject attrs) =>
      TypedArray.fromRef(
          _obtainStyledAttributes_1(reference, resId, attrs.reference));

  static final _obtainStyledAttributes_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Int32)>>(
          "android_content_res_Resources__Theme_obtainStyledAttributes_2")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet set, int[] attrs, int defStyleAttr, int defStyleRes)
  TypedArray obtainStyledAttributes_2(jni.JlObject set_, jni.JlObject attrs,
          int defStyleAttr, int defStyleRes) =>
      TypedArray.fromRef(_obtainStyledAttributes_2(reference, set_.reference,
          attrs.reference, defStyleAttr, defStyleRes));

  static final _resolveAttribute = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_content_res_Resources__Theme_resolveAttribute")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean resolveAttribute(int resid, android.util.TypedValue outValue, boolean resolveRefs)
  bool resolveAttribute(int resid, jni.JlObject outValue, bool resolveRefs) =>
      _resolveAttribute(
          reference, resid, outValue.reference, resolveRefs ? 1 : 0) !=
      0;

  static final _getResources = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__Theme_getResources")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.res.Resources getResources()
  Resources getResources() => Resources.fromRef(_getResources(reference));

  static final _getDrawable = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_Resources__Theme_getDrawable")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.graphics.drawable.Drawable getDrawable(int id)
  jni.JlObject getDrawable(int id) =>
      jni.JlObject.fromRef(_getDrawable(reference, id));

  static final _getChangingConfigurations =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_Resources__Theme_getChangingConfigurations")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() => _getChangingConfigurations(reference);

  static final _dump = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__Theme_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(int priority, java.lang.String tag, java.lang.String prefix)
  void dump(int priority, jni.JlString tag, jni.JlString prefix) =>
      _dump(reference, priority, tag.reference, prefix.reference);
}

class Resources_NotFoundException extends jni.JlObject {
  Resources_NotFoundException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_content_res_Resources__NotFoundException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Resources_NotFoundException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__NotFoundException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String name)
  Resources_NotFoundException.ctor_1(jni.JlString name)
      : super.fromRef(_ctor_1(name.reference));

  static final _ctor_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_content_res_Resources__NotFoundException_new_2")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String name, java.lang.Exception cause)
  Resources_NotFoundException.ctor_2(jni.JlString name, jni.JlObject cause)
      : super.fromRef(_ctor_2(name.reference, cause.reference));
}

class XmlResourceParser extends jni.JlObject {
  XmlResourceParser.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _getAttributeNamespace = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_content_res_XmlResourceParser_getAttributeNamespace")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.lang.String getAttributeNamespace(int index)
  jni.JlString getAttributeNamespace(int index) =>
      jni.JlString.fromRef(_getAttributeNamespace(reference, index));

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_content_res_XmlResourceParser_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void close()
  void close() => _close(reference);
}
