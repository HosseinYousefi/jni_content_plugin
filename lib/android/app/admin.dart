// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "package:content_plugin/android/os.dart" as os;

import "package:content_plugin/android/content.dart" as content;

import "package:content_plugin/android/content/pm.dart" as pm;

import "package:content_plugin/android/app.dart" as app;
import "../../init.dart" show jlookup;

class DnsEvent extends NetworkEvent {
  DnsEvent.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.DnsEvent> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_DnsEvent_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_app_admin_DnsEvent_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Parcel in)
  DnsEvent(os.Parcel in_) : super.fromRef(_ctor(in_.reference));

  static final _getHostname = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DnsEvent_getHostname")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getHostname()
  jni.JlString getHostname() => jni.JlString.fromRef(_getHostname(reference));

  static final _getInetAddresses = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DnsEvent_getInetAddresses")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.net.InetAddress> getInetAddresses()
  jni.JlObject getInetAddresses() =>
      jni.JlObject.fromRef(_getInetAddresses(reference));

  static final _getTotalResolvedAddressCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DnsEvent_getTotalResolvedAddressCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalResolvedAddressCount()
  int getTotalResolvedAddressCount() =>
      _getTotalResolvedAddressCount(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DnsEvent_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DnsEvent_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_admin_DnsEvent_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(os.Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class DevicePolicyManager extends jni.JlObject {
  DevicePolicyManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_ADD_DEVICE_ADMIN
  static const ACTION_ADD_DEVICE_ADMIN = "android.app.action.ADD_DEVICE_ADMIN";

  /// from: static public final java.lang.String ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED
  static const ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED =
      "android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED";

  /// from: static public final java.lang.String ACTION_DEVICE_ADMIN_SERVICE
  static const ACTION_DEVICE_ADMIN_SERVICE =
      "android.app.action.DEVICE_ADMIN_SERVICE";

  /// from: static public final java.lang.String ACTION_DEVICE_OWNER_CHANGED
  static const ACTION_DEVICE_OWNER_CHANGED =
      "android.app.action.DEVICE_OWNER_CHANGED";

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_PROVISIONED
  static const ACTION_MANAGED_PROFILE_PROVISIONED =
      "android.app.action.MANAGED_PROFILE_PROVISIONED";

  /// from: static public final java.lang.String ACTION_PROFILE_OWNER_CHANGED
  static const ACTION_PROFILE_OWNER_CHANGED =
      "android.app.action.PROFILE_OWNER_CHANGED";

  /// from: static public final java.lang.String ACTION_PROVISIONING_SUCCESSFUL
  static const ACTION_PROVISIONING_SUCCESSFUL =
      "android.app.action.PROVISIONING_SUCCESSFUL";

  /// from: static public final java.lang.String ACTION_PROVISION_MANAGED_DEVICE
  static const ACTION_PROVISION_MANAGED_DEVICE =
      "android.app.action.PROVISION_MANAGED_DEVICE";

  /// from: static public final java.lang.String ACTION_PROVISION_MANAGED_PROFILE
  static const ACTION_PROVISION_MANAGED_PROFILE =
      "android.app.action.PROVISION_MANAGED_PROFILE";

  /// from: static public final java.lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD
  static const ACTION_SET_NEW_PARENT_PROFILE_PASSWORD =
      "android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD";

  /// from: static public final java.lang.String ACTION_SET_NEW_PASSWORD
  static const ACTION_SET_NEW_PASSWORD = "android.app.action.SET_NEW_PASSWORD";

  /// from: static public final java.lang.String ACTION_START_ENCRYPTION
  static const ACTION_START_ENCRYPTION = "android.app.action.START_ENCRYPTION";

  /// from: static public final java.lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED
  static const ACTION_SYSTEM_UPDATE_POLICY_CHANGED =
      "android.app.action.SYSTEM_UPDATE_POLICY_CHANGED";

  /// from: static public final java.lang.String DELEGATION_APP_RESTRICTIONS
  static const DELEGATION_APP_RESTRICTIONS = "delegation-app-restrictions";

  /// from: static public final java.lang.String DELEGATION_BLOCK_UNINSTALL
  static const DELEGATION_BLOCK_UNINSTALL = "delegation-block-uninstall";

  /// from: static public final java.lang.String DELEGATION_CERT_INSTALL
  static const DELEGATION_CERT_INSTALL = "delegation-cert-install";

  /// from: static public final java.lang.String DELEGATION_ENABLE_SYSTEM_APP
  static const DELEGATION_ENABLE_SYSTEM_APP = "delegation-enable-system-app";

  /// from: static public final java.lang.String DELEGATION_INSTALL_EXISTING_PACKAGE
  static const DELEGATION_INSTALL_EXISTING_PACKAGE =
      "delegation-install-existing-package";

  /// from: static public final java.lang.String DELEGATION_KEEP_UNINSTALLED_PACKAGES
  static const DELEGATION_KEEP_UNINSTALLED_PACKAGES =
      "delegation-keep-uninstalled-packages";

  /// from: static public final java.lang.String DELEGATION_PACKAGE_ACCESS
  static const DELEGATION_PACKAGE_ACCESS = "delegation-package-access";

  /// from: static public final java.lang.String DELEGATION_PERMISSION_GRANT
  static const DELEGATION_PERMISSION_GRANT = "delegation-permission-grant";

  /// from: static public final int ENCRYPTION_STATUS_ACTIVATING
  static const ENCRYPTION_STATUS_ACTIVATING = 2;

  /// from: static public final int ENCRYPTION_STATUS_ACTIVE
  static const ENCRYPTION_STATUS_ACTIVE = 3;

  /// from: static public final int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY
  static const ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY = 4;

  /// from: static public final int ENCRYPTION_STATUS_ACTIVE_PER_USER
  static const ENCRYPTION_STATUS_ACTIVE_PER_USER = 5;

  /// from: static public final int ENCRYPTION_STATUS_INACTIVE
  static const ENCRYPTION_STATUS_INACTIVE = 1;

  /// from: static public final int ENCRYPTION_STATUS_UNSUPPORTED
  static const ENCRYPTION_STATUS_UNSUPPORTED = 0;

  /// from: static public final java.lang.String EXTRA_ADD_EXPLANATION
  static const EXTRA_ADD_EXPLANATION = "android.app.extra.ADD_EXPLANATION";

  /// from: static public final java.lang.String EXTRA_DELEGATION_SCOPES
  static const EXTRA_DELEGATION_SCOPES = "android.app.extra.DELEGATION_SCOPES";

  /// from: static public final java.lang.String EXTRA_DEVICE_ADMIN
  static const EXTRA_DEVICE_ADMIN = "android.app.extra.DEVICE_ADMIN";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE
  static const EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE =
      "android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE
  static const EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE =
      "android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM
  static const EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM =
      "android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DISCLAIMERS
  static const EXTRA_PROVISIONING_DISCLAIMERS =
      "android.app.extra.PROVISIONING_DISCLAIMERS";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DISCLAIMER_CONTENT
  static const EXTRA_PROVISIONING_DISCLAIMER_CONTENT =
      "android.app.extra.PROVISIONING_DISCLAIMER_CONTENT";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_DISCLAIMER_HEADER
  static const EXTRA_PROVISIONING_DISCLAIMER_HEADER =
      "android.app.extra.PROVISIONING_DISCLAIMER_HEADER";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS
  static const EXTRA_PROVISIONING_EMAIL_ADDRESS =
      "android.app.extra.PROVISIONING_EMAIL_ADDRESS";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION
  static const EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION =
      "android.app.extra.PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED
  static const EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED =
      "android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_LOCALE
  static const EXTRA_PROVISIONING_LOCALE =
      "android.app.extra.PROVISIONING_LOCALE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_LOCAL_TIME
  static const EXTRA_PROVISIONING_LOCAL_TIME =
      "android.app.extra.PROVISIONING_LOCAL_TIME";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_LOGO_URI
  static const EXTRA_PROVISIONING_LOGO_URI =
      "android.app.extra.PROVISIONING_LOGO_URI";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_MAIN_COLOR
  static const EXTRA_PROVISIONING_MAIN_COLOR =
      "android.app.extra.PROVISIONING_MAIN_COLOR";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION
  static const EXTRA_PROVISIONING_SKIP_ENCRYPTION =
      "android.app.extra.PROVISIONING_SKIP_ENCRYPTION";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_SKIP_USER_CONSENT
  static const EXTRA_PROVISIONING_SKIP_USER_CONSENT =
      "android.app.extra.PROVISIONING_SKIP_USER_CONSENT";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_TIME_ZONE
  static const EXTRA_PROVISIONING_TIME_ZONE =
      "android.app.extra.PROVISIONING_TIME_ZONE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN
  static const EXTRA_PROVISIONING_WIFI_HIDDEN =
      "android.app.extra.PROVISIONING_WIFI_HIDDEN";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL
  static const EXTRA_PROVISIONING_WIFI_PAC_URL =
      "android.app.extra.PROVISIONING_WIFI_PAC_URL";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD
  static const EXTRA_PROVISIONING_WIFI_PASSWORD =
      "android.app.extra.PROVISIONING_WIFI_PASSWORD";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS
  static const EXTRA_PROVISIONING_WIFI_PROXY_BYPASS =
      "android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST
  static const EXTRA_PROVISIONING_WIFI_PROXY_HOST =
      "android.app.extra.PROVISIONING_WIFI_PROXY_HOST";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT
  static const EXTRA_PROVISIONING_WIFI_PROXY_PORT =
      "android.app.extra.PROVISIONING_WIFI_PROXY_PORT";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE
  static const EXTRA_PROVISIONING_WIFI_SECURITY_TYPE =
      "android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE";

  /// from: static public final java.lang.String EXTRA_PROVISIONING_WIFI_SSID
  static const EXTRA_PROVISIONING_WIFI_SSID =
      "android.app.extra.PROVISIONING_WIFI_SSID";

  /// from: static public final int FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY
  static const FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY = 1;

  /// from: static public final int FLAG_MANAGED_CAN_ACCESS_PARENT
  static const FLAG_MANAGED_CAN_ACCESS_PARENT = 2;

  /// from: static public final int FLAG_PARENT_CAN_ACCESS_MANAGED
  static const FLAG_PARENT_CAN_ACCESS_MANAGED = 1;

  /// from: static public final int ID_TYPE_BASE_INFO
  static const ID_TYPE_BASE_INFO = 1;

  /// from: static public final int ID_TYPE_IMEI
  static const ID_TYPE_IMEI = 4;

  /// from: static public final int ID_TYPE_MEID
  static const ID_TYPE_MEID = 8;

  /// from: static public final int ID_TYPE_SERIAL
  static const ID_TYPE_SERIAL = 2;

  /// from: static public final int INSTALLKEY_REQUEST_CREDENTIALS_ACCESS
  static const INSTALLKEY_REQUEST_CREDENTIALS_ACCESS = 1;

  /// from: static public final int INSTALLKEY_SET_USER_SELECTABLE
  static const INSTALLKEY_SET_USER_SELECTABLE = 2;

  /// from: static public final int KEYGUARD_DISABLE_BIOMETRICS
  static const KEYGUARD_DISABLE_BIOMETRICS = 416;

  /// from: static public final int KEYGUARD_DISABLE_FACE
  static const KEYGUARD_DISABLE_FACE = 128;

  /// from: static public final int KEYGUARD_DISABLE_FEATURES_ALL
  static const KEYGUARD_DISABLE_FEATURES_ALL = 2147483647;

  /// from: static public final int KEYGUARD_DISABLE_FEATURES_NONE
  static const KEYGUARD_DISABLE_FEATURES_NONE = 0;

  /// from: static public final int KEYGUARD_DISABLE_FINGERPRINT
  static const KEYGUARD_DISABLE_FINGERPRINT = 32;

  /// from: static public final int KEYGUARD_DISABLE_IRIS
  static const KEYGUARD_DISABLE_IRIS = 256;

  /// from: static public final int KEYGUARD_DISABLE_REMOTE_INPUT
  static const KEYGUARD_DISABLE_REMOTE_INPUT = 64;

  /// from: static public final int KEYGUARD_DISABLE_SECURE_CAMERA
  static const KEYGUARD_DISABLE_SECURE_CAMERA = 2;

  /// from: static public final int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS
  static const KEYGUARD_DISABLE_SECURE_NOTIFICATIONS = 4;

  /// from: static public final int KEYGUARD_DISABLE_TRUST_AGENTS
  static const KEYGUARD_DISABLE_TRUST_AGENTS = 16;

  /// from: static public final int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS
  static const KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS = 8;

  /// from: static public final int KEYGUARD_DISABLE_WIDGETS_ALL
  static const KEYGUARD_DISABLE_WIDGETS_ALL = 1;

  /// from: static public final int LEAVE_ALL_SYSTEM_APPS_ENABLED
  static const LEAVE_ALL_SYSTEM_APPS_ENABLED = 16;

  /// from: static public final int LOCK_TASK_FEATURE_GLOBAL_ACTIONS
  static const LOCK_TASK_FEATURE_GLOBAL_ACTIONS = 16;

  /// from: static public final int LOCK_TASK_FEATURE_HOME
  static const LOCK_TASK_FEATURE_HOME = 4;

  /// from: static public final int LOCK_TASK_FEATURE_KEYGUARD
  static const LOCK_TASK_FEATURE_KEYGUARD = 32;

  /// from: static public final int LOCK_TASK_FEATURE_NONE
  static const LOCK_TASK_FEATURE_NONE = 0;

  /// from: static public final int LOCK_TASK_FEATURE_NOTIFICATIONS
  static const LOCK_TASK_FEATURE_NOTIFICATIONS = 2;

  /// from: static public final int LOCK_TASK_FEATURE_OVERVIEW
  static const LOCK_TASK_FEATURE_OVERVIEW = 8;

  /// from: static public final int LOCK_TASK_FEATURE_SYSTEM_INFO
  static const LOCK_TASK_FEATURE_SYSTEM_INFO = 1;

  /// from: static public final int MAKE_USER_EPHEMERAL
  static const MAKE_USER_EPHEMERAL = 2;

  /// from: static public final java.lang.String MIME_TYPE_PROVISIONING_NFC
  static const MIME_TYPE_PROVISIONING_NFC =
      "application/com.android.managedprovisioning";

  /// from: static public final int PASSWORD_QUALITY_ALPHABETIC
  static const PASSWORD_QUALITY_ALPHABETIC = 262144;

  /// from: static public final int PASSWORD_QUALITY_ALPHANUMERIC
  static const PASSWORD_QUALITY_ALPHANUMERIC = 327680;

  /// from: static public final int PASSWORD_QUALITY_BIOMETRIC_WEAK
  static const PASSWORD_QUALITY_BIOMETRIC_WEAK = 32768;

  /// from: static public final int PASSWORD_QUALITY_COMPLEX
  static const PASSWORD_QUALITY_COMPLEX = 393216;

  /// from: static public final int PASSWORD_QUALITY_NUMERIC
  static const PASSWORD_QUALITY_NUMERIC = 131072;

  /// from: static public final int PASSWORD_QUALITY_NUMERIC_COMPLEX
  static const PASSWORD_QUALITY_NUMERIC_COMPLEX = 196608;

  /// from: static public final int PASSWORD_QUALITY_SOMETHING
  static const PASSWORD_QUALITY_SOMETHING = 65536;

  /// from: static public final int PASSWORD_QUALITY_UNSPECIFIED
  static const PASSWORD_QUALITY_UNSPECIFIED = 0;

  /// from: static public final int PERMISSION_GRANT_STATE_DEFAULT
  static const PERMISSION_GRANT_STATE_DEFAULT = 0;

  /// from: static public final int PERMISSION_GRANT_STATE_DENIED
  static const PERMISSION_GRANT_STATE_DENIED = 2;

  /// from: static public final int PERMISSION_GRANT_STATE_GRANTED
  static const PERMISSION_GRANT_STATE_GRANTED = 1;

  /// from: static public final int PERMISSION_POLICY_AUTO_DENY
  static const PERMISSION_POLICY_AUTO_DENY = 2;

  /// from: static public final int PERMISSION_POLICY_AUTO_GRANT
  static const PERMISSION_POLICY_AUTO_GRANT = 1;

  /// from: static public final int PERMISSION_POLICY_PROMPT
  static const PERMISSION_POLICY_PROMPT = 0;

  /// from: static public final java.lang.String POLICY_DISABLE_CAMERA
  static const POLICY_DISABLE_CAMERA = "policy_disable_camera";

  /// from: static public final java.lang.String POLICY_DISABLE_SCREEN_CAPTURE
  static const POLICY_DISABLE_SCREEN_CAPTURE = "policy_disable_screen_capture";

  /// from: static public final int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT
  static const RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT = 2;

  /// from: static public final int RESET_PASSWORD_REQUIRE_ENTRY
  static const RESET_PASSWORD_REQUIRE_ENTRY = 1;

  /// from: static public final int SKIP_SETUP_WIZARD
  static const SKIP_SETUP_WIZARD = 1;

  /// from: static public final int WIPE_EUICC
  static const WIPE_EUICC = 4;

  /// from: static public final int WIPE_EXTERNAL_STORAGE
  static const WIPE_EXTERNAL_STORAGE = 1;

  /// from: static public final int WIPE_RESET_PROTECTION_DATA
  static const WIPE_RESET_PROTECTION_DATA = 2;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_DevicePolicyManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  DevicePolicyManager() : super.fromRef(_ctor());

  static final _isAdminActive = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isAdminActive")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAdminActive(android.content.ComponentName admin)
  bool isAdminActive(content.ComponentName admin) =>
      _isAdminActive(reference, admin.reference) != 0;

  static final _getActiveAdmins = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getActiveAdmins")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.content.ComponentName> getActiveAdmins()
  jni.JlObject getActiveAdmins() =>
      jni.JlObject.fromRef(_getActiveAdmins(reference));

  static final _removeActiveAdmin = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_removeActiveAdmin")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeActiveAdmin(android.content.ComponentName admin)
  void removeActiveAdmin(content.ComponentName admin) =>
      _removeActiveAdmin(reference, admin.reference);

  static final _hasGrantedPolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_hasGrantedPolicy")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasGrantedPolicy(android.content.ComponentName admin, int usesPolicy)
  bool hasGrantedPolicy(content.ComponentName admin, int usesPolicy) =>
      _hasGrantedPolicy(reference, admin.reference, usesPolicy) != 0;

  static final _setPasswordQuality = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordQuality")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordQuality(android.content.ComponentName admin, int quality)
  void setPasswordQuality(content.ComponentName admin, int quality) =>
      _setPasswordQuality(reference, admin.reference, quality);

  static final _getPasswordQuality = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordQuality")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordQuality(android.content.ComponentName admin)
  int getPasswordQuality(content.ComponentName admin) =>
      _getPasswordQuality(reference, admin.reference);

  static final _setPasswordMinimumLength = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumLength")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumLength(android.content.ComponentName admin, int length)
  void setPasswordMinimumLength(content.ComponentName admin, int length) =>
      _setPasswordMinimumLength(reference, admin.reference, length);

  static final _getPasswordMinimumLength = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumLength")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumLength(android.content.ComponentName admin)
  int getPasswordMinimumLength(content.ComponentName admin) =>
      _getPasswordMinimumLength(reference, admin.reference);

  static final _setPasswordMinimumUpperCase = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumUpperCase")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumUpperCase(android.content.ComponentName admin, int length)
  void setPasswordMinimumUpperCase(content.ComponentName admin, int length) =>
      _setPasswordMinimumUpperCase(reference, admin.reference, length);

  static final _getPasswordMinimumUpperCase = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumUpperCase")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumUpperCase(android.content.ComponentName admin)
  int getPasswordMinimumUpperCase(content.ComponentName admin) =>
      _getPasswordMinimumUpperCase(reference, admin.reference);

  static final _setPasswordMinimumLowerCase = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumLowerCase")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumLowerCase(android.content.ComponentName admin, int length)
  void setPasswordMinimumLowerCase(content.ComponentName admin, int length) =>
      _setPasswordMinimumLowerCase(reference, admin.reference, length);

  static final _getPasswordMinimumLowerCase = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumLowerCase")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumLowerCase(android.content.ComponentName admin)
  int getPasswordMinimumLowerCase(content.ComponentName admin) =>
      _getPasswordMinimumLowerCase(reference, admin.reference);

  static final _setPasswordMinimumLetters = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumLetters")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumLetters(android.content.ComponentName admin, int length)
  void setPasswordMinimumLetters(content.ComponentName admin, int length) =>
      _setPasswordMinimumLetters(reference, admin.reference, length);

  static final _getPasswordMinimumLetters = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumLetters")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumLetters(android.content.ComponentName admin)
  int getPasswordMinimumLetters(content.ComponentName admin) =>
      _getPasswordMinimumLetters(reference, admin.reference);

  static final _setPasswordMinimumNumeric = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumNumeric")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumNumeric(android.content.ComponentName admin, int length)
  void setPasswordMinimumNumeric(content.ComponentName admin, int length) =>
      _setPasswordMinimumNumeric(reference, admin.reference, length);

  static final _getPasswordMinimumNumeric = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumNumeric")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumNumeric(android.content.ComponentName admin)
  int getPasswordMinimumNumeric(content.ComponentName admin) =>
      _getPasswordMinimumNumeric(reference, admin.reference);

  static final _setPasswordMinimumSymbols = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumSymbols")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumSymbols(android.content.ComponentName admin, int length)
  void setPasswordMinimumSymbols(content.ComponentName admin, int length) =>
      _setPasswordMinimumSymbols(reference, admin.reference, length);

  static final _getPasswordMinimumSymbols = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumSymbols")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumSymbols(android.content.ComponentName admin)
  int getPasswordMinimumSymbols(content.ComponentName admin) =>
      _getPasswordMinimumSymbols(reference, admin.reference);

  static final _setPasswordMinimumNonLetter = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordMinimumNonLetter")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordMinimumNonLetter(android.content.ComponentName admin, int length)
  void setPasswordMinimumNonLetter(content.ComponentName admin, int length) =>
      _setPasswordMinimumNonLetter(reference, admin.reference, length);

  static final _getPasswordMinimumNonLetter = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMinimumNonLetter")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordMinimumNonLetter(android.content.ComponentName admin)
  int getPasswordMinimumNonLetter(content.ComponentName admin) =>
      _getPasswordMinimumNonLetter(reference, admin.reference);

  static final _setPasswordHistoryLength = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPasswordHistoryLength")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordHistoryLength(android.content.ComponentName admin, int length)
  void setPasswordHistoryLength(content.ComponentName admin, int length) =>
      _setPasswordHistoryLength(reference, admin.reference, length);

  static final _setPasswordExpirationTimeout = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_app_admin_DevicePolicyManager_setPasswordExpirationTimeout")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPasswordExpirationTimeout(android.content.ComponentName admin, long timeout)
  void setPasswordExpirationTimeout(content.ComponentName admin, int timeout) =>
      _setPasswordExpirationTimeout(reference, admin.reference, timeout);

  static final _getPasswordExpirationTimeout = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordExpirationTimeout")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getPasswordExpirationTimeout(android.content.ComponentName admin)
  int getPasswordExpirationTimeout(content.ComponentName admin) =>
      _getPasswordExpirationTimeout(reference, admin.reference);

  static final _getPasswordExpiration = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordExpiration")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getPasswordExpiration(android.content.ComponentName admin)
  int getPasswordExpiration(content.ComponentName admin) =>
      _getPasswordExpiration(reference, admin.reference);

  static final _getPasswordHistoryLength = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPasswordHistoryLength")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPasswordHistoryLength(android.content.ComponentName admin)
  int getPasswordHistoryLength(content.ComponentName admin) =>
      _getPasswordHistoryLength(reference, admin.reference);

  static final _getPasswordMaximumLength = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_getPasswordMaximumLength")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getPasswordMaximumLength(int quality)
  int getPasswordMaximumLength(int quality) =>
      _getPasswordMaximumLength(reference, quality);

  static final _isActivePasswordSufficient = jlookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isActivePasswordSufficient")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isActivePasswordSufficient()
  bool isActivePasswordSufficient() =>
      _isActivePasswordSufficient(reference) != 0;

  static final _isUsingUnifiedPassword = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isUsingUnifiedPassword")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUsingUnifiedPassword(android.content.ComponentName admin)
  bool isUsingUnifiedPassword(content.ComponentName admin) =>
      _isUsingUnifiedPassword(reference, admin.reference) != 0;

  static final _getCurrentFailedPasswordAttempts = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCurrentFailedPasswordAttempts")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getCurrentFailedPasswordAttempts()
  int getCurrentFailedPasswordAttempts() =>
      _getCurrentFailedPasswordAttempts(reference);

  static final _setMaximumFailedPasswordsForWipe = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setMaximumFailedPasswordsForWipe")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setMaximumFailedPasswordsForWipe(android.content.ComponentName admin, int num)
  void setMaximumFailedPasswordsForWipe(content.ComponentName admin, int num) =>
      _setMaximumFailedPasswordsForWipe(reference, admin.reference, num);

  static final _getMaximumFailedPasswordsForWipe = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getMaximumFailedPasswordsForWipe")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getMaximumFailedPasswordsForWipe(android.content.ComponentName admin)
  int getMaximumFailedPasswordsForWipe(content.ComponentName admin) =>
      _getMaximumFailedPasswordsForWipe(reference, admin.reference);

  static final _resetPassword = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_resetPassword")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean resetPassword(java.lang.String password, int flags)
  bool resetPassword(jni.JlString password, int flags) =>
      _resetPassword(reference, password.reference, flags) != 0;

  static final _setResetPasswordToken = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setResetPasswordToken")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setResetPasswordToken(android.content.ComponentName admin, byte[] token)
  bool setResetPasswordToken(content.ComponentName admin, jni.JlObject token) =>
      _setResetPasswordToken(reference, admin.reference, token.reference) != 0;

  static final _clearResetPasswordToken = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearResetPasswordToken")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean clearResetPasswordToken(android.content.ComponentName admin)
  bool clearResetPasswordToken(content.ComponentName admin) =>
      _clearResetPasswordToken(reference, admin.reference) != 0;

  static final _isResetPasswordTokenActive = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isResetPasswordTokenActive")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isResetPasswordTokenActive(android.content.ComponentName admin)
  bool isResetPasswordTokenActive(content.ComponentName admin) =>
      _isResetPasswordTokenActive(reference, admin.reference) != 0;

  static final _resetPasswordWithToken = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_resetPasswordWithToken")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean resetPasswordWithToken(android.content.ComponentName admin, java.lang.String password, byte[] token, int flags)
  bool resetPasswordWithToken(content.ComponentName admin,
          jni.JlString password, jni.JlObject token, int flags) =>
      _resetPasswordWithToken(reference, admin.reference, password.reference,
          token.reference, flags) !=
      0;

  static final _setMaximumTimeToLock = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_app_admin_DevicePolicyManager_setMaximumTimeToLock")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setMaximumTimeToLock(android.content.ComponentName admin, long timeMs)
  void setMaximumTimeToLock(content.ComponentName admin, int timeMs) =>
      _setMaximumTimeToLock(reference, admin.reference, timeMs);

  static final _getMaximumTimeToLock = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getMaximumTimeToLock")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getMaximumTimeToLock(android.content.ComponentName admin)
  int getMaximumTimeToLock(content.ComponentName admin) =>
      _getMaximumTimeToLock(reference, admin.reference);

  static final _setRequiredStrongAuthTimeout = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_app_admin_DevicePolicyManager_setRequiredStrongAuthTimeout")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setRequiredStrongAuthTimeout(android.content.ComponentName admin, long timeoutMs)
  void setRequiredStrongAuthTimeout(
          content.ComponentName admin, int timeoutMs) =>
      _setRequiredStrongAuthTimeout(reference, admin.reference, timeoutMs);

  static final _getRequiredStrongAuthTimeout = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getRequiredStrongAuthTimeout")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getRequiredStrongAuthTimeout(android.content.ComponentName admin)
  int getRequiredStrongAuthTimeout(content.ComponentName admin) =>
      _getRequiredStrongAuthTimeout(reference, admin.reference);

  static final _lockNow =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DevicePolicyManager_lockNow")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void lockNow()
  void lockNow() => _lockNow(reference);

  static final _lockNow_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_lockNow_1")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void lockNow(int flags)
  void lockNow_1(int flags) => _lockNow_1(reference, flags);

  static final _wipeData = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_admin_DevicePolicyManager_wipeData")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void wipeData(int flags)
  void wipeData(int flags) => _wipeData(reference, flags);

  static final _wipeData_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_wipeData_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void wipeData(int flags, java.lang.CharSequence reason)
  void wipeData_1(int flags, jni.JlObject reason) =>
      _wipeData_1(reference, flags, reason.reference);

  static final _setRecommendedGlobalProxy = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setRecommendedGlobalProxy")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRecommendedGlobalProxy(android.content.ComponentName admin, android.net.ProxyInfo proxyInfo)
  void setRecommendedGlobalProxy(
          content.ComponentName admin, jni.JlObject proxyInfo) =>
      _setRecommendedGlobalProxy(
          reference, admin.reference, proxyInfo.reference);

  static final _setStorageEncryption = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setStorageEncryption")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int setStorageEncryption(android.content.ComponentName admin, boolean encrypt)
  int setStorageEncryption(content.ComponentName admin, bool encrypt) =>
      _setStorageEncryption(reference, admin.reference, encrypt ? 1 : 0);

  static final _getStorageEncryption = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getStorageEncryption")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getStorageEncryption(android.content.ComponentName admin)
  bool getStorageEncryption(content.ComponentName admin) =>
      _getStorageEncryption(reference, admin.reference) != 0;

  static final _getStorageEncryptionStatus = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getStorageEncryptionStatus")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getStorageEncryptionStatus()
  int getStorageEncryptionStatus() => _getStorageEncryptionStatus(reference);

  static final _installCaCert = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_installCaCert")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean installCaCert(android.content.ComponentName admin, byte[] certBuffer)
  bool installCaCert(content.ComponentName admin, jni.JlObject certBuffer) =>
      _installCaCert(reference, admin.reference, certBuffer.reference) != 0;

  static final _uninstallCaCert = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_uninstallCaCert")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void uninstallCaCert(android.content.ComponentName admin, byte[] certBuffer)
  void uninstallCaCert(content.ComponentName admin, jni.JlObject certBuffer) =>
      _uninstallCaCert(reference, admin.reference, certBuffer.reference);

  static final _getInstalledCaCerts = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getInstalledCaCerts")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<byte[]> getInstalledCaCerts(android.content.ComponentName admin)
  jni.JlObject getInstalledCaCerts(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getInstalledCaCerts(reference, admin.reference));

  static final _uninstallAllUserCaCerts = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_uninstallAllUserCaCerts")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void uninstallAllUserCaCerts(android.content.ComponentName admin)
  void uninstallAllUserCaCerts(content.ComponentName admin) =>
      _uninstallAllUserCaCerts(reference, admin.reference);

  static final _hasCaCertInstalled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_hasCaCertInstalled")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasCaCertInstalled(android.content.ComponentName admin, byte[] certBuffer)
  bool hasCaCertInstalled(
          content.ComponentName admin, jni.JlObject certBuffer) =>
      _hasCaCertInstalled(reference, admin.reference, certBuffer.reference) !=
      0;

  static final _installKeyPair = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_installKeyPair")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean installKeyPair(android.content.ComponentName admin, java.security.PrivateKey privKey, java.security.cert.Certificate cert, java.lang.String alias)
  bool installKeyPair(content.ComponentName admin, jni.JlObject privKey,
          jni.JlObject cert, jni.JlString alias) =>
      _installKeyPair(reference, admin.reference, privKey.reference,
          cert.reference, alias.reference) !=
      0;

  static final _installKeyPair_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_installKeyPair_1")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public boolean installKeyPair(android.content.ComponentName admin, java.security.PrivateKey privKey, java.security.cert.Certificate[] certs, java.lang.String alias, boolean requestAccess)
  bool installKeyPair_1(content.ComponentName admin, jni.JlObject privKey,
          jni.JlObject certs, jni.JlString alias, bool requestAccess) =>
      _installKeyPair_1(reference, admin.reference, privKey.reference,
          certs.reference, alias.reference, requestAccess ? 1 : 0) !=
      0;

  static final _installKeyPair_2 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_installKeyPair_2")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public boolean installKeyPair(android.content.ComponentName admin, java.security.PrivateKey privKey, java.security.cert.Certificate[] certs, java.lang.String alias, int flags)
  bool installKeyPair_2(content.ComponentName admin, jni.JlObject privKey,
          jni.JlObject certs, jni.JlString alias, int flags) =>
      _installKeyPair_2(reference, admin.reference, privKey.reference,
          certs.reference, alias.reference, flags) !=
      0;

  static final _removeKeyPair = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_removeKeyPair")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean removeKeyPair(android.content.ComponentName admin, java.lang.String alias)
  bool removeKeyPair(content.ComponentName admin, jni.JlString alias) =>
      _removeKeyPair(reference, admin.reference, alias.reference) != 0;

  static final _generateKeyPair = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_generateKeyPair")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public android.security.AttestedKeyPair generateKeyPair(android.content.ComponentName admin, java.lang.String algorithm, android.security.keystore.KeyGenParameterSpec keySpec, int idAttestationFlags)
  jni.JlObject generateKeyPair(
          content.ComponentName admin,
          jni.JlString algorithm,
          jni.JlObject keySpec,
          int idAttestationFlags) =>
      jni.JlObject.fromRef(_generateKeyPair(reference, admin.reference,
          algorithm.reference, keySpec.reference, idAttestationFlags));

  static final _isDeviceIdAttestationSupported = jlookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isDeviceIdAttestationSupported")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDeviceIdAttestationSupported()
  bool isDeviceIdAttestationSupported() =>
      _isDeviceIdAttestationSupported(reference) != 0;

  static final _setKeyPairCertificate = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setKeyPairCertificate")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setKeyPairCertificate(android.content.ComponentName admin, java.lang.String alias, java.util.List<java.security.cert.Certificate> certs, boolean isUserSelectable)
  bool setKeyPairCertificate(content.ComponentName admin, jni.JlString alias,
          jni.JlObject certs, bool isUserSelectable) =>
      _setKeyPairCertificate(reference, admin.reference, alias.reference,
          certs.reference, isUserSelectable ? 1 : 0) !=
      0;

  static final _setCertInstallerPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setCertInstallerPackage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setCertInstallerPackage(android.content.ComponentName admin, java.lang.String installerPackage)
  void setCertInstallerPackage(
          content.ComponentName admin, jni.JlString installerPackage) =>
      _setCertInstallerPackage(
          reference, admin.reference, installerPackage.reference);

  static final _getCertInstallerPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCertInstallerPackage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getCertInstallerPackage(android.content.ComponentName admin)
  jni.JlString getCertInstallerPackage(content.ComponentName admin) =>
      jni.JlString.fromRef(
          _getCertInstallerPackage(reference, admin.reference));

  static final _setDelegatedScopes = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setDelegatedScopes")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setDelegatedScopes(android.content.ComponentName admin, java.lang.String delegatePackage, java.util.List<java.lang.String> scopes)
  void setDelegatedScopes(content.ComponentName admin,
          jni.JlString delegatePackage, jni.JlObject scopes) =>
      _setDelegatedScopes(reference, admin.reference, delegatePackage.reference,
          scopes.reference);

  static final _getDelegatedScopes = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getDelegatedScopes")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getDelegatedScopes(android.content.ComponentName admin, java.lang.String delegatedPackage)
  jni.JlObject getDelegatedScopes(
          content.ComponentName admin, jni.JlString delegatedPackage) =>
      jni.JlObject.fromRef(_getDelegatedScopes(
          reference, admin.reference, delegatedPackage.reference));

  static final _getDelegatePackages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getDelegatePackages")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getDelegatePackages(android.content.ComponentName admin, java.lang.String delegationScope)
  jni.JlObject getDelegatePackages(
          content.ComponentName admin, jni.JlString delegationScope) =>
      jni.JlObject.fromRef(_getDelegatePackages(
          reference, admin.reference, delegationScope.reference));

  static final _setAlwaysOnVpnPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setAlwaysOnVpnPackage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setAlwaysOnVpnPackage(android.content.ComponentName admin, java.lang.String vpnPackage, boolean lockdownEnabled)
  void setAlwaysOnVpnPackage(content.ComponentName admin,
          jni.JlString vpnPackage, bool lockdownEnabled) =>
      _setAlwaysOnVpnPackage(reference, admin.reference, vpnPackage.reference,
          lockdownEnabled ? 1 : 0);

  static final _getAlwaysOnVpnPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getAlwaysOnVpnPackage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName admin)
  jni.JlString getAlwaysOnVpnPackage(content.ComponentName admin) =>
      jni.JlString.fromRef(_getAlwaysOnVpnPackage(reference, admin.reference));

  static final _setCameraDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setCameraDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCameraDisabled(android.content.ComponentName admin, boolean disabled)
  void setCameraDisabled(content.ComponentName admin, bool disabled) =>
      _setCameraDisabled(reference, admin.reference, disabled ? 1 : 0);

  static final _getCameraDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCameraDisabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getCameraDisabled(android.content.ComponentName admin)
  bool getCameraDisabled(content.ComponentName admin) =>
      _getCameraDisabled(reference, admin.reference) != 0;

  static final _requestBugreport = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_requestBugreport")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean requestBugreport(android.content.ComponentName admin)
  bool requestBugreport(content.ComponentName admin) =>
      _requestBugreport(reference, admin.reference) != 0;

  static final _setScreenCaptureDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setScreenCaptureDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setScreenCaptureDisabled(android.content.ComponentName admin, boolean disabled)
  void setScreenCaptureDisabled(content.ComponentName admin, bool disabled) =>
      _setScreenCaptureDisabled(reference, admin.reference, disabled ? 1 : 0);

  static final _getScreenCaptureDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getScreenCaptureDisabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getScreenCaptureDisabled(android.content.ComponentName admin)
  bool getScreenCaptureDisabled(content.ComponentName admin) =>
      _getScreenCaptureDisabled(reference, admin.reference) != 0;

  static final _setAutoTimeRequired = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setAutoTimeRequired")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setAutoTimeRequired(android.content.ComponentName admin, boolean required)
  void setAutoTimeRequired(content.ComponentName admin, bool required_) =>
      _setAutoTimeRequired(reference, admin.reference, required_ ? 1 : 0);

  static final _getAutoTimeRequired =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DevicePolicyManager_getAutoTimeRequired")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getAutoTimeRequired()
  bool getAutoTimeRequired() => _getAutoTimeRequired(reference) != 0;

  static final _setKeyguardDisabledFeatures = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setKeyguardDisabledFeatures")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setKeyguardDisabledFeatures(android.content.ComponentName admin, int which)
  void setKeyguardDisabledFeatures(content.ComponentName admin, int which) =>
      _setKeyguardDisabledFeatures(reference, admin.reference, which);

  static final _getKeyguardDisabledFeatures = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getKeyguardDisabledFeatures")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getKeyguardDisabledFeatures(android.content.ComponentName admin)
  int getKeyguardDisabledFeatures(content.ComponentName admin) =>
      _getKeyguardDisabledFeatures(reference, admin.reference);

  static final _isDeviceOwnerApp = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isDeviceOwnerApp")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDeviceOwnerApp(java.lang.String packageName)
  bool isDeviceOwnerApp(jni.JlString packageName) =>
      _isDeviceOwnerApp(reference, packageName.reference) != 0;

  static final _clearDeviceOwnerApp = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearDeviceOwnerApp")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void clearDeviceOwnerApp(java.lang.String packageName)
  void clearDeviceOwnerApp(jni.JlString packageName) =>
      _clearDeviceOwnerApp(reference, packageName.reference);

  static final _clearProfileOwner = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearProfileOwner")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void clearProfileOwner(android.content.ComponentName admin)
  void clearProfileOwner(content.ComponentName admin) =>
      _clearProfileOwner(reference, admin.reference);

  static final _setDeviceOwnerLockScreenInfo = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setDeviceOwnerLockScreenInfo")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setDeviceOwnerLockScreenInfo(android.content.ComponentName admin, java.lang.CharSequence info)
  void setDeviceOwnerLockScreenInfo(
          content.ComponentName admin, jni.JlObject info) =>
      _setDeviceOwnerLockScreenInfo(reference, admin.reference, info.reference);

  static final _getDeviceOwnerLockScreenInfo = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getDeviceOwnerLockScreenInfo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getDeviceOwnerLockScreenInfo()
  jni.JlObject getDeviceOwnerLockScreenInfo() =>
      jni.JlObject.fromRef(_getDeviceOwnerLockScreenInfo(reference));

  static final _setPackagesSuspended = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setPackagesSuspended")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String[] setPackagesSuspended(android.content.ComponentName admin, java.lang.String[] packageNames, boolean suspended)
  jni.JlObject setPackagesSuspended(content.ComponentName admin,
          jni.JlObject packageNames, bool suspended) =>
      jni.JlObject.fromRef(_setPackagesSuspended(reference, admin.reference,
          packageNames.reference, suspended ? 1 : 0));

  static final _isPackageSuspended = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isPackageSuspended")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPackageSuspended(android.content.ComponentName admin, java.lang.String packageName)
  bool isPackageSuspended(
          content.ComponentName admin, jni.JlString packageName) =>
      _isPackageSuspended(reference, admin.reference, packageName.reference) !=
      0;

  static final _setProfileEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setProfileEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setProfileEnabled(android.content.ComponentName admin)
  void setProfileEnabled(content.ComponentName admin) =>
      _setProfileEnabled(reference, admin.reference);

  static final _setProfileName = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setProfileName")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setProfileName(android.content.ComponentName admin, java.lang.String profileName)
  void setProfileName(content.ComponentName admin, jni.JlString profileName) =>
      _setProfileName(reference, admin.reference, profileName.reference);

  static final _isProfileOwnerApp = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isProfileOwnerApp")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isProfileOwnerApp(java.lang.String packageName)
  bool isProfileOwnerApp(jni.JlString packageName) =>
      _isProfileOwnerApp(reference, packageName.reference) != 0;

  static final _addPersistentPreferredActivity = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_addPersistentPreferredActivity")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addPersistentPreferredActivity(android.content.ComponentName admin, android.content.IntentFilter filter, android.content.ComponentName activity)
  void addPersistentPreferredActivity(content.ComponentName admin,
          content.IntentFilter filter, content.ComponentName activity) =>
      _addPersistentPreferredActivity(
          reference, admin.reference, filter.reference, activity.reference);

  static final _clearPackagePersistentPreferredActivities = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearPackagePersistentPreferredActivities")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void clearPackagePersistentPreferredActivities(android.content.ComponentName admin, java.lang.String packageName)
  void clearPackagePersistentPreferredActivities(
          content.ComponentName admin, jni.JlString packageName) =>
      _clearPackagePersistentPreferredActivities(
          reference, admin.reference, packageName.reference);

  static final _setApplicationRestrictionsManagingPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setApplicationRestrictionsManagingPackage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setApplicationRestrictionsManagingPackage(android.content.ComponentName admin, java.lang.String packageName)
  void setApplicationRestrictionsManagingPackage(
          content.ComponentName admin, jni.JlString packageName) =>
      _setApplicationRestrictionsManagingPackage(
          reference, admin.reference, packageName.reference);

  static final _getApplicationRestrictionsManagingPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getApplicationRestrictionsManagingPackage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName admin)
  jni.JlString getApplicationRestrictionsManagingPackage(
          content.ComponentName admin) =>
      jni.JlString.fromRef(_getApplicationRestrictionsManagingPackage(
          reference, admin.reference));

  static final _isCallerApplicationRestrictionsManagingPackage = jlookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isCallerApplicationRestrictionsManagingPackage")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCallerApplicationRestrictionsManagingPackage()
  bool isCallerApplicationRestrictionsManagingPackage() =>
      _isCallerApplicationRestrictionsManagingPackage(reference) != 0;

  static final _setApplicationRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setApplicationRestrictions")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setApplicationRestrictions(android.content.ComponentName admin, java.lang.String packageName, android.os.Bundle settings)
  void setApplicationRestrictions(content.ComponentName admin,
          jni.JlString packageName, os.Bundle settings) =>
      _setApplicationRestrictions(reference, admin.reference,
          packageName.reference, settings.reference);

  static final _setTrustAgentConfiguration = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setTrustAgentConfiguration")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTrustAgentConfiguration(android.content.ComponentName admin, android.content.ComponentName target, android.os.PersistableBundle configuration)
  void setTrustAgentConfiguration(content.ComponentName admin,
          content.ComponentName target, os.PersistableBundle configuration) =>
      _setTrustAgentConfiguration(reference, admin.reference, target.reference,
          configuration.reference);

  static final _getTrustAgentConfiguration = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getTrustAgentConfiguration")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.os.PersistableBundle> getTrustAgentConfiguration(android.content.ComponentName admin, android.content.ComponentName agent)
  jni.JlObject getTrustAgentConfiguration(
          content.ComponentName admin, content.ComponentName agent) =>
      jni.JlObject.fromRef(_getTrustAgentConfiguration(
          reference, admin.reference, agent.reference));

  static final _setCrossProfileCallerIdDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setCrossProfileCallerIdDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCrossProfileCallerIdDisabled(android.content.ComponentName admin, boolean disabled)
  void setCrossProfileCallerIdDisabled(
          content.ComponentName admin, bool disabled) =>
      _setCrossProfileCallerIdDisabled(
          reference, admin.reference, disabled ? 1 : 0);

  static final _getCrossProfileCallerIdDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCrossProfileCallerIdDisabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName admin)
  bool getCrossProfileCallerIdDisabled(content.ComponentName admin) =>
      _getCrossProfileCallerIdDisabled(reference, admin.reference) != 0;

  static final _setCrossProfileContactsSearchDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setCrossProfileContactsSearchDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCrossProfileContactsSearchDisabled(android.content.ComponentName admin, boolean disabled)
  void setCrossProfileContactsSearchDisabled(
          content.ComponentName admin, bool disabled) =>
      _setCrossProfileContactsSearchDisabled(
          reference, admin.reference, disabled ? 1 : 0);

  static final _getCrossProfileContactsSearchDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCrossProfileContactsSearchDisabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName admin)
  bool getCrossProfileContactsSearchDisabled(content.ComponentName admin) =>
      _getCrossProfileContactsSearchDisabled(reference, admin.reference) != 0;

  static final _setBluetoothContactSharingDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setBluetoothContactSharingDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setBluetoothContactSharingDisabled(android.content.ComponentName admin, boolean disabled)
  void setBluetoothContactSharingDisabled(
          content.ComponentName admin, bool disabled) =>
      _setBluetoothContactSharingDisabled(
          reference, admin.reference, disabled ? 1 : 0);

  static final _getBluetoothContactSharingDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getBluetoothContactSharingDisabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getBluetoothContactSharingDisabled(android.content.ComponentName admin)
  bool getBluetoothContactSharingDisabled(content.ComponentName admin) =>
      _getBluetoothContactSharingDisabled(reference, admin.reference) != 0;

  static final _addCrossProfileIntentFilter = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_addCrossProfileIntentFilter")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void addCrossProfileIntentFilter(android.content.ComponentName admin, android.content.IntentFilter filter, int flags)
  void addCrossProfileIntentFilter(content.ComponentName admin,
          content.IntentFilter filter, int flags) =>
      _addCrossProfileIntentFilter(
          reference, admin.reference, filter.reference, flags);

  static final _clearCrossProfileIntentFilters = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearCrossProfileIntentFilters")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void clearCrossProfileIntentFilters(android.content.ComponentName admin)
  void clearCrossProfileIntentFilters(content.ComponentName admin) =>
      _clearCrossProfileIntentFilters(reference, admin.reference);

  static final _setPermittedAccessibilityServices = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setPermittedAccessibilityServices")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setPermittedAccessibilityServices(android.content.ComponentName admin, java.util.List<java.lang.String> packageNames)
  bool setPermittedAccessibilityServices(
          content.ComponentName admin, jni.JlObject packageNames) =>
      _setPermittedAccessibilityServices(
          reference, admin.reference, packageNames.reference) !=
      0;

  static final _getPermittedAccessibilityServices = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPermittedAccessibilityServices")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getPermittedAccessibilityServices(android.content.ComponentName admin)
  jni.JlObject getPermittedAccessibilityServices(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getPermittedAccessibilityServices(reference, admin.reference));

  static final _setPermittedInputMethods = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setPermittedInputMethods")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setPermittedInputMethods(android.content.ComponentName admin, java.util.List<java.lang.String> packageNames)
  bool setPermittedInputMethods(
          content.ComponentName admin, jni.JlObject packageNames) =>
      _setPermittedInputMethods(
          reference, admin.reference, packageNames.reference) !=
      0;

  static final _getPermittedInputMethods = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPermittedInputMethods")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getPermittedInputMethods(android.content.ComponentName admin)
  jni.JlObject getPermittedInputMethods(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getPermittedInputMethods(reference, admin.reference));

  static final _setPermittedCrossProfileNotificationListeners = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setPermittedCrossProfileNotificationListeners")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName admin, java.util.List<java.lang.String> packageList)
  bool setPermittedCrossProfileNotificationListeners(
          content.ComponentName admin, jni.JlObject packageList) =>
      _setPermittedCrossProfileNotificationListeners(
          reference, admin.reference, packageList.reference) !=
      0;

  static final _getPermittedCrossProfileNotificationListeners = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPermittedCrossProfileNotificationListeners")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getPermittedCrossProfileNotificationListeners(android.content.ComponentName admin)
  jni.JlObject getPermittedCrossProfileNotificationListeners(
          content.ComponentName admin) =>
      jni.JlObject.fromRef(_getPermittedCrossProfileNotificationListeners(
          reference, admin.reference));

  static final _getKeepUninstalledPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getKeepUninstalledPackages")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getKeepUninstalledPackages(android.content.ComponentName admin)
  jni.JlObject getKeepUninstalledPackages(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getKeepUninstalledPackages(reference, admin.reference));

  static final _setKeepUninstalledPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setKeepUninstalledPackages")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setKeepUninstalledPackages(android.content.ComponentName admin, java.util.List<java.lang.String> packageNames)
  void setKeepUninstalledPackages(
          content.ComponentName admin, jni.JlObject packageNames) =>
      _setKeepUninstalledPackages(
          reference, admin.reference, packageNames.reference);

  static final _createAndManageUser = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_createAndManageUser")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public android.os.UserHandle createAndManageUser(android.content.ComponentName admin, java.lang.String name, android.content.ComponentName profileOwner, android.os.PersistableBundle adminExtras, int flags)
  os.UserHandle createAndManageUser(
          content.ComponentName admin,
          jni.JlString name,
          content.ComponentName profileOwner,
          os.PersistableBundle adminExtras,
          int flags) =>
      os.UserHandle.fromRef(_createAndManageUser(
          reference,
          admin.reference,
          name.reference,
          profileOwner.reference,
          adminExtras.reference,
          flags));

  static final _removeUser = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_removeUser")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean removeUser(android.content.ComponentName admin, android.os.UserHandle userHandle)
  bool removeUser(content.ComponentName admin, os.UserHandle userHandle) =>
      _removeUser(reference, admin.reference, userHandle.reference) != 0;

  static final _switchUser = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_switchUser")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean switchUser(android.content.ComponentName admin, android.os.UserHandle userHandle)
  bool switchUser(content.ComponentName admin, os.UserHandle userHandle) =>
      _switchUser(reference, admin.reference, userHandle.reference) != 0;

  static final _startUserInBackground = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_startUserInBackground")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int startUserInBackground(android.content.ComponentName admin, android.os.UserHandle userHandle)
  int startUserInBackground(
          content.ComponentName admin, os.UserHandle userHandle) =>
      _startUserInBackground(reference, admin.reference, userHandle.reference);

  static final _stopUser = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_stopUser")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int stopUser(android.content.ComponentName admin, android.os.UserHandle userHandle)
  int stopUser(content.ComponentName admin, os.UserHandle userHandle) =>
      _stopUser(reference, admin.reference, userHandle.reference);

  static final _logoutUser = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_logoutUser")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int logoutUser(android.content.ComponentName admin)
  int logoutUser(content.ComponentName admin) =>
      _logoutUser(reference, admin.reference);

  static final _getSecondaryUsers = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getSecondaryUsers")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.os.UserHandle> getSecondaryUsers(android.content.ComponentName admin)
  jni.JlObject getSecondaryUsers(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getSecondaryUsers(reference, admin.reference));

  static final _isEphemeralUser = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isEphemeralUser")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEphemeralUser(android.content.ComponentName admin)
  bool isEphemeralUser(content.ComponentName admin) =>
      _isEphemeralUser(reference, admin.reference) != 0;

  static final _getApplicationRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getApplicationRestrictions")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getApplicationRestrictions(android.content.ComponentName admin, java.lang.String packageName)
  os.Bundle getApplicationRestrictions(
          content.ComponentName admin, jni.JlString packageName) =>
      os.Bundle.fromRef(_getApplicationRestrictions(
          reference, admin.reference, packageName.reference));

  static final _addUserRestriction = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_addUserRestriction")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addUserRestriction(android.content.ComponentName admin, java.lang.String key)
  void addUserRestriction(content.ComponentName admin, jni.JlString key) =>
      _addUserRestriction(reference, admin.reference, key.reference);

  static final _clearUserRestriction = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearUserRestriction")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void clearUserRestriction(android.content.ComponentName admin, java.lang.String key)
  void clearUserRestriction(content.ComponentName admin, jni.JlString key) =>
      _clearUserRestriction(reference, admin.reference, key.reference);

  static final _getUserRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getUserRestrictions")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getUserRestrictions(android.content.ComponentName admin)
  os.Bundle getUserRestrictions(content.ComponentName admin) =>
      os.Bundle.fromRef(_getUserRestrictions(reference, admin.reference));

  static final _createAdminSupportIntent = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_createAdminSupportIntent")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent createAdminSupportIntent(java.lang.String restriction)
  content.Intent createAdminSupportIntent(jni.JlString restriction) =>
      content.Intent.fromRef(
          _createAdminSupportIntent(reference, restriction.reference));

  static final _setApplicationHidden = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setApplicationHidden")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setApplicationHidden(android.content.ComponentName admin, java.lang.String packageName, boolean hidden)
  bool setApplicationHidden(
          content.ComponentName admin, jni.JlString packageName, bool hidden) =>
      _setApplicationHidden(
          reference, admin.reference, packageName.reference, hidden ? 1 : 0) !=
      0;

  static final _isApplicationHidden = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isApplicationHidden")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isApplicationHidden(android.content.ComponentName admin, java.lang.String packageName)
  bool isApplicationHidden(
          content.ComponentName admin, jni.JlString packageName) =>
      _isApplicationHidden(reference, admin.reference, packageName.reference) !=
      0;

  static final _enableSystemApp = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_enableSystemApp")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void enableSystemApp(android.content.ComponentName admin, java.lang.String packageName)
  void enableSystemApp(content.ComponentName admin, jni.JlString packageName) =>
      _enableSystemApp(reference, admin.reference, packageName.reference);

  static final _enableSystemApp_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_enableSystemApp_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int enableSystemApp(android.content.ComponentName admin, android.content.Intent intent)
  int enableSystemApp_1(content.ComponentName admin, content.Intent intent) =>
      _enableSystemApp_1(reference, admin.reference, intent.reference);

  static final _installExistingPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_installExistingPackage")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean installExistingPackage(android.content.ComponentName admin, java.lang.String packageName)
  bool installExistingPackage(
          content.ComponentName admin, jni.JlString packageName) =>
      _installExistingPackage(
          reference, admin.reference, packageName.reference) !=
      0;

  static final _setAccountManagementDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setAccountManagementDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setAccountManagementDisabled(android.content.ComponentName admin, java.lang.String accountType, boolean disabled)
  void setAccountManagementDisabled(content.ComponentName admin,
          jni.JlString accountType, bool disabled) =>
      _setAccountManagementDisabled(
          reference, admin.reference, accountType.reference, disabled ? 1 : 0);

  static final _getAccountTypesWithManagementDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getAccountTypesWithManagementDisabled")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getAccountTypesWithManagementDisabled()
  jni.JlObject getAccountTypesWithManagementDisabled() =>
      jni.JlObject.fromRef(_getAccountTypesWithManagementDisabled(reference));

  static final _setLockTaskPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setLockTaskPackages")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLockTaskPackages(android.content.ComponentName admin, java.lang.String[] packages)
  void setLockTaskPackages(
          content.ComponentName admin, jni.JlObject packages) =>
      _setLockTaskPackages(reference, admin.reference, packages.reference);

  static final _getLockTaskPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getLockTaskPackages")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getLockTaskPackages(android.content.ComponentName admin)
  jni.JlObject getLockTaskPackages(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getLockTaskPackages(reference, admin.reference));

  static final _isLockTaskPermitted = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isLockTaskPermitted")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLockTaskPermitted(java.lang.String pkg)
  bool isLockTaskPermitted(jni.JlString pkg) =>
      _isLockTaskPermitted(reference, pkg.reference) != 0;

  static final _setLockTaskFeatures = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setLockTaskFeatures")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setLockTaskFeatures(android.content.ComponentName admin, int flags)
  void setLockTaskFeatures(content.ComponentName admin, int flags) =>
      _setLockTaskFeatures(reference, admin.reference, flags);

  static final _getLockTaskFeatures = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getLockTaskFeatures")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getLockTaskFeatures(android.content.ComponentName admin)
  int getLockTaskFeatures(content.ComponentName admin) =>
      _getLockTaskFeatures(reference, admin.reference);

  static final _setGlobalSetting = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setGlobalSetting")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setGlobalSetting(android.content.ComponentName admin, java.lang.String setting, java.lang.String value)
  void setGlobalSetting(content.ComponentName admin, jni.JlString setting,
          jni.JlString value) =>
      _setGlobalSetting(
          reference, admin.reference, setting.reference, value.reference);

  static final _setSystemSetting = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setSystemSetting")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSystemSetting(android.content.ComponentName admin, java.lang.String setting, java.lang.String value)
  void setSystemSetting(content.ComponentName admin, jni.JlString setting,
          jni.JlString value) =>
      _setSystemSetting(
          reference, admin.reference, setting.reference, value.reference);

  static final _setTime = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_app_admin_DevicePolicyManager_setTime")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setTime(android.content.ComponentName admin, long millis)
  bool setTime(content.ComponentName admin, int millis) =>
      _setTime(reference, admin.reference, millis) != 0;

  static final _setTimeZone = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setTimeZone")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setTimeZone(android.content.ComponentName admin, java.lang.String timeZone)
  bool setTimeZone(content.ComponentName admin, jni.JlString timeZone) =>
      _setTimeZone(reference, admin.reference, timeZone.reference) != 0;

  static final _setSecureSetting = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setSecureSetting")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setSecureSetting(android.content.ComponentName admin, java.lang.String setting, java.lang.String value)
  void setSecureSetting(content.ComponentName admin, jni.JlString setting,
          jni.JlString value) =>
      _setSecureSetting(
          reference, admin.reference, setting.reference, value.reference);

  static final _setRestrictionsProvider = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setRestrictionsProvider")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setRestrictionsProvider(android.content.ComponentName admin, android.content.ComponentName provider)
  void setRestrictionsProvider(
          content.ComponentName admin, content.ComponentName provider) =>
      _setRestrictionsProvider(reference, admin.reference, provider.reference);

  static final _setMasterVolumeMuted = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setMasterVolumeMuted")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setMasterVolumeMuted(android.content.ComponentName admin, boolean on)
  void setMasterVolumeMuted(content.ComponentName admin, bool on_) =>
      _setMasterVolumeMuted(reference, admin.reference, on_ ? 1 : 0);

  static final _isMasterVolumeMuted = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isMasterVolumeMuted")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isMasterVolumeMuted(android.content.ComponentName admin)
  bool isMasterVolumeMuted(content.ComponentName admin) =>
      _isMasterVolumeMuted(reference, admin.reference) != 0;

  static final _setUninstallBlocked = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setUninstallBlocked")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setUninstallBlocked(android.content.ComponentName admin, java.lang.String packageName, boolean uninstallBlocked)
  void setUninstallBlocked(content.ComponentName admin,
          jni.JlString packageName, bool uninstallBlocked) =>
      _setUninstallBlocked(reference, admin.reference, packageName.reference,
          uninstallBlocked ? 1 : 0);

  static final _isUninstallBlocked = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isUninstallBlocked")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUninstallBlocked(android.content.ComponentName admin, java.lang.String packageName)
  bool isUninstallBlocked(
          content.ComponentName admin, jni.JlString packageName) =>
      _isUninstallBlocked(reference, admin.reference, packageName.reference) !=
      0;

  static final _addCrossProfileWidgetProvider = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_addCrossProfileWidgetProvider")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean addCrossProfileWidgetProvider(android.content.ComponentName admin, java.lang.String packageName)
  bool addCrossProfileWidgetProvider(
          content.ComponentName admin, jni.JlString packageName) =>
      _addCrossProfileWidgetProvider(
          reference, admin.reference, packageName.reference) !=
      0;

  static final _removeCrossProfileWidgetProvider = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_removeCrossProfileWidgetProvider")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean removeCrossProfileWidgetProvider(android.content.ComponentName admin, java.lang.String packageName)
  bool removeCrossProfileWidgetProvider(
          content.ComponentName admin, jni.JlString packageName) =>
      _removeCrossProfileWidgetProvider(
          reference, admin.reference, packageName.reference) !=
      0;

  static final _getCrossProfileWidgetProviders = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getCrossProfileWidgetProviders")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getCrossProfileWidgetProviders(android.content.ComponentName admin)
  jni.JlObject getCrossProfileWidgetProviders(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getCrossProfileWidgetProviders(reference, admin.reference));

  static final _setUserIcon = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setUserIcon")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setUserIcon(android.content.ComponentName admin, android.graphics.Bitmap icon)
  void setUserIcon(content.ComponentName admin, jni.JlObject icon) =>
      _setUserIcon(reference, admin.reference, icon.reference);

  static final _setSystemUpdatePolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setSystemUpdatePolicy")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSystemUpdatePolicy(android.content.ComponentName admin, android.app.admin.SystemUpdatePolicy policy)
  void setSystemUpdatePolicy(
          content.ComponentName admin, SystemUpdatePolicy policy) =>
      _setSystemUpdatePolicy(reference, admin.reference, policy.reference);

  static final _getSystemUpdatePolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getSystemUpdatePolicy")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()
  SystemUpdatePolicy getSystemUpdatePolicy() =>
      SystemUpdatePolicy.fromRef(_getSystemUpdatePolicy(reference));

  static final _setKeyguardDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setKeyguardDisabled")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setKeyguardDisabled(android.content.ComponentName admin, boolean disabled)
  bool setKeyguardDisabled(content.ComponentName admin, bool disabled) =>
      _setKeyguardDisabled(reference, admin.reference, disabled ? 1 : 0) != 0;

  static final _setStatusBarDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setStatusBarDisabled")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setStatusBarDisabled(android.content.ComponentName admin, boolean disabled)
  bool setStatusBarDisabled(content.ComponentName admin, bool disabled) =>
      _setStatusBarDisabled(reference, admin.reference, disabled ? 1 : 0) != 0;

  static final _getPendingSystemUpdate = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPendingSystemUpdate")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName admin)
  SystemUpdateInfo getPendingSystemUpdate(content.ComponentName admin) =>
      SystemUpdateInfo.fromRef(
          _getPendingSystemUpdate(reference, admin.reference));

  static final _setPermissionPolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPermissionPolicy")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setPermissionPolicy(android.content.ComponentName admin, int policy)
  void setPermissionPolicy(content.ComponentName admin, int policy) =>
      _setPermissionPolicy(reference, admin.reference, policy);

  static final _getPermissionPolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPermissionPolicy")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPermissionPolicy(android.content.ComponentName admin)
  int getPermissionPolicy(content.ComponentName admin) =>
      _getPermissionPolicy(reference, admin.reference);

  static final _setPermissionGrantState = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setPermissionGrantState")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setPermissionGrantState(android.content.ComponentName admin, java.lang.String packageName, java.lang.String permission, int grantState)
  bool setPermissionGrantState(content.ComponentName admin,
          jni.JlString packageName, jni.JlString permission, int grantState) =>
      _setPermissionGrantState(reference, admin.reference,
          packageName.reference, permission.reference, grantState) !=
      0;

  static final _getPermissionGrantState = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getPermissionGrantState")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getPermissionGrantState(android.content.ComponentName admin, java.lang.String packageName, java.lang.String permission)
  int getPermissionGrantState(content.ComponentName admin,
          jni.JlString packageName, jni.JlString permission) =>
      _getPermissionGrantState(reference, admin.reference,
          packageName.reference, permission.reference);

  static final _isProvisioningAllowed = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isProvisioningAllowed")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isProvisioningAllowed(java.lang.String action)
  bool isProvisioningAllowed(jni.JlString action) =>
      _isProvisioningAllowed(reference, action.reference) != 0;

  static final _isManagedProfile = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isManagedProfile")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isManagedProfile(android.content.ComponentName admin)
  bool isManagedProfile(content.ComponentName admin) =>
      _isManagedProfile(reference, admin.reference) != 0;

  static final _getWifiMacAddress = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getWifiMacAddress")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getWifiMacAddress(android.content.ComponentName admin)
  jni.JlString getWifiMacAddress(content.ComponentName admin) =>
      jni.JlString.fromRef(_getWifiMacAddress(reference, admin.reference));

  static final _reboot = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_reboot")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void reboot(android.content.ComponentName admin)
  void reboot(content.ComponentName admin) =>
      _reboot(reference, admin.reference);

  static final _setShortSupportMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setShortSupportMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setShortSupportMessage(android.content.ComponentName admin, java.lang.CharSequence message)
  void setShortSupportMessage(
          content.ComponentName admin, jni.JlObject message) =>
      _setShortSupportMessage(reference, admin.reference, message.reference);

  static final _getShortSupportMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getShortSupportMessage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getShortSupportMessage(android.content.ComponentName admin)
  jni.JlObject getShortSupportMessage(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getShortSupportMessage(reference, admin.reference));

  static final _setLongSupportMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setLongSupportMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLongSupportMessage(android.content.ComponentName admin, java.lang.CharSequence message)
  void setLongSupportMessage(
          content.ComponentName admin, jni.JlObject message) =>
      _setLongSupportMessage(reference, admin.reference, message.reference);

  static final _getLongSupportMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getLongSupportMessage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getLongSupportMessage(android.content.ComponentName admin)
  jni.JlObject getLongSupportMessage(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getLongSupportMessage(reference, admin.reference));

  static final _getParentProfileInstance = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getParentProfileInstance")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName admin)
  DevicePolicyManager getParentProfileInstance(content.ComponentName admin) =>
      DevicePolicyManager.fromRef(
          _getParentProfileInstance(reference, admin.reference));

  static final _setSecurityLoggingEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setSecurityLoggingEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setSecurityLoggingEnabled(android.content.ComponentName admin, boolean enabled)
  void setSecurityLoggingEnabled(content.ComponentName admin, bool enabled) =>
      _setSecurityLoggingEnabled(reference, admin.reference, enabled ? 1 : 0);

  static final _isSecurityLoggingEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isSecurityLoggingEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSecurityLoggingEnabled(android.content.ComponentName admin)
  bool isSecurityLoggingEnabled(content.ComponentName admin) =>
      _isSecurityLoggingEnabled(reference, admin.reference) != 0;

  static final _retrieveSecurityLogs = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_retrieveSecurityLogs")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.app.admin.SecurityLog.SecurityEvent> retrieveSecurityLogs(android.content.ComponentName admin)
  jni.JlObject retrieveSecurityLogs(content.ComponentName admin) =>
      jni.JlObject.fromRef(_retrieveSecurityLogs(reference, admin.reference));

  static final _setMeteredDataDisabledPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setMeteredDataDisabledPackages")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> setMeteredDataDisabledPackages(android.content.ComponentName admin, java.util.List<java.lang.String> packageNames)
  jni.JlObject setMeteredDataDisabledPackages(
          content.ComponentName admin, jni.JlObject packageNames) =>
      jni.JlObject.fromRef(_setMeteredDataDisabledPackages(
          reference, admin.reference, packageNames.reference));

  static final _getMeteredDataDisabledPackages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getMeteredDataDisabledPackages")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<java.lang.String> getMeteredDataDisabledPackages(android.content.ComponentName admin)
  jni.JlObject getMeteredDataDisabledPackages(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getMeteredDataDisabledPackages(reference, admin.reference));

  static final _retrievePreRebootSecurityLogs = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_retrievePreRebootSecurityLogs")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.app.admin.SecurityLog.SecurityEvent> retrievePreRebootSecurityLogs(android.content.ComponentName admin)
  jni.JlObject retrievePreRebootSecurityLogs(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _retrievePreRebootSecurityLogs(reference, admin.reference));

  static final _setOrganizationColor = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_setOrganizationColor")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setOrganizationColor(android.content.ComponentName admin, int color)
  void setOrganizationColor(content.ComponentName admin, int color) =>
      _setOrganizationColor(reference, admin.reference, color);

  static final _getOrganizationColor = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getOrganizationColor")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getOrganizationColor(android.content.ComponentName admin)
  int getOrganizationColor(content.ComponentName admin) =>
      _getOrganizationColor(reference, admin.reference);

  static final _setOrganizationName = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setOrganizationName")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setOrganizationName(android.content.ComponentName admin, java.lang.CharSequence title)
  void setOrganizationName(content.ComponentName admin, jni.JlObject title) =>
      _setOrganizationName(reference, admin.reference, title.reference);

  static final _getOrganizationName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getOrganizationName")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getOrganizationName(android.content.ComponentName admin)
  jni.JlObject getOrganizationName(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getOrganizationName(reference, admin.reference));

  static final _setAffiliationIds = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setAffiliationIds")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setAffiliationIds(android.content.ComponentName admin, java.util.Set<java.lang.String> ids)
  void setAffiliationIds(content.ComponentName admin, jni.JlObject ids) =>
      _setAffiliationIds(reference, admin.reference, ids.reference);

  static final _getAffiliationIds = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getAffiliationIds")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<java.lang.String> getAffiliationIds(android.content.ComponentName admin)
  jni.JlObject getAffiliationIds(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getAffiliationIds(reference, admin.reference));

  static final _isAffiliatedUser =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DevicePolicyManager_isAffiliatedUser")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAffiliatedUser()
  bool isAffiliatedUser() => _isAffiliatedUser(reference) != 0;

  static final _setBackupServiceEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setBackupServiceEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setBackupServiceEnabled(android.content.ComponentName admin, boolean enabled)
  void setBackupServiceEnabled(content.ComponentName admin, bool enabled) =>
      _setBackupServiceEnabled(reference, admin.reference, enabled ? 1 : 0);

  static final _isBackupServiceEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isBackupServiceEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isBackupServiceEnabled(android.content.ComponentName admin)
  bool isBackupServiceEnabled(content.ComponentName admin) =>
      _isBackupServiceEnabled(reference, admin.reference) != 0;

  static final _setNetworkLoggingEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setNetworkLoggingEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setNetworkLoggingEnabled(android.content.ComponentName admin, boolean enabled)
  void setNetworkLoggingEnabled(content.ComponentName admin, bool enabled) =>
      _setNetworkLoggingEnabled(reference, admin.reference, enabled ? 1 : 0);

  static final _isNetworkLoggingEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isNetworkLoggingEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isNetworkLoggingEnabled(android.content.ComponentName admin)
  bool isNetworkLoggingEnabled(content.ComponentName admin) =>
      _isNetworkLoggingEnabled(reference, admin.reference) != 0;

  static final _retrieveNetworkLogs = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_app_admin_DevicePolicyManager_retrieveNetworkLogs")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.List<android.app.admin.NetworkEvent> retrieveNetworkLogs(android.content.ComponentName admin, long batchToken)
  jni.JlObject retrieveNetworkLogs(
          content.ComponentName admin, int batchToken) =>
      jni.JlObject.fromRef(
          _retrieveNetworkLogs(reference, admin.reference, batchToken));

  static final _bindDeviceAdminServiceAsUser = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_bindDeviceAdminServiceAsUser")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindDeviceAdminServiceAsUser(android.content.ComponentName admin, android.content.Intent serviceIntent, android.content.ServiceConnection conn, int flags, android.os.UserHandle targetUser)
  bool bindDeviceAdminServiceAsUser(
          content.ComponentName admin,
          content.Intent serviceIntent,
          content.ServiceConnection conn,
          int flags,
          os.UserHandle targetUser) =>
      _bindDeviceAdminServiceAsUser(
          reference,
          admin.reference,
          serviceIntent.reference,
          conn.reference,
          flags,
          targetUser.reference) !=
      0;

  static final _getBindDeviceAdminTargetUsers = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getBindDeviceAdminTargetUsers")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.os.UserHandle> getBindDeviceAdminTargetUsers(android.content.ComponentName admin)
  jni.JlObject getBindDeviceAdminTargetUsers(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getBindDeviceAdminTargetUsers(reference, admin.reference));

  static final _clearApplicationUserData = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_clearApplicationUserData")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void clearApplicationUserData(android.content.ComponentName admin, java.lang.String packageName, java.util.concurrent.Executor executor, android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener listener)
  void clearApplicationUserData(
          content.ComponentName admin,
          jni.JlString packageName,
          jni.JlObject executor,
          DevicePolicyManager_OnClearApplicationUserDataListener listener) =>
      _clearApplicationUserData(reference, admin.reference,
          packageName.reference, executor.reference, listener.reference);

  static final _setLogoutEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setLogoutEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setLogoutEnabled(android.content.ComponentName admin, boolean enabled)
  void setLogoutEnabled(content.ComponentName admin, bool enabled) =>
      _setLogoutEnabled(reference, admin.reference, enabled ? 1 : 0);

  static final _isLogoutEnabled =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DevicePolicyManager_isLogoutEnabled")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLogoutEnabled()
  bool isLogoutEnabled() => _isLogoutEnabled(reference) != 0;

  static final _transferOwnership = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_transferOwnership")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void transferOwnership(android.content.ComponentName admin, android.content.ComponentName target, android.os.PersistableBundle bundle)
  void transferOwnership(content.ComponentName admin,
          content.ComponentName target, os.PersistableBundle bundle) =>
      _transferOwnership(
          reference, admin.reference, target.reference, bundle.reference);

  static final _setStartUserSessionMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setStartUserSessionMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setStartUserSessionMessage(android.content.ComponentName admin, java.lang.CharSequence startUserSessionMessage)
  void setStartUserSessionMessage(
          content.ComponentName admin, jni.JlObject startUserSessionMessage) =>
      _setStartUserSessionMessage(
          reference, admin.reference, startUserSessionMessage.reference);

  static final _setEndUserSessionMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_setEndUserSessionMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setEndUserSessionMessage(android.content.ComponentName admin, java.lang.CharSequence endUserSessionMessage)
  void setEndUserSessionMessage(
          content.ComponentName admin, jni.JlObject endUserSessionMessage) =>
      _setEndUserSessionMessage(
          reference, admin.reference, endUserSessionMessage.reference);

  static final _getStartUserSessionMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getStartUserSessionMessage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName admin)
  jni.JlObject getStartUserSessionMessage(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getStartUserSessionMessage(reference, admin.reference));

  static final _getEndUserSessionMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getEndUserSessionMessage")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName admin)
  jni.JlObject getEndUserSessionMessage(content.ComponentName admin) =>
      jni.JlObject.fromRef(
          _getEndUserSessionMessage(reference, admin.reference));

  static final _addOverrideApn = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_addOverrideApn")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int addOverrideApn(android.content.ComponentName admin, android.telephony.data.ApnSetting apnSetting)
  int addOverrideApn(content.ComponentName admin, jni.JlObject apnSetting) =>
      _addOverrideApn(reference, admin.reference, apnSetting.reference);

  static final _updateOverrideApn = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_updateOverrideApn")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean updateOverrideApn(android.content.ComponentName admin, int apnId, android.telephony.data.ApnSetting apnSetting)
  bool updateOverrideApn(
          content.ComponentName admin, int apnId, jni.JlObject apnSetting) =>
      _updateOverrideApn(
          reference, admin.reference, apnId, apnSetting.reference) !=
      0;

  static final _removeOverrideApn = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DevicePolicyManager_removeOverrideApn")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean removeOverrideApn(android.content.ComponentName admin, int apnId)
  bool removeOverrideApn(content.ComponentName admin, int apnId) =>
      _removeOverrideApn(reference, admin.reference, apnId) != 0;

  static final _getOverrideApns = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getOverrideApns")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.telephony.data.ApnSetting> getOverrideApns(android.content.ComponentName admin)
  jni.JlObject getOverrideApns(content.ComponentName admin) =>
      jni.JlObject.fromRef(_getOverrideApns(reference, admin.reference));

  static final _setOverrideApnsEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager_setOverrideApnsEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setOverrideApnsEnabled(android.content.ComponentName admin, boolean enabled)
  void setOverrideApnsEnabled(content.ComponentName admin, bool enabled) =>
      _setOverrideApnsEnabled(reference, admin.reference, enabled ? 1 : 0);

  static final _isOverrideApnEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_isOverrideApnEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOverrideApnEnabled(android.content.ComponentName admin)
  bool isOverrideApnEnabled(content.ComponentName admin) =>
      _isOverrideApnEnabled(reference, admin.reference) != 0;

  static final _getTransferOwnershipBundle = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DevicePolicyManager_getTransferOwnershipBundle")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PersistableBundle getTransferOwnershipBundle()
  os.PersistableBundle getTransferOwnershipBundle() =>
      os.PersistableBundle.fromRef(_getTransferOwnershipBundle(reference));
}

class DevicePolicyManager_OnClearApplicationUserDataListener
    extends jni.JlObject {
  DevicePolicyManager_OnClearApplicationUserDataListener.fromRef(
      ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onApplicationUserDataCleared = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_app_admin_DevicePolicyManager__OnClearApplicationUserDataListener_onApplicationUserDataCleared")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void onApplicationUserDataCleared(java.lang.String packageName, boolean succeeded)
  void onApplicationUserDataCleared(jni.JlString packageName, bool succeeded) =>
      _onApplicationUserDataCleared(
          reference, packageName.reference, succeeded ? 1 : 0);
}

class SystemUpdateInfo extends jni.JlObject {
  SystemUpdateInfo.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.SystemUpdateInfo> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_SystemUpdateInfo_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int SECURITY_PATCH_STATE_FALSE
  static const SECURITY_PATCH_STATE_FALSE = 1;

  /// from: static public final int SECURITY_PATCH_STATE_TRUE
  static const SECURITY_PATCH_STATE_TRUE = 2;

  /// from: static public final int SECURITY_PATCH_STATE_UNKNOWN
  static const SECURITY_PATCH_STATE_UNKNOWN = 0;

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdateInfo_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Parcel in)
  SystemUpdateInfo(os.Parcel in_) : super.fromRef(_ctor(in_.reference));

  static final _getReceivedTime =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdateInfo_getReceivedTime")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getReceivedTime()
  int getReceivedTime() => _getReceivedTime(reference);

  static final _getSecurityPatchState =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdateInfo_getSecurityPatchState")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getSecurityPatchState()
  int getSecurityPatchState() => _getSecurityPatchState(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdateInfo_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_SystemUpdateInfo_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os.Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdateInfo_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _equals_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdateInfo_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object o)
  bool equals_1(jni.JlObject o) => _equals_1(reference, o.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdateInfo_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);
}

class ConnectEvent extends NetworkEvent {
  ConnectEvent.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.ConnectEvent> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_ConnectEvent_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_app_admin_ConnectEvent_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Parcel in)
  ConnectEvent(os.Parcel in_) : super.fromRef(_ctor(in_.reference));

  static final _getInetAddress = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_ConnectEvent_getInetAddress")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.InetAddress getInetAddress()
  jni.JlObject getInetAddress() =>
      jni.JlObject.fromRef(_getInetAddress(reference));

  static final _getPort =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_ConnectEvent_getPort")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getPort()
  int getPort() => _getPort(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_ConnectEvent_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_ConnectEvent_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_admin_ConnectEvent_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(os.Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class SystemUpdatePolicy extends jni.JlObject {
  SystemUpdatePolicy.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.SystemUpdatePolicy> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_SystemUpdatePolicy_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int TYPE_INSTALL_AUTOMATIC
  static const TYPE_INSTALL_AUTOMATIC = 1;

  /// from: static public final int TYPE_INSTALL_WINDOWED
  static const TYPE_INSTALL_WINDOWED = 2;

  /// from: static public final int TYPE_POSTPONE
  static const TYPE_POSTPONE = 3;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_SystemUpdatePolicy_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  SystemUpdatePolicy() : super.fromRef(_ctor());

  static final _createAutomaticInstallPolicy = jlookup<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          "android_app_admin_SystemUpdatePolicy_createAutomaticInstallPolicy")
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy()
  static SystemUpdatePolicy createAutomaticInstallPolicy() =>
      SystemUpdatePolicy.fromRef(_createAutomaticInstallPolicy());

  static final _createWindowedInstallPolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Int32, ffi.Int32)>>(
          "android_app_admin_SystemUpdatePolicy_createWindowedInstallPolicy")
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// from: static public android.app.admin.SystemUpdatePolicy createWindowedInstallPolicy(int startTime, int endTime)
  static SystemUpdatePolicy createWindowedInstallPolicy(
          int startTime, int endTime) =>
      SystemUpdatePolicy.fromRef(
          _createWindowedInstallPolicy(startTime, endTime));

  static final _createPostponeInstallPolicy = jlookup<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          "android_app_admin_SystemUpdatePolicy_createPostponeInstallPolicy")
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.app.admin.SystemUpdatePolicy createPostponeInstallPolicy()
  static SystemUpdatePolicy createPostponeInstallPolicy() =>
      SystemUpdatePolicy.fromRef(_createPostponeInstallPolicy());

  static final _getPolicyType =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdatePolicy_getPolicyType")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getPolicyType()
  int getPolicyType() => _getPolicyType(reference);

  static final _getInstallWindowStart =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdatePolicy_getInstallWindowStart")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getInstallWindowStart()
  int getInstallWindowStart() => _getInstallWindowStart(reference);

  static final _getInstallWindowEnd =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdatePolicy_getInstallWindowEnd")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getInstallWindowEnd()
  int getInstallWindowEnd() => _getInstallWindowEnd(reference);

  static final _setFreezePeriods = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy_setFreezePeriods")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.admin.SystemUpdatePolicy setFreezePeriods(java.util.List<android.app.admin.FreezePeriod> freezePeriods)
  SystemUpdatePolicy setFreezePeriods(jni.JlObject freezePeriods) =>
      SystemUpdatePolicy.fromRef(
          _setFreezePeriods(reference, freezePeriods.reference));

  static final _getFreezePeriods = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy_getFreezePeriods")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.app.admin.FreezePeriod> getFreezePeriods()
  jni.JlObject getFreezePeriods() =>
      jni.JlObject.fromRef(_getFreezePeriods(reference));

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SystemUpdatePolicy_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_SystemUpdatePolicy_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os.Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class SystemUpdatePolicy_ValidationFailedException extends jni.JlObject {
  SystemUpdatePolicy_ValidationFailedException.fromRef(
      ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.SystemUpdatePolicy.ValidationFailedException> CREATOR
  static final _getCREATOR = jlookup<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          "get_android_app_admin_SystemUpdatePolicy__ValidationFailedException_CREATOR")
      .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE
  static const ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE = 6;

  /// from: static public final int ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG
  static const ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG = 5;

  /// from: static public final int ERROR_DUPLICATE_OR_OVERLAP
  static const ERROR_DUPLICATE_OR_OVERLAP = 2;

  /// from: static public final int ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE
  static const ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE = 4;

  /// from: static public final int ERROR_NEW_FREEZE_PERIOD_TOO_LONG
  static const ERROR_NEW_FREEZE_PERIOD_TOO_LONG = 3;

  /// from: static public final int ERROR_UNKNOWN
  static const ERROR_UNKNOWN = 1;

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy__ValidationFailedException_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(int errorCode, java.lang.String message)
  SystemUpdatePolicy_ValidationFailedException(
      int errorCode, jni.JlString message)
      : super.fromRef(_ctor(errorCode, message.reference));

  static final _getErrorCode = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy__ValidationFailedException_getErrorCode")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getErrorCode()
  int getErrorCode() => _getErrorCode(reference);

  static final _describeContents = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SystemUpdatePolicy__ValidationFailedException_describeContents")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_SystemUpdatePolicy__ValidationFailedException_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os.Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class DeviceAdminReceiver extends content.BroadcastReceiver {
  DeviceAdminReceiver.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_DEVICE_ADMIN_DISABLED
  static const ACTION_DEVICE_ADMIN_DISABLED =
      "android.app.action.DEVICE_ADMIN_DISABLED";

  /// from: static public final java.lang.String ACTION_DEVICE_ADMIN_DISABLE_REQUESTED
  static const ACTION_DEVICE_ADMIN_DISABLE_REQUESTED =
      "android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED";

  /// from: static public final java.lang.String ACTION_DEVICE_ADMIN_ENABLED
  static const ACTION_DEVICE_ADMIN_ENABLED =
      "android.app.action.DEVICE_ADMIN_ENABLED";

  /// from: static public final java.lang.String ACTION_LOCK_TASK_ENTERING
  static const ACTION_LOCK_TASK_ENTERING =
      "android.app.action.LOCK_TASK_ENTERING";

  /// from: static public final java.lang.String ACTION_LOCK_TASK_EXITING
  static const ACTION_LOCK_TASK_EXITING =
      "android.app.action.LOCK_TASK_EXITING";

  /// from: static public final java.lang.String ACTION_PASSWORD_CHANGED
  static const ACTION_PASSWORD_CHANGED =
      "android.app.action.ACTION_PASSWORD_CHANGED";

  /// from: static public final java.lang.String ACTION_PASSWORD_EXPIRING
  static const ACTION_PASSWORD_EXPIRING =
      "android.app.action.ACTION_PASSWORD_EXPIRING";

  /// from: static public final java.lang.String ACTION_PASSWORD_FAILED
  static const ACTION_PASSWORD_FAILED =
      "android.app.action.ACTION_PASSWORD_FAILED";

  /// from: static public final java.lang.String ACTION_PASSWORD_SUCCEEDED
  static const ACTION_PASSWORD_SUCCEEDED =
      "android.app.action.ACTION_PASSWORD_SUCCEEDED";

  /// from: static public final java.lang.String ACTION_PROFILE_PROVISIONING_COMPLETE
  static const ACTION_PROFILE_PROVISIONING_COMPLETE =
      "android.app.action.PROFILE_PROVISIONING_COMPLETE";

  /// from: static public final int BUGREPORT_FAILURE_FAILED_COMPLETING
  static const BUGREPORT_FAILURE_FAILED_COMPLETING = 0;

  /// from: static public final int BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE
  static const BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE = 1;

  /// from: static public final java.lang.String DEVICE_ADMIN_META_DATA
  static const DEVICE_ADMIN_META_DATA = "android.app.device_admin";

  /// from: static public final java.lang.String EXTRA_DISABLE_WARNING
  static const EXTRA_DISABLE_WARNING = "android.app.extra.DISABLE_WARNING";

  /// from: static public final java.lang.String EXTRA_LOCK_TASK_PACKAGE
  static const EXTRA_LOCK_TASK_PACKAGE = "android.app.extra.LOCK_TASK_PACKAGE";

  /// from: static public final java.lang.String EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE
  static const EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE =
      "android.app.extra.TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE";

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_DeviceAdminReceiver_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  DeviceAdminReceiver() : super.fromRef(_ctor());

  static final _getManager = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_getManager")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.admin.DevicePolicyManager getManager(android.content.Context context)
  DevicePolicyManager getManager(content.Context context) =>
      DevicePolicyManager.fromRef(_getManager(reference, context.reference));

  static final _getWho = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_getWho")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getWho(android.content.Context context)
  content.ComponentName getWho(content.Context context) =>
      content.ComponentName.fromRef(_getWho(reference, context.reference));

  static final _onEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onEnabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onEnabled(android.content.Context context, android.content.Intent intent)
  void onEnabled(content.Context context, content.Intent intent) =>
      _onEnabled(reference, context.reference, intent.reference);

  static final _onDisableRequested = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onDisableRequested")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence onDisableRequested(android.content.Context context, android.content.Intent intent)
  jni.JlObject onDisableRequested(
          content.Context context, content.Intent intent) =>
      jni.JlObject.fromRef(
          _onDisableRequested(reference, context.reference, intent.reference));

  static final _onDisabled = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onDisabled")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onDisabled(android.content.Context context, android.content.Intent intent)
  void onDisabled(content.Context context, content.Intent intent) =>
      _onDisabled(reference, context.reference, intent.reference);

  static final _onPasswordChanged = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordChanged")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordChanged(android.content.Context context, android.content.Intent intent)
  void onPasswordChanged(content.Context context, content.Intent intent) =>
      _onPasswordChanged(reference, context.reference, intent.reference);

  static final _onPasswordChanged_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordChanged_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordChanged(android.content.Context context, android.content.Intent intent, android.os.UserHandle user)
  void onPasswordChanged_1(
          content.Context context, content.Intent intent, os.UserHandle user) =>
      _onPasswordChanged_1(
          reference, context.reference, intent.reference, user.reference);

  static final _onPasswordFailed = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordFailed")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordFailed(android.content.Context context, android.content.Intent intent)
  void onPasswordFailed(content.Context context, content.Intent intent) =>
      _onPasswordFailed(reference, context.reference, intent.reference);

  static final _onPasswordFailed_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordFailed_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordFailed(android.content.Context context, android.content.Intent intent, android.os.UserHandle user)
  void onPasswordFailed_1(
          content.Context context, content.Intent intent, os.UserHandle user) =>
      _onPasswordFailed_1(
          reference, context.reference, intent.reference, user.reference);

  static final _onPasswordSucceeded = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordSucceeded")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordSucceeded(android.content.Context context, android.content.Intent intent)
  void onPasswordSucceeded(content.Context context, content.Intent intent) =>
      _onPasswordSucceeded(reference, context.reference, intent.reference);

  static final _onPasswordSucceeded_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordSucceeded_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordSucceeded(android.content.Context context, android.content.Intent intent, android.os.UserHandle user)
  void onPasswordSucceeded_1(
          content.Context context, content.Intent intent, os.UserHandle user) =>
      _onPasswordSucceeded_1(
          reference, context.reference, intent.reference, user.reference);

  static final _onPasswordExpiring = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordExpiring")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordExpiring(android.content.Context context, android.content.Intent intent)
  void onPasswordExpiring(content.Context context, content.Intent intent) =>
      _onPasswordExpiring(reference, context.reference, intent.reference);

  static final _onPasswordExpiring_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onPasswordExpiring_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPasswordExpiring(android.content.Context context, android.content.Intent intent, android.os.UserHandle user)
  void onPasswordExpiring_1(
          content.Context context, content.Intent intent, os.UserHandle user) =>
      _onPasswordExpiring_1(
          reference, context.reference, intent.reference, user.reference);

  static final _onProfileProvisioningComplete = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onProfileProvisioningComplete")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onProfileProvisioningComplete(android.content.Context context, android.content.Intent intent)
  void onProfileProvisioningComplete(
          content.Context context, content.Intent intent) =>
      _onProfileProvisioningComplete(
          reference, context.reference, intent.reference);

  static final _onReadyForUserInitialization = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onReadyForUserInitialization")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onReadyForUserInitialization(android.content.Context context, android.content.Intent intent)
  void onReadyForUserInitialization(
          content.Context context, content.Intent intent) =>
      _onReadyForUserInitialization(
          reference, context.reference, intent.reference);

  static final _onLockTaskModeEntering = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onLockTaskModeEntering")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onLockTaskModeEntering(android.content.Context context, android.content.Intent intent, java.lang.String pkg)
  void onLockTaskModeEntering(
          content.Context context, content.Intent intent, jni.JlString pkg) =>
      _onLockTaskModeEntering(
          reference, context.reference, intent.reference, pkg.reference);

  static final _onLockTaskModeExiting = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onLockTaskModeExiting")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onLockTaskModeExiting(android.content.Context context, android.content.Intent intent)
  void onLockTaskModeExiting(content.Context context, content.Intent intent) =>
      _onLockTaskModeExiting(reference, context.reference, intent.reference);

  static final _onChoosePrivateKeyAlias = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onChoosePrivateKeyAlias")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String onChoosePrivateKeyAlias(android.content.Context context, android.content.Intent intent, int uid, android.net.Uri uri, java.lang.String alias)
  jni.JlString onChoosePrivateKeyAlias(
          content.Context context,
          content.Intent intent,
          int uid,
          jni.JlObject uri,
          jni.JlString alias) =>
      jni.JlString.fromRef(_onChoosePrivateKeyAlias(
          reference,
          context.reference,
          intent.reference,
          uid,
          uri.reference,
          alias.reference));

  static final _onSystemUpdatePending = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int64)>>(
          "android_app_admin_DeviceAdminReceiver_onSystemUpdatePending")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onSystemUpdatePending(android.content.Context context, android.content.Intent intent, long receivedTime)
  void onSystemUpdatePending(
          content.Context context, content.Intent intent, int receivedTime) =>
      _onSystemUpdatePending(
          reference, context.reference, intent.reference, receivedTime);

  static final _onBugreportSharingDeclined = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onBugreportSharingDeclined")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onBugreportSharingDeclined(android.content.Context context, android.content.Intent intent)
  void onBugreportSharingDeclined(
          content.Context context, content.Intent intent) =>
      _onBugreportSharingDeclined(
          reference, context.reference, intent.reference);

  static final _onBugreportShared = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onBugreportShared")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onBugreportShared(android.content.Context context, android.content.Intent intent, java.lang.String bugreportHash)
  void onBugreportShared(content.Context context, content.Intent intent,
          jni.JlString bugreportHash) =>
      _onBugreportShared(reference, context.reference, intent.reference,
          bugreportHash.reference);

  static final _onBugreportFailed = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32)>>(
          "android_app_admin_DeviceAdminReceiver_onBugreportFailed")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onBugreportFailed(android.content.Context context, android.content.Intent intent, int failureCode)
  void onBugreportFailed(
          content.Context context, content.Intent intent, int failureCode) =>
      _onBugreportFailed(
          reference, context.reference, intent.reference, failureCode);

  static final _onSecurityLogsAvailable = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onSecurityLogsAvailable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onSecurityLogsAvailable(android.content.Context context, android.content.Intent intent)
  void onSecurityLogsAvailable(
          content.Context context, content.Intent intent) =>
      _onSecurityLogsAvailable(reference, context.reference, intent.reference);

  static final _onNetworkLogsAvailable = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int64,
                      ffi.Int32)>>(
          "android_app_admin_DeviceAdminReceiver_onNetworkLogsAvailable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void onNetworkLogsAvailable(android.content.Context context, android.content.Intent intent, long batchToken, int networkLogsCount)
  void onNetworkLogsAvailable(content.Context context, content.Intent intent,
          int batchToken, int networkLogsCount) =>
      _onNetworkLogsAvailable(reference, context.reference, intent.reference,
          batchToken, networkLogsCount);

  static final _onUserAdded = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onUserAdded")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserAdded(android.content.Context context, android.content.Intent intent, android.os.UserHandle newUser)
  void onUserAdded(content.Context context, content.Intent intent,
          os.UserHandle newUser) =>
      _onUserAdded(
          reference, context.reference, intent.reference, newUser.reference);

  static final _onUserRemoved = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onUserRemoved")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserRemoved(android.content.Context context, android.content.Intent intent, android.os.UserHandle removedUser)
  void onUserRemoved(content.Context context, content.Intent intent,
          os.UserHandle removedUser) =>
      _onUserRemoved(reference, context.reference, intent.reference,
          removedUser.reference);

  static final _onUserStarted = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onUserStarted")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserStarted(android.content.Context context, android.content.Intent intent, android.os.UserHandle startedUser)
  void onUserStarted(content.Context context, content.Intent intent,
          os.UserHandle startedUser) =>
      _onUserStarted(reference, context.reference, intent.reference,
          startedUser.reference);

  static final _onUserStopped = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onUserStopped")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserStopped(android.content.Context context, android.content.Intent intent, android.os.UserHandle stoppedUser)
  void onUserStopped(content.Context context, content.Intent intent,
          os.UserHandle stoppedUser) =>
      _onUserStopped(reference, context.reference, intent.reference,
          stoppedUser.reference);

  static final _onUserSwitched = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onUserSwitched")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserSwitched(android.content.Context context, android.content.Intent intent, android.os.UserHandle switchedUser)
  void onUserSwitched(content.Context context, content.Intent intent,
          os.UserHandle switchedUser) =>
      _onUserSwitched(reference, context.reference, intent.reference,
          switchedUser.reference);

  static final _onTransferOwnershipComplete = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onTransferOwnershipComplete")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onTransferOwnershipComplete(android.content.Context context, android.os.PersistableBundle bundle)
  void onTransferOwnershipComplete(
          content.Context context, os.PersistableBundle bundle) =>
      _onTransferOwnershipComplete(
          reference, context.reference, bundle.reference);

  static final _onTransferAffiliatedProfileOwnershipComplete = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onTransferAffiliatedProfileOwnershipComplete")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onTransferAffiliatedProfileOwnershipComplete(android.content.Context context, android.os.UserHandle user)
  void onTransferAffiliatedProfileOwnershipComplete(
          content.Context context, os.UserHandle user) =>
      _onTransferAffiliatedProfileOwnershipComplete(
          reference, context.reference, user.reference);

  static final _onReceive = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminReceiver_onReceive")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onReceive(android.content.Context context, android.content.Intent intent)
  void onReceive(content.Context context, content.Intent intent) =>
      _onReceive(reference, context.reference, intent.reference);
}

class DeviceAdminInfo extends jni.JlObject {
  DeviceAdminInfo.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.DeviceAdminInfo> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_DeviceAdminInfo_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int USES_ENCRYPTED_STORAGE
  static const USES_ENCRYPTED_STORAGE = 7;

  /// from: static public final int USES_POLICY_DISABLE_CAMERA
  static const USES_POLICY_DISABLE_CAMERA = 8;

  /// from: static public final int USES_POLICY_DISABLE_KEYGUARD_FEATURES
  static const USES_POLICY_DISABLE_KEYGUARD_FEATURES = 9;

  /// from: static public final int USES_POLICY_EXPIRE_PASSWORD
  static const USES_POLICY_EXPIRE_PASSWORD = 6;

  /// from: static public final int USES_POLICY_FORCE_LOCK
  static const USES_POLICY_FORCE_LOCK = 3;

  /// from: static public final int USES_POLICY_LIMIT_PASSWORD
  static const USES_POLICY_LIMIT_PASSWORD = 0;

  /// from: static public final int USES_POLICY_RESET_PASSWORD
  static const USES_POLICY_RESET_PASSWORD = 2;

  /// from: static public final int USES_POLICY_WATCH_LOGIN
  static const USES_POLICY_WATCH_LOGIN = 1;

  /// from: static public final int USES_POLICY_WIPE_DATA
  static const USES_POLICY_WIPE_DATA = 4;

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, android.content.pm.ResolveInfo resolveInfo)
  DeviceAdminInfo(content.Context context, pm.ResolveInfo resolveInfo)
      : super.fromRef(_ctor(context.reference, resolveInfo.reference));

  static final _getPackageName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_getPackageName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPackageName()
  jni.JlString getPackageName() =>
      jni.JlString.fromRef(_getPackageName(reference));

  static final _getReceiverName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_getReceiverName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getReceiverName()
  jni.JlString getReceiverName() =>
      jni.JlString.fromRef(_getReceiverName(reference));

  static final _getActivityInfo = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_getActivityInfo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.pm.ActivityInfo getActivityInfo()
  pm.ActivityInfo getActivityInfo() =>
      pm.ActivityInfo.fromRef(_getActivityInfo(reference));

  static final _getComponent = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_getComponent")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getComponent()
  content.ComponentName getComponent() =>
      content.ComponentName.fromRef(_getComponent(reference));

  static final _loadLabel = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_loadLabel")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence loadLabel(android.content.pm.PackageManager pm)
  jni.JlObject loadLabel(pm.PackageManager pm_) =>
      jni.JlObject.fromRef(_loadLabel(reference, pm_.reference));

  static final _loadDescription = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_loadDescription")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence loadDescription(android.content.pm.PackageManager pm)
  jni.JlObject loadDescription(pm.PackageManager pm_) =>
      jni.JlObject.fromRef(_loadDescription(reference, pm_.reference));

  static final _loadIcon = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_loadIcon")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager pm)
  jni.JlObject loadIcon(pm.PackageManager pm_) =>
      jni.JlObject.fromRef(_loadIcon(reference, pm_.reference));

  static final _isVisible =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DeviceAdminInfo_isVisible")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isVisible()
  bool isVisible() => _isVisible(reference) != 0;

  static final _usesPolicy = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_admin_DeviceAdminInfo_usesPolicy")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean usesPolicy(int policyIdent)
  bool usesPolicy(int policyIdent) => _usesPolicy(reference, policyIdent) != 0;

  static final _getTagForPolicy = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DeviceAdminInfo_getTagForPolicy")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getTagForPolicy(int policyIdent)
  jni.JlString getTagForPolicy(int policyIdent) =>
      jni.JlString.fromRef(_getTagForPolicy(reference, policyIdent));

  static final _supportsTransferOwnership =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DeviceAdminInfo_supportsTransferOwnership")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean supportsTransferOwnership()
  bool supportsTransferOwnership() =>
      _supportsTransferOwnership(reference) != 0;

  static final _dump = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(android.util.Printer pw, java.lang.String prefix)
  void dump(jni.JlObject pw, jni.JlString prefix) =>
      _dump(reference, pw.reference, prefix.reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminInfo_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_DeviceAdminInfo_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os.Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_DeviceAdminInfo_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);
}

class FreezePeriod extends jni.JlObject {
  FreezePeriod.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_app_admin_FreezePeriod_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.MonthDay start, java.time.MonthDay end)
  FreezePeriod(jni.JlObject start, jni.JlObject end)
      : super.fromRef(_ctor(start.reference, end.reference));

  static final _getStart = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_FreezePeriod_getStart")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.MonthDay getStart()
  jni.JlObject getStart() => jni.JlObject.fromRef(_getStart(reference));

  static final _getEnd = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_FreezePeriod_getEnd")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.MonthDay getEnd()
  jni.JlObject getEnd() => jni.JlObject.fromRef(_getEnd(reference));

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_FreezePeriod_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class NetworkEvent extends jni.JlObject {
  NetworkEvent.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.NetworkEvent> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_NetworkEvent_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_NetworkEvent_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  NetworkEvent() : super.fromRef(_ctor());

  static final _getPackageName = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_NetworkEvent_getPackageName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPackageName()
  jni.JlString getPackageName() =>
      jni.JlString.fromRef(_getPackageName(reference));

  static final _getTimestamp =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_NetworkEvent_getTimestamp")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTimestamp()
  int getTimestamp() => _getTimestamp(reference);

  static final _getId =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_NetworkEvent_getId")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getId()
  int getId() => _getId(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_NetworkEvent_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_admin_NetworkEvent_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(os.Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class DeviceAdminService extends app.Service {
  DeviceAdminService.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_DeviceAdminService_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  DeviceAdminService() : super.fromRef(_ctor());

  static final _onBind = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_DeviceAdminService_onBind")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.IBinder onBind(android.content.Intent intent)
  os.IBinder onBind(content.Intent intent) =>
      os.IBinder.fromRef(_onBind(reference, intent.reference));
}

class SecurityLog extends jni.JlObject {
  SecurityLog.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int LEVEL_ERROR
  static const LEVEL_ERROR = 3;

  /// from: static public final int LEVEL_INFO
  static const LEVEL_INFO = 1;

  /// from: static public final int LEVEL_WARNING
  static const LEVEL_WARNING = 2;

  /// from: static public final int TAG_ADB_SHELL_CMD
  static const TAG_ADB_SHELL_CMD = 210002;

  /// from: static public final int TAG_ADB_SHELL_INTERACTIVE
  static const TAG_ADB_SHELL_INTERACTIVE = 210001;

  /// from: static public final int TAG_APP_PROCESS_START
  static const TAG_APP_PROCESS_START = 210005;

  /// from: static public final int TAG_CERT_AUTHORITY_INSTALLED
  static const TAG_CERT_AUTHORITY_INSTALLED = 210029;

  /// from: static public final int TAG_CERT_AUTHORITY_REMOVED
  static const TAG_CERT_AUTHORITY_REMOVED = 210030;

  /// from: static public final int TAG_CERT_VALIDATION_FAILURE
  static const TAG_CERT_VALIDATION_FAILURE = 210033;

  /// from: static public final int TAG_CRYPTO_SELF_TEST_COMPLETED
  static const TAG_CRYPTO_SELF_TEST_COMPLETED = 210031;

  /// from: static public final int TAG_KEYGUARD_DISABLED_FEATURES_SET
  static const TAG_KEYGUARD_DISABLED_FEATURES_SET = 210021;

  /// from: static public final int TAG_KEYGUARD_DISMISSED
  static const TAG_KEYGUARD_DISMISSED = 210006;

  /// from: static public final int TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT
  static const TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT = 210007;

  /// from: static public final int TAG_KEYGUARD_SECURED
  static const TAG_KEYGUARD_SECURED = 210008;

  /// from: static public final int TAG_KEY_DESTRUCTION
  static const TAG_KEY_DESTRUCTION = 210026;

  /// from: static public final int TAG_KEY_GENERATED
  static const TAG_KEY_GENERATED = 210024;

  /// from: static public final int TAG_KEY_IMPORT
  static const TAG_KEY_IMPORT = 210025;

  /// from: static public final int TAG_KEY_INTEGRITY_VIOLATION
  static const TAG_KEY_INTEGRITY_VIOLATION = 210032;

  /// from: static public final int TAG_LOGGING_STARTED
  static const TAG_LOGGING_STARTED = 210011;

  /// from: static public final int TAG_LOGGING_STOPPED
  static const TAG_LOGGING_STOPPED = 210012;

  /// from: static public final int TAG_LOG_BUFFER_SIZE_CRITICAL
  static const TAG_LOG_BUFFER_SIZE_CRITICAL = 210015;

  /// from: static public final int TAG_MAX_PASSWORD_ATTEMPTS_SET
  static const TAG_MAX_PASSWORD_ATTEMPTS_SET = 210020;

  /// from: static public final int TAG_MAX_SCREEN_LOCK_TIMEOUT_SET
  static const TAG_MAX_SCREEN_LOCK_TIMEOUT_SET = 210019;

  /// from: static public final int TAG_MEDIA_MOUNT
  static const TAG_MEDIA_MOUNT = 210013;

  /// from: static public final int TAG_MEDIA_UNMOUNT
  static const TAG_MEDIA_UNMOUNT = 210014;

  /// from: static public final int TAG_OS_SHUTDOWN
  static const TAG_OS_SHUTDOWN = 210010;

  /// from: static public final int TAG_OS_STARTUP
  static const TAG_OS_STARTUP = 210009;

  /// from: static public final int TAG_PASSWORD_COMPLEXITY_SET
  static const TAG_PASSWORD_COMPLEXITY_SET = 210017;

  /// from: static public final int TAG_PASSWORD_EXPIRATION_SET
  static const TAG_PASSWORD_EXPIRATION_SET = 210016;

  /// from: static public final int TAG_PASSWORD_HISTORY_LENGTH_SET
  static const TAG_PASSWORD_HISTORY_LENGTH_SET = 210018;

  /// from: static public final int TAG_REMOTE_LOCK
  static const TAG_REMOTE_LOCK = 210022;

  /// from: static public final int TAG_SYNC_RECV_FILE
  static const TAG_SYNC_RECV_FILE = 210003;

  /// from: static public final int TAG_SYNC_SEND_FILE
  static const TAG_SYNC_SEND_FILE = 210004;

  /// from: static public final int TAG_USER_RESTRICTION_ADDED
  static const TAG_USER_RESTRICTION_ADDED = 210027;

  /// from: static public final int TAG_USER_RESTRICTION_REMOVED
  static const TAG_USER_RESTRICTION_REMOVED = 210028;

  /// from: static public final int TAG_WIPE_FAILURE
  static const TAG_WIPE_FAILURE = 210023;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_admin_SecurityLog_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  SecurityLog() : super.fromRef(_ctor());
}

class SecurityLog_SecurityEvent extends jni.JlObject {
  SecurityLog_SecurityEvent.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.app.admin.SecurityLog.SecurityEvent> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_admin_SecurityLog__SecurityEvent_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SecurityLog__SecurityEvent_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(byte[] data)
  SecurityLog_SecurityEvent(jni.JlObject data)
      : super.fromRef(_ctor(data.reference));

  static final _getTimeNanos =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_getTimeNanos")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTimeNanos()
  int getTimeNanos() => _getTimeNanos(reference);

  static final _getTag =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_getTag")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTag()
  int getTag() => _getTag(reference);

  static final _getData = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SecurityLog__SecurityEvent_getData")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getData()
  jni.JlObject getData() => jni.JlObject.fromRef(_getData(reference));

  static final _getId =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_getId")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getId()
  int getId() => _getId(reference);

  static final _getLogLevel =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_getLogLevel")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getLogLevel()
  int getLogLevel() => _getLogLevel(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_admin_SecurityLog__SecurityEvent_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os.Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _equals_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_admin_SecurityLog__SecurityEvent_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object o)
  bool equals_1(jni.JlObject o) => _equals_1(reference, o.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_admin_SecurityLog__SecurityEvent_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);
}
