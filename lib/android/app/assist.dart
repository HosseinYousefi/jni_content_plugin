// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;
import "package:jni/jni.dart" as jni;

import "../../android/os.dart" as os_;

import "../../android/content.dart" as content_;
import "../../_init.dart" show jniLookup;

/// from: android.app.assist.AssistStructure
///
/// Assist data automatically created by the platform's implementation of assist and autofill.
///
/// The structure is used for assist purposes when created by
/// android.app.Activity\#onProvideAssistData, View\#onProvideStructure(ViewStructure),
/// or View\#onProvideVirtualStructure(ViewStructure).
///
/// The structure is used for autofill purposes when created by
/// View\#onProvideAutofillStructure(ViewStructure, int),
/// or View\#onProvideAutofillVirtualStructure(ViewStructure, int).
///
/// For performance reasons, some properties of the assist data might be available just for assist
/// or autofill purposes; in those case, the property availability will be document in its javadoc.
class AssistStructure extends jni.JniObject {
  AssistStructure.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_assist_AssistStructure_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public final android.os.Parcelable.Creator<android.app.assist.AssistStructure> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static os_.Parcelable_Creator get CREATOR =>
      os_.Parcelable_Creator.fromRef(_get_CREATOR());

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_assist_AssistStructure_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  AssistStructure() : super.fromRef(_ctor()) {
    jni.Jni.env.checkException();
  }

  static final _getAcquisitionStartTime =
      jniLookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure_getAcquisitionStartTime")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getAcquisitionStartTime()
  ///
  /// Returns the time when the activity started generating assist data to build the
  /// AssistStructure. The time is as specified by SystemClock\#uptimeMillis().
  ///@see \#getAcquisitionEndTime()
  ///@return Returns the acquisition start time of the assist data, in milliseconds.
  int getAcquisitionStartTime() {
    final result__ = _getAcquisitionStartTime(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAcquisitionEndTime =
      jniLookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure_getAcquisitionEndTime")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getAcquisitionEndTime()
  ///
  /// Returns the time when the activity finished generating assist data to build the
  /// AssistStructure. The time is as specified by SystemClock\#uptimeMillis().
  ///@see \#getAcquisitionStartTime()
  ///@return Returns the acquisition end time of the assist data, in milliseconds.
  int getAcquisitionEndTime() {
    final result__ = _getAcquisitionEndTime(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getActivityComponent = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure_getActivityComponent")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getActivityComponent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the activity this AssistStructure came from.
  content_.ComponentName getActivityComponent() {
    final result__ =
        content_.ComponentName.fromRef(_getActivityComponent(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isHomeActivity =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure_isHomeActivity")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isHomeActivity()
  ///
  /// Returns whether the activity associated with this AssistStructure was the home activity
  /// (Launcher) at the time the assist data was acquired.
  ///@return Whether the activity was the home activity.
  ///@see android.content.Intent\#CATEGORY_HOME
  bool isHomeActivity() {
    final result__ = _isHomeActivity(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWindowNodeCount =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure_getWindowNodeCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getWindowNodeCount()
  ///
  /// Return the number of window contents that have been collected in this assist data.
  int getWindowNodeCount() {
    final result__ = _getWindowNodeCount(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWindowNodeAt = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_assist_AssistStructure_getWindowNodeAt")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.assist.AssistStructure.WindowNode getWindowNodeAt(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return one of the windows in the assist data.
  ///@param index Which window to retrieve, may be 0 to \#getWindowNodeCount()-1.
  AssistStructure_WindowNode getWindowNodeAt(int index) {
    final result__ =
        AssistStructure_WindowNode.fromRef(_getWindowNodeAt(reference, index));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _describeContents =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() {
    final result__ = _describeContents(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _writeToParcel = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_assist_AssistStructure_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(os_.Parcel out, int flags) {
    final result__ = _writeToParcel(reference, out.reference, flags);
    jni.Jni.env.checkException();
    return result__;
  }
}

/// from: android.app.assist.AssistStructure$WindowNode
///
/// Describes a window in the assist data.
class AssistStructure_WindowNode extends jni.JniObject {
  AssistStructure_WindowNode.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_assist_AssistStructure__WindowNode_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  AssistStructure_WindowNode() : super.fromRef(_ctor()) {
    jni.Jni.env.checkException();
  }

  static final _getLeft =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__WindowNode_getLeft")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getLeft()
  ///
  /// Returns the left edge of the window, in pixels, relative to the left
  /// edge of the screen.
  int getLeft() {
    final result__ = _getLeft(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTop =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__WindowNode_getTop")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTop()
  ///
  /// Returns the top edge of the window, in pixels, relative to the top
  /// edge of the screen.
  int getTop() {
    final result__ = _getTop(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWidth =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__WindowNode_getWidth")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getWidth()
  ///
  /// Returns the total width of the window in pixels.
  int getWidth() {
    final result__ = _getWidth(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getHeight =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__WindowNode_getHeight")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHeight()
  ///
  /// Returns the total height of the window in pixels.
  int getHeight() {
    final result__ = _getHeight(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTitle = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__WindowNode_getTitle")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the title associated with the window, if it has one.
  jni.JniObject getTitle() {
    final result__ = jni.JniObject.fromRef(_getTitle(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getDisplayId =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__WindowNode_getDisplayId")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDisplayId()
  ///
  /// Returns the ID of the display this window is on, for use with
  /// android.hardware.display.DisplayManager\#getDisplay DisplayManager.getDisplay().
  int getDisplayId() {
    final result__ = _getDisplayId(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getRootViewNode = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__WindowNode_getRootViewNode")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.assist.AssistStructure.ViewNode getRootViewNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the ViewNode containing the root content of the window.
  AssistStructure_ViewNode getRootViewNode() {
    final result__ =
        AssistStructure_ViewNode.fromRef(_getRootViewNode(reference));
    jni.Jni.env.checkException();
    return result__;
  }
}

/// from: android.app.assist.AssistStructure$ViewNode
///
/// Describes a single view in the assist data.
class AssistStructure_ViewNode extends jni.JniObject {
  AssistStructure_ViewNode.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final int TEXT_COLOR_UNDEFINED
  ///
  /// Magic value for text color that has not been defined, which is very unlikely
  /// to be confused with a real text color.
  static const TEXT_COLOR_UNDEFINED = 1;

  /// from: static public final int TEXT_STYLE_BOLD
  static const TEXT_STYLE_BOLD = 1;

  /// from: static public final int TEXT_STYLE_ITALIC
  static const TEXT_STYLE_ITALIC = 2;

  /// from: static public final int TEXT_STYLE_STRIKE_THRU
  static const TEXT_STYLE_STRIKE_THRU = 8;

  /// from: static public final int TEXT_STYLE_UNDERLINE
  static const TEXT_STYLE_UNDERLINE = 4;

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_assist_AssistStructure__ViewNode_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  AssistStructure_ViewNode() : super.fromRef(_ctor()) {
    jni.Jni.env.checkException();
  }

  static final _getId =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getId")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getId()
  ///
  /// Returns the ID associated with this view, as per View\#getId() View.getId().
  int getId() {
    final result__ = _getId(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getIdPackage = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getIdPackage")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIdPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// If \#getId() is a resource identifier, this is the package name of that
  /// identifier.  See android.view.ViewStructure\#setId ViewStructure.setId
  /// for more information.
  jni.JniString getIdPackage() {
    final result__ = jni.JniString.fromRef(_getIdPackage(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getIdType = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getIdType")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIdType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// If \#getId() is a resource identifier, this is the type name of that
  /// identifier.  See android.view.ViewStructure\#setId ViewStructure.setId
  /// for more information.
  jni.JniString getIdType() {
    final result__ = jni.JniString.fromRef(_getIdType(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getIdEntry = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getIdEntry")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIdEntry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// If \#getId() is a resource identifier, this is the entry name of that
  /// identifier.  See android.view.ViewStructure\#setId ViewStructure.setId
  /// for more information.
  jni.JniString getIdEntry() {
    final result__ = jni.JniString.fromRef(_getIdEntry(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAutofillId = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getAutofillId")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.autofill.AutofillId getAutofillId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the id that can be used to autofill the view contents.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes.
  ///@return id that can be used to autofill the view contents, or {@code null} if the
  /// structure was created for assist purposes.
  jni.JniObject getAutofillId() {
    final result__ = jni.JniObject.fromRef(_getAutofillId(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAutofillType =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getAutofillType")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getAutofillType()
  ///
  /// Gets the the type of value that can be used to autofill the view contents.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes.
  ///@return autofill type as defined by View\#getAutofillType(),
  /// or View\#AUTOFILL_TYPE_NONE if the structure was created for assist purposes.
  ///
  /// Value is android.view.View\#AUTOFILL_TYPE_NONE, android.view.View\#AUTOFILL_TYPE_TEXT, android.view.View\#AUTOFILL_TYPE_TOGGLE, android.view.View\#AUTOFILL_TYPE_LIST, or android.view.View\#AUTOFILL_TYPE_DATE
  int getAutofillType() {
    final result__ = _getAutofillType(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAutofillHints = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getAutofillHints")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getAutofillHints()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Describes the content of a view so that a autofill service can fill in the appropriate
  /// data.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for Assist - see View\#getAutofillHints() for more info.
  ///@return The autofill hints for this view, or {@code null} if the structure was created
  /// for assist purposes.
  jni.JniObject getAutofillHints() {
    final result__ = jni.JniObject.fromRef(_getAutofillHints(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAutofillValue = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getAutofillValue")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.autofill.AutofillValue getAutofillValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the the value of this view.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  ///@return the autofill value of this view, or {@code null} if the structure was created
  /// for assist purposes.
  jni.JniObject getAutofillValue() {
    final result__ = jni.JniObject.fromRef(_getAutofillValue(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAutofillOptions = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getAutofillOptions")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence[] getAutofillOptions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the options that can be used to autofill this view.
  ///
  /// Typically used by nodes whose View\#getAutofillType() is a list to indicate
  /// the meaning of each possible value in the list.
  ///
  /// It's relevant when the AssistStructure is used for autofill purposes, not
  /// for assist purposes.
  ///@return the options that can be used to autofill this view, or {@code null} if the
  /// structure was created for assist purposes.
  jni.JniObject getAutofillOptions() {
    final result__ = jni.JniObject.fromRef(_getAutofillOptions(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getInputType =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getInputType")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getInputType()
  ///
  /// Gets the android.text.InputType bits of this structure.
  ///@return bits as defined by android.text.InputType.
  int getInputType() {
    final result__ = _getInputType(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getLeft =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getLeft")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getLeft()
  ///
  /// Returns the left edge of this view, in pixels, relative to the left edge of its parent.
  int getLeft() {
    final result__ = _getLeft(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTop =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getTop")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTop()
  ///
  /// Returns the top edge of this view, in pixels, relative to the top edge of its parent.
  int getTop() {
    final result__ = _getTop(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getScrollX =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getScrollX")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getScrollX()
  ///
  /// Returns the current X scroll offset of this view, as per
  /// android.view.View\#getScrollX() View.getScrollX().
  int getScrollX() {
    final result__ = _getScrollX(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getScrollY =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getScrollY")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getScrollY()
  ///
  /// Returns the current Y scroll offset of this view, as per
  /// android.view.View\#getScrollX() View.getScrollY().
  int getScrollY() {
    final result__ = _getScrollY(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWidth =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getWidth")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getWidth()
  ///
  /// Returns the width of this view, in pixels.
  int getWidth() {
    final result__ = _getWidth(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getHeight =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getHeight")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHeight()
  ///
  /// Returns the height of this view, in pixels.
  int getHeight() {
    final result__ = _getHeight(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTransformation = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTransformation")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.graphics.Matrix getTransformation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the transformation that has been applied to this view, such as a translation
  /// or scaling.  The returned Matrix object is owned by ViewNode; do not modify it.
  /// Returns null if there is no transformation applied to the view.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  jni.JniObject getTransformation() {
    final result__ = jni.JniObject.fromRef(_getTransformation(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getElevation =
      jniLookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getElevation")
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getElevation()
  ///
  /// Returns the visual elevation of the view, used for shadowing and other visual
  /// characterstics, as set by ViewStructure\#setElevation ViewStructure.setElevation(float).
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  double getElevation() {
    final result__ = _getElevation(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getAlpha =
      jniLookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getAlpha")
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getAlpha()
  ///
  /// Returns the alpha transformation of the view, used to reduce the overall opacity
  /// of the view's contents, as set by ViewStructure\#setAlpha ViewStructure.setAlpha(float).
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  double getAlpha() {
    final result__ = _getAlpha(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getVisibility =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getVisibility")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getVisibility()
  ///
  /// Returns the visibility mode of this view, as per
  /// android.view.View\#getVisibility() View.getVisibility().
  int getVisibility() {
    final result__ = _getVisibility(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isAssistBlocked =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isAssistBlocked")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAssistBlocked()
  ///
  /// Returns true if assist data has been blocked starting at this node in the hierarchy.
  bool isAssistBlocked() {
    final result__ = _isAssistBlocked(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isEnabled =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isEnabled")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEnabled()
  ///
  /// Returns true if this node is in an enabled state.
  bool isEnabled() {
    final result__ = _isEnabled(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isClickable =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isClickable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isClickable()
  ///
  /// Returns true if this node is clickable by the user.
  bool isClickable() {
    final result__ = _isClickable(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isFocusable =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isFocusable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isFocusable()
  ///
  /// Returns true if this node can take input focus.
  bool isFocusable() {
    final result__ = _isFocusable(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isFocused =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isFocused")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isFocused()
  ///
  /// Returns true if this node currently had input focus at the time that the
  /// structure was collected.
  bool isFocused() {
    final result__ = _isFocused(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isAccessibilityFocused = jniLookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_isAccessibilityFocused")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAccessibilityFocused()
  ///
  /// Returns true if this node currently had accessibility focus at the time that the
  /// structure was collected.
  bool isAccessibilityFocused() {
    final result__ = _isAccessibilityFocused(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isCheckable =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isCheckable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCheckable()
  ///
  /// Returns true if this node represents something that is checkable by the user.
  bool isCheckable() {
    final result__ = _isCheckable(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isChecked =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isChecked")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isChecked()
  ///
  /// Returns true if this node is currently in a checked state.
  bool isChecked() {
    final result__ = _isChecked(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isSelected =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isSelected")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSelected()
  ///
  /// Returns true if this node has currently been selected by the user.
  bool isSelected() {
    final result__ = _isSelected(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isActivated =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isActivated")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isActivated()
  ///
  /// Returns true if this node has currently been activated by the user.
  bool isActivated() {
    final result__ = _isActivated(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isOpaque =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isOpaque")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isOpaque()
  ///
  /// Returns true if this node is opaque.
  bool isOpaque() {
    final result__ = _isOpaque(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isLongClickable =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isLongClickable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLongClickable()
  ///
  /// Returns true if this node is something the user can perform a long click/press on.
  bool isLongClickable() {
    final result__ = _isLongClickable(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isContextClickable =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_isContextClickable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isContextClickable()
  ///
  /// Returns true if this node is something the user can perform a context click on.
  bool isContextClickable() {
    final result__ = _isContextClickable(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getClassName = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getClassName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the class name of the node's implementation, indicating its behavior.
  /// For example, a button will report "android.widget.Button" meaning it behaves
  /// like a android.widget.Button.
  jni.JniString getClassName() {
    final result__ = jni.JniString.fromRef(_getClassName(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getContentDescription = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getContentDescription")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getContentDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns any content description associated with the node, which semantically describes
  /// its purpose for accessibility and other uses.
  jni.JniObject getContentDescription() {
    final result__ = jni.JniObject.fromRef(_getContentDescription(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWebDomain = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getWebDomain")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getWebDomain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the domain of the HTML document represented by this view.
  ///
  /// Typically used when the view associated with the view is a container for an HTML
  /// document.
  ///
  /// __Warning:__ an autofill service cannot trust the value reported by this method
  /// without verifing its authenticity&mdash;see the "Web security" section of
  /// android.service.autofill.AutofillService for more details.
  ///@return domain-only part of the document. For example, if the full URL is
  /// {@code https://example.com/login?user=my_user}, it returns {@code example.com}.
  ///
  /// This value may be {@code null}.
  jni.JniString getWebDomain() {
    final result__ = jni.JniString.fromRef(_getWebDomain(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWebScheme = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getWebScheme")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getWebScheme()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the scheme of the HTML document represented by this view.
  ///
  /// Typically used when the view associated with the view is a container for an HTML
  /// document.
  ///@return scheme-only part of the document. For example, if the full URL is
  /// {@code https://example.com/login?user=my_user}, it returns {@code https}.
  ///
  /// This value may be {@code null}.
  jni.JniString getWebScheme() {
    final result__ = jni.JniString.fromRef(_getWebScheme(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getHtmlInfo = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getHtmlInfo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ViewStructure.HtmlInfo getHtmlInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the HTML properties associated with this view.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  ///@return the HTML properties associated with this view, or {@code null} if the
  /// structure was created for assist purposes.
  jni.JniObject getHtmlInfo() {
    final result__ = jni.JniObject.fromRef(_getHtmlInfo(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getLocaleList = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getLocaleList")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.LocaleList getLocaleList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the the list of locales associated with this view.
  ///@return This value may be {@code null}.
  os_.LocaleList getLocaleList() {
    final result__ = os_.LocaleList.fromRef(_getLocaleList(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getText = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getText")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns any text associated with the node that is displayed to the user, or null
  /// if there is none.
  jni.JniObject getText() {
    final result__ = jni.JniObject.fromRef(_getText(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextSelectionStart = jniLookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextSelectionStart")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTextSelectionStart()
  ///
  /// If \#getText() is non-null, this is where the current selection starts.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  int getTextSelectionStart() {
    final result__ = _getTextSelectionStart(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextSelectionEnd = jniLookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextSelectionEnd")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTextSelectionEnd()
  ///
  /// If \#getText() is non-null, this is where the current selection starts.
  /// If there is no selection, returns the same value as \#getTextSelectionStart(),
  /// indicating the cursor position.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  int getTextSelectionEnd() {
    final result__ = _getTextSelectionEnd(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextColor =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getTextColor")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTextColor()
  ///
  /// If \#getText() is non-null, this is the main text color associated with it.
  /// If there is no text color, \#TEXT_COLOR_UNDEFINED is returned.
  /// Note that the text may also contain style spans that modify the color of specific
  /// parts of the text.
  int getTextColor() {
    final result__ = _getTextColor(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextBackgroundColor = jniLookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextBackgroundColor")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTextBackgroundColor()
  ///
  /// If \#getText() is non-null, this is the main text background color associated
  /// with it.
  /// If there is no text background color, \#TEXT_COLOR_UNDEFINED is returned.
  /// Note that the text may also contain style spans that modify the color of specific
  /// parts of the text.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  int getTextBackgroundColor() {
    final result__ = _getTextBackgroundColor(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextSize =
      jniLookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getTextSize")
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float getTextSize()
  ///
  /// If \#getText() is non-null, this is the main text size (in pixels) associated
  /// with it.
  /// Note that the text may also contain style spans that modify the size of specific
  /// parts of the text.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  double getTextSize() {
    final result__ = _getTextSize(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextStyle =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getTextStyle")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTextStyle()
  ///
  /// If \#getText() is non-null, this is the main text style associated
  /// with it, containing a bit mask of \#TEXT_STYLE_BOLD,
  /// \#TEXT_STYLE_BOLD, \#TEXT_STYLE_STRIKE_THRU, and/or
  /// \#TEXT_STYLE_UNDERLINE.
  /// Note that the text may also contain style spans that modify the style of specific
  /// parts of the text.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  int getTextStyle() {
    final result__ = _getTextStyle(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextLineCharOffsets = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextLineCharOffsets")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getTextLineCharOffsets()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return per-line offsets into the text returned by \#getText().  Each entry
  /// in the array is a formatted line of text, and the value it contains is the offset
  /// into the text string where that line starts.  May return null if there is no line
  /// information.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  jni.JniObject getTextLineCharOffsets() {
    final result__ = jni.JniObject.fromRef(_getTextLineCharOffsets(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextLineBaselines = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextLineBaselines")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getTextLineBaselines()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return per-line baselines into the text returned by \#getText().  Each entry
  /// in the array is a formatted line of text, and the value it contains is the baseline
  /// where that text appears in the view.  May return null if there is no line
  /// information.
  ///
  /// It's only relevant when the AssistStructure is used for assist purposes,
  /// not for autofill purposes.
  jni.JniObject getTextLineBaselines() {
    final result__ = jni.JniObject.fromRef(_getTextLineBaselines(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getTextIdEntry = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getTextIdEntry")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getTextIdEntry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the identifier used to set the text associated with this view.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  ///@return This value may be {@code null}.
  jni.JniString getTextIdEntry() {
    final result__ = jni.JniString.fromRef(_getTextIdEntry(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getHint = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getHint")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getHint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return additional hint text associated with the node; this is typically used with
  /// a node that takes user input, describing to the user what the input means.
  jni.JniString getHint() {
    final result__ = jni.JniString.fromRef(_getHint(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getExtras = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getExtras")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a Bundle containing optional vendor-specific extension information.
  os_.Bundle getExtras() {
    final result__ = os_.Bundle.fromRef(_getExtras(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getChildCount =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getChildCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChildCount()
  ///
  /// Return the number of children this node has.
  int getChildCount() {
    final result__ = _getChildCount(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getChildAt = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_app_assist_AssistStructure__ViewNode_getChildAt")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.assist.AssistStructure.ViewNode getChildAt(int index)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return a child of this node, given an index value from 0 to
  /// \#getChildCount()-1.
  AssistStructure_ViewNode getChildAt(int index) {
    final result__ =
        AssistStructure_ViewNode.fromRef(_getChildAt(reference, index));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getMinTextEms =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getMinTextEms")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMinTextEms()
  ///
  /// Returns the minimum width in ems of the text associated with this node, or {@code -1}
  /// if not supported by the node.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  int getMinTextEms() {
    final result__ = _getMinTextEms(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getMaxTextEms =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getMaxTextEms")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMaxTextEms()
  ///
  /// Returns the maximum width in ems of the text associated with this node, or {@code -1}
  /// if not supported by the node.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  int getMaxTextEms() {
    final result__ = _getMaxTextEms(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getMaxTextLength =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistStructure__ViewNode_getMaxTextLength")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMaxTextLength()
  ///
  /// Returns the maximum length of the text associated with this node node, or {@code -1}
  /// if not supported by the node or not set.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes,
  /// not for assist purposes.
  int getMaxTextLength() {
    final result__ = _getMaxTextLength(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getImportantForAutofill = jniLookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistStructure__ViewNode_getImportantForAutofill")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getImportantForAutofill()
  ///
  /// Gets the View\#setImportantForAutofill(int) importantForAutofill mode of
  /// the view associated with this node.
  ///
  /// It's only relevant when the AssistStructure is used for autofill purposes.
  ///@return Value is android.view.View\#IMPORTANT_FOR_AUTOFILL_AUTO, android.view.View\#IMPORTANT_FOR_AUTOFILL_YES, android.view.View\#IMPORTANT_FOR_AUTOFILL_NO, android.view.View\#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, or android.view.View\#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS
  int getImportantForAutofill() {
    final result__ = _getImportantForAutofill(reference);
    jni.Jni.env.checkException();
    return result__;
  }
}

/// from: android.app.assist.AssistContent
///
/// Holds information about the content an application is viewing, to hand to an
/// assistant at the user's request.  This is filled in by
/// android.app.Activity\#onProvideAssistContent Activity.onProvideAssistContent.
class AssistContent extends jni.JniObject {
  AssistContent.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _get_CREATOR =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_app_assist_AssistContent_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public final android.os.Parcelable.Creator<android.app.assist.AssistContent> CREATOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  static os_.Parcelable_Creator get CREATOR =>
      os_.Parcelable_Creator.fromRef(_get_CREATOR());

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_app_assist_AssistContent_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  AssistContent() : super.fromRef(_ctor()) {
    jni.Jni.env.checkException();
  }

  static final _setIntent = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_setIntent")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setIntent(android.content.Intent intent)
  ///
  /// Sets the Intent associated with the content, describing the current top-level context of
  /// the activity.  If this contains a reference to a piece of data related to the activity,
  /// be sure to set Intent\#FLAG_GRANT_READ_URI_PERMISSION so the accessibility
  /// service can access it.
  void setIntent(content_.Intent intent) {
    final result__ = _setIntent(reference, intent.reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getIntent = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_getIntent")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current \#setIntent if one is set, else the default Intent obtained from
  /// android.app.Activity\#getIntent Activity.getIntent. Can be modified in-place.
  content_.Intent getIntent() {
    final result__ = content_.Intent.fromRef(_getIntent(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isAppProvidedIntent =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistContent_isAppProvidedIntent")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAppProvidedIntent()
  ///
  /// Returns whether or not the current Intent was explicitly provided in
  /// android.app.Activity\#onProvideAssistContent Activity.onProvideAssistContent. If not,
  /// the Intent was automatically set based on
  /// android.app.Activity\#getIntent Activity.getIntent.
  bool isAppProvidedIntent() {
    final result__ = _isAppProvidedIntent(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _setClipData = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_setClipData")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setClipData(android.content.ClipData clip)
  ///
  /// Optional additional content items that are involved with
  /// the current UI.  Access to this content will be granted to the assistant as if you
  /// are sending it through an Intent with Intent\#FLAG_GRANT_READ_URI_PERMISSION.
  void setClipData(content_.ClipData clip) {
    final result__ = _setClipData(reference, clip.reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getClipData = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_getClipData")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ClipData getClipData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the current \#setClipData, which you can modify in-place.
  content_.ClipData getClipData() {
    final result__ = content_.ClipData.fromRef(_getClipData(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _setStructuredData = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_setStructuredData")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setStructuredData(java.lang.String structuredData)
  ///
  /// Sets optional structured data regarding the content being viewed. The provided data
  /// must be a string represented with <a href="http://json-ld.org/">JSON-LD</a> using the
  /// <a href="http://schema.org/">schema.org</a> vocabulary.
  void setStructuredData(jni.JniString structuredData) {
    final result__ = _setStructuredData(reference, structuredData.reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getStructuredData = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_getStructuredData")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStructuredData()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the current \#setStructuredData.
  jni.JniString getStructuredData() {
    final result__ = jni.JniString.fromRef(_getStructuredData(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _setWebUri = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_setWebUri")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setWebUri(android.net.Uri uri)
  ///
  /// Set a web URI associated with the current data being shown to the user.
  /// This URI could be opened in a web browser, or in the app as an
  /// Intent\#ACTION_VIEW Intent, to show the same data that is currently
  /// being displayed by it.  The URI here should be something that is transportable
  /// off the device into other environments to acesss the same data as is currently
  /// being shown in the app; if the app does not have such a representation, it should
  /// leave the null and only report the local intent and clip data.
  void setWebUri(jni.JniObject uri) {
    final result__ = _setWebUri(reference, uri.reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getWebUri = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_getWebUri")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri getWebUri()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return the content's web URI as per \#setWebUri(android.net.Uri), or null if
  /// there is none.
  jni.JniObject getWebUri() {
    final result__ = jni.JniObject.fromRef(_getWebUri(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _isAppProvidedWebUri =
      jniLookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistContent_isAppProvidedWebUri")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAppProvidedWebUri()
  ///
  /// Returns whether or not the current \#getWebUri was explicitly provided in
  /// android.app.Activity\#onProvideAssistContent Activity.onProvideAssistContent. If not,
  /// the Intent was automatically set based on
  /// android.app.Activity\#getIntent Activity.getIntent.
  bool isAppProvidedWebUri() {
    final result__ = _isAppProvidedWebUri(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getExtras = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_app_assist_AssistContent_getExtras")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Return Bundle for extra vendor-specific data that can be modified and examined.
  os_.Bundle getExtras() {
    final result__ = os_.Bundle.fromRef(_getExtras(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _describeContents =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_app_assist_AssistContent_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() {
    final result__ = _describeContents(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _writeToParcel = jniLookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_app_assist_AssistContent_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(os_.Parcel dest, int flags) {
    final result__ = _writeToParcel(reference, dest.reference, flags);
    jni.Jni.env.checkException();
    return result__;
  }
}
