// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "os/strictmode.dart" as strictmode;

import "package:content_plugin/android/content.dart" as content;
import "../init.dart" show jlookup;

class WorkSource extends jni.JlObject {
  WorkSource.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.WorkSource> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_WorkSource_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_WorkSource_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  WorkSource() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.WorkSource orig)
  WorkSource.ctor_1(WorkSource orig) : super.fromRef(_ctor_1(orig.reference));

  static final _clear =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_WorkSource_clear")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clear()
  void clear() => _clear(reference);

  static final _equals_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object o)
  bool equals_1(jni.JlObject o) => _equals_1(reference, o.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_WorkSource_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _diff = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_diff")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean diff(android.os.WorkSource other)
  bool diff(WorkSource other) => _diff(reference, other.reference) != 0;

  static final _set_ = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_set_")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void set(android.os.WorkSource other)
  void set_(WorkSource other) => _set_(reference, other.reference);

  static final _add = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_add")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean add(android.os.WorkSource other)
  bool add(WorkSource other) => _add(reference, other.reference) != 0;

  static final _remove = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_remove")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean remove(android.os.WorkSource other)
  bool remove(WorkSource other) => _remove(reference, other.reference) != 0;

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_WorkSource_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_WorkSource_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_WorkSource_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class RemoteException extends jni.JlObject {
  RemoteException.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_RemoteException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  RemoteException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_RemoteException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String message)
  RemoteException.ctor_1(jni.JlString message)
      : super.fromRef(_ctor_1(message.reference));
}

class VibrationEffect extends jni.JlObject {
  VibrationEffect.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.VibrationEffect> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_VibrationEffect_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int DEFAULT_AMPLITUDE
  static const DEFAULT_AMPLITUDE = -1;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_VibrationEffect_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  VibrationEffect() : super.fromRef(_ctor());

  static final _createOneShot = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Int64,
                  ffi.Int32)>>("android_os_VibrationEffect_createOneShot")
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// from: static public android.os.VibrationEffect createOneShot(long milliseconds, int amplitude)
  static VibrationEffect createOneShot(int milliseconds, int amplitude) =>
      VibrationEffect.fromRef(_createOneShot(milliseconds, amplitude));

  static final _createWaveform = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_VibrationEffect_createWaveform")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.os.VibrationEffect createWaveform(long[] timings, int repeat)
  static VibrationEffect createWaveform(jni.JlObject timings, int repeat) =>
      VibrationEffect.fromRef(_createWaveform(timings.reference, repeat));

  static final _createWaveform_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_VibrationEffect_createWaveform_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.os.VibrationEffect createWaveform(long[] timings, int[] amplitudes, int repeat)
  static VibrationEffect createWaveform_1(
          jni.JlObject timings, jni.JlObject amplitudes, int repeat) =>
      VibrationEffect.fromRef(
          _createWaveform_1(timings.reference, amplitudes.reference, repeat));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_VibrationEffect_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);
}

class PatternMatcher extends jni.JlObject {
  PatternMatcher.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.PatternMatcher> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_PatternMatcher_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int PATTERN_ADVANCED_GLOB
  static const PATTERN_ADVANCED_GLOB = 3;

  /// from: static public final int PATTERN_LITERAL
  static const PATTERN_LITERAL = 0;

  /// from: static public final int PATTERN_PREFIX
  static const PATTERN_PREFIX = 1;

  /// from: static public final int PATTERN_SIMPLE_GLOB
  static const PATTERN_SIMPLE_GLOB = 2;

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_PatternMatcher_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String pattern, int type)
  PatternMatcher(jni.JlString pattern, int type)
      : super.fromRef(_ctor(pattern.reference, type));

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_PatternMatcher_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Parcel src)
  PatternMatcher.ctor_1(Parcel src) : super.fromRef(_ctor_1(src.reference));

  static final _getPath = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_PatternMatcher_getPath")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getPath()
  jni.JlString getPath() => jni.JlString.fromRef(_getPath(reference));

  static final _getType =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PatternMatcher_getType")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getType()
  int getType() => _getType(reference);

  static final _match = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_PatternMatcher_match")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean match(java.lang.String str)
  bool match(jni.JlString str) => _match(reference, str.reference) != 0;

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_PatternMatcher_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PatternMatcher_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_PatternMatcher_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class StrictMode extends jni.JlObject {
  StrictMode.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  StrictMode() : super.fromRef(_ctor());

  static final _setThreadPolicy =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StrictMode_setThreadPolicy")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setThreadPolicy(android.os.StrictMode.ThreadPolicy policy)
  static void setThreadPolicy(StrictMode_ThreadPolicy policy) =>
      _setThreadPolicy(policy.reference);

  static final _getThreadPolicy =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode_getThreadPolicy")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.StrictMode.ThreadPolicy getThreadPolicy()
  static StrictMode_ThreadPolicy getThreadPolicy() =>
      StrictMode_ThreadPolicy.fromRef(_getThreadPolicy());

  static final _allowThreadDiskWrites =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode_allowThreadDiskWrites")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.StrictMode.ThreadPolicy allowThreadDiskWrites()
  static StrictMode_ThreadPolicy allowThreadDiskWrites() =>
      StrictMode_ThreadPolicy.fromRef(_allowThreadDiskWrites());

  static final _allowThreadDiskReads =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode_allowThreadDiskReads")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.StrictMode.ThreadPolicy allowThreadDiskReads()
  static StrictMode_ThreadPolicy allowThreadDiskReads() =>
      StrictMode_ThreadPolicy.fromRef(_allowThreadDiskReads());

  static final _setVmPolicy =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StrictMode_setVmPolicy")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setVmPolicy(android.os.StrictMode.VmPolicy policy)
  static void setVmPolicy(StrictMode_VmPolicy policy) =>
      _setVmPolicy(policy.reference);

  static final _getVmPolicy =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode_getVmPolicy")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.StrictMode.VmPolicy getVmPolicy()
  static StrictMode_VmPolicy getVmPolicy() =>
      StrictMode_VmPolicy.fromRef(_getVmPolicy());

  static final _enableDefaults =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_StrictMode_enableDefaults")
          .asFunction<void Function()>();

  /// from: static public void enableDefaults()
  static void enableDefaults() => _enableDefaults();

  static final _noteSlowCall =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StrictMode_noteSlowCall")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void noteSlowCall(java.lang.String name)
  static void noteSlowCall(jni.JlString name) => _noteSlowCall(name.reference);
}

class StrictMode_VmPolicy extends jni.JlObject {
  StrictMode_VmPolicy.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.StrictMode.VmPolicy LAX
  static final _getLAX =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_StrictMode__VmPolicy_LAX")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static StrictMode_VmPolicy get LAX => StrictMode_VmPolicy.fromRef(_getLAX());

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(int mask, java.util.HashMap<java.lang.Class,java.lang.Integer> classInstanceLimit, android.os.StrictMode.OnVmViolationListener listener, java.util.concurrent.Executor executor)
  StrictMode_VmPolicy(int mask, jni.JlObject classInstanceLimit,
      StrictMode_OnVmViolationListener listener, jni.JlObject executor)
      : super.fromRef(_ctor(mask, classInstanceLimit.reference,
            listener.reference, executor.reference));

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class StrictMode_VmPolicy_Builder extends jni.JlObject {
  StrictMode_VmPolicy_Builder.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode__VmPolicy__Builder_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  StrictMode_VmPolicy_Builder() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.StrictMode.VmPolicy base)
  StrictMode_VmPolicy_Builder.ctor_1(StrictMode_VmPolicy base)
      : super.fromRef(_ctor_1(base.reference));

  static final _setClassInstanceLimit = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_StrictMode__VmPolicy__Builder_setClassInstanceLimit")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder setClassInstanceLimit(java.lang.Class klass, int instanceLimit)
  StrictMode_VmPolicy_Builder setClassInstanceLimit(
          jni.JlObject klass, int instanceLimit) =>
      StrictMode_VmPolicy_Builder.fromRef(
          _setClassInstanceLimit(reference, klass.reference, instanceLimit));

  static final _detectActivityLeaks = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectActivityLeaks")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectActivityLeaks()
  StrictMode_VmPolicy_Builder detectActivityLeaks() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectActivityLeaks(reference));

  static final _detectNonSdkApiUsage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectNonSdkApiUsage")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectNonSdkApiUsage()
  StrictMode_VmPolicy_Builder detectNonSdkApiUsage() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectNonSdkApiUsage(reference));

  static final _permitNonSdkApiUsage = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_permitNonSdkApiUsage")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder permitNonSdkApiUsage()
  StrictMode_VmPolicy_Builder permitNonSdkApiUsage() =>
      StrictMode_VmPolicy_Builder.fromRef(_permitNonSdkApiUsage(reference));

  static final _detectAll = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectAll")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectAll()
  StrictMode_VmPolicy_Builder detectAll() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectAll(reference));

  static final _detectLeakedSqlLiteObjects = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectLeakedSqlLiteObjects")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectLeakedSqlLiteObjects()
  StrictMode_VmPolicy_Builder detectLeakedSqlLiteObjects() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _detectLeakedSqlLiteObjects(reference));

  static final _detectLeakedClosableObjects = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectLeakedClosableObjects")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectLeakedClosableObjects()
  StrictMode_VmPolicy_Builder detectLeakedClosableObjects() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _detectLeakedClosableObjects(reference));

  static final _detectLeakedRegistrationObjects = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectLeakedRegistrationObjects")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectLeakedRegistrationObjects()
  StrictMode_VmPolicy_Builder detectLeakedRegistrationObjects() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _detectLeakedRegistrationObjects(reference));

  static final _detectFileUriExposure = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectFileUriExposure")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectFileUriExposure()
  StrictMode_VmPolicy_Builder detectFileUriExposure() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectFileUriExposure(reference));

  static final _detectCleartextNetwork = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectCleartextNetwork")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectCleartextNetwork()
  StrictMode_VmPolicy_Builder detectCleartextNetwork() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectCleartextNetwork(reference));

  static final _detectContentUriWithoutPermission = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectContentUriWithoutPermission")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectContentUriWithoutPermission()
  StrictMode_VmPolicy_Builder detectContentUriWithoutPermission() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _detectContentUriWithoutPermission(reference));

  static final _detectUntaggedSockets = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_detectUntaggedSockets")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder detectUntaggedSockets()
  StrictMode_VmPolicy_Builder detectUntaggedSockets() =>
      StrictMode_VmPolicy_Builder.fromRef(_detectUntaggedSockets(reference));

  static final _penaltyDeath = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyDeath")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyDeath()
  StrictMode_VmPolicy_Builder penaltyDeath() =>
      StrictMode_VmPolicy_Builder.fromRef(_penaltyDeath(reference));

  static final _penaltyDeathOnCleartextNetwork = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyDeathOnCleartextNetwork")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyDeathOnCleartextNetwork()
  StrictMode_VmPolicy_Builder penaltyDeathOnCleartextNetwork() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _penaltyDeathOnCleartextNetwork(reference));

  static final _penaltyDeathOnFileUriExposure = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyDeathOnFileUriExposure")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyDeathOnFileUriExposure()
  StrictMode_VmPolicy_Builder penaltyDeathOnFileUriExposure() =>
      StrictMode_VmPolicy_Builder.fromRef(
          _penaltyDeathOnFileUriExposure(reference));

  static final _penaltyLog = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyLog")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyLog()
  StrictMode_VmPolicy_Builder penaltyLog() =>
      StrictMode_VmPolicy_Builder.fromRef(_penaltyLog(reference));

  static final _penaltyDropBox = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyDropBox")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyDropBox()
  StrictMode_VmPolicy_Builder penaltyDropBox() =>
      StrictMode_VmPolicy_Builder.fromRef(_penaltyDropBox(reference));

  static final _penaltyListener = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_penaltyListener")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy.Builder penaltyListener(java.util.concurrent.Executor executor, android.os.StrictMode.OnVmViolationListener listener)
  StrictMode_VmPolicy_Builder penaltyListener(
          jni.JlObject executor, StrictMode_OnVmViolationListener listener) =>
      StrictMode_VmPolicy_Builder.fromRef(
          _penaltyListener(reference, executor.reference, listener.reference));

  static final _build = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__VmPolicy__Builder_build")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.VmPolicy build()
  StrictMode_VmPolicy build() => StrictMode_VmPolicy.fromRef(_build(reference));
}

class StrictMode_ThreadPolicy extends jni.JlObject {
  StrictMode_ThreadPolicy.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final android.os.StrictMode.ThreadPolicy LAX
  static final _getLAX =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_StrictMode__ThreadPolicy_LAX")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static StrictMode_ThreadPolicy get LAX =>
      StrictMode_ThreadPolicy.fromRef(_getLAX());

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(int mask, android.os.StrictMode.OnThreadViolationListener listener, java.util.concurrent.Executor executor)
  StrictMode_ThreadPolicy(int mask,
      StrictMode_OnThreadViolationListener listener, jni.JlObject executor)
      : super.fromRef(_ctor(mask, listener.reference, executor.reference));

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class StrictMode_ThreadPolicy_Builder extends jni.JlObject {
  StrictMode_ThreadPolicy_Builder.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_StrictMode__ThreadPolicy__Builder_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  StrictMode_ThreadPolicy_Builder() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.StrictMode.ThreadPolicy policy)
  StrictMode_ThreadPolicy_Builder.ctor_1(StrictMode_ThreadPolicy policy)
      : super.fromRef(_ctor_1(policy.reference));

  static final _detectAll = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectAll")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectAll()
  StrictMode_ThreadPolicy_Builder detectAll() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_detectAll(reference));

  static final _permitAll = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitAll")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitAll()
  StrictMode_ThreadPolicy_Builder permitAll() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_permitAll(reference));

  static final _detectNetwork = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectNetwork")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectNetwork()
  StrictMode_ThreadPolicy_Builder detectNetwork() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_detectNetwork(reference));

  static final _permitNetwork = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitNetwork")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitNetwork()
  StrictMode_ThreadPolicy_Builder permitNetwork() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_permitNetwork(reference));

  static final _detectDiskReads = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectDiskReads")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectDiskReads()
  StrictMode_ThreadPolicy_Builder detectDiskReads() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_detectDiskReads(reference));

  static final _permitDiskReads = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitDiskReads")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitDiskReads()
  StrictMode_ThreadPolicy_Builder permitDiskReads() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_permitDiskReads(reference));

  static final _detectCustomSlowCalls = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectCustomSlowCalls")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectCustomSlowCalls()
  StrictMode_ThreadPolicy_Builder detectCustomSlowCalls() =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _detectCustomSlowCalls(reference));

  static final _permitCustomSlowCalls = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitCustomSlowCalls")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitCustomSlowCalls()
  StrictMode_ThreadPolicy_Builder permitCustomSlowCalls() =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _permitCustomSlowCalls(reference));

  static final _permitResourceMismatches = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitResourceMismatches")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitResourceMismatches()
  StrictMode_ThreadPolicy_Builder permitResourceMismatches() =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _permitResourceMismatches(reference));

  static final _detectUnbufferedIo = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectUnbufferedIo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectUnbufferedIo()
  StrictMode_ThreadPolicy_Builder detectUnbufferedIo() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_detectUnbufferedIo(reference));

  static final _permitUnbufferedIo = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitUnbufferedIo")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitUnbufferedIo()
  StrictMode_ThreadPolicy_Builder permitUnbufferedIo() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_permitUnbufferedIo(reference));

  static final _detectResourceMismatches = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectResourceMismatches")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectResourceMismatches()
  StrictMode_ThreadPolicy_Builder detectResourceMismatches() =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _detectResourceMismatches(reference));

  static final _detectDiskWrites = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_detectDiskWrites")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder detectDiskWrites()
  StrictMode_ThreadPolicy_Builder detectDiskWrites() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_detectDiskWrites(reference));

  static final _permitDiskWrites = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_permitDiskWrites")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder permitDiskWrites()
  StrictMode_ThreadPolicy_Builder permitDiskWrites() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_permitDiskWrites(reference));

  static final _penaltyDialog = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyDialog")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyDialog()
  StrictMode_ThreadPolicy_Builder penaltyDialog() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_penaltyDialog(reference));

  static final _penaltyDeath = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyDeath")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyDeath()
  StrictMode_ThreadPolicy_Builder penaltyDeath() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_penaltyDeath(reference));

  static final _penaltyDeathOnNetwork = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyDeathOnNetwork")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyDeathOnNetwork()
  StrictMode_ThreadPolicy_Builder penaltyDeathOnNetwork() =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _penaltyDeathOnNetwork(reference));

  static final _penaltyFlashScreen = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyFlashScreen")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyFlashScreen()
  StrictMode_ThreadPolicy_Builder penaltyFlashScreen() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_penaltyFlashScreen(reference));

  static final _penaltyLog = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyLog")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyLog()
  StrictMode_ThreadPolicy_Builder penaltyLog() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_penaltyLog(reference));

  static final _penaltyDropBox = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyDropBox")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyDropBox()
  StrictMode_ThreadPolicy_Builder penaltyDropBox() =>
      StrictMode_ThreadPolicy_Builder.fromRef(_penaltyDropBox(reference));

  static final _penaltyListener = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_penaltyListener")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy.Builder penaltyListener(java.util.concurrent.Executor executor, android.os.StrictMode.OnThreadViolationListener listener)
  StrictMode_ThreadPolicy_Builder penaltyListener(jni.JlObject executor,
          StrictMode_OnThreadViolationListener listener) =>
      StrictMode_ThreadPolicy_Builder.fromRef(
          _penaltyListener(reference, executor.reference, listener.reference));

  static final _build = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__ThreadPolicy__Builder_build")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.StrictMode.ThreadPolicy build()
  StrictMode_ThreadPolicy build() =>
      StrictMode_ThreadPolicy.fromRef(_build(reference));
}

class StrictMode_OnVmViolationListener extends jni.JlObject {
  StrictMode_OnVmViolationListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onVmViolation = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__OnVmViolationListener_onVmViolation")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onVmViolation(android.os.strictmode.Violation v)
  void onVmViolation(strictmode.Violation v) =>
      _onVmViolation(reference, v.reference);
}

class StrictMode_OnThreadViolationListener extends jni.JlObject {
  StrictMode_OnThreadViolationListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onThreadViolation = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_StrictMode__OnThreadViolationListener_onThreadViolation")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onThreadViolation(android.os.strictmode.Violation v)
  void onThreadViolation(strictmode.Violation v) =>
      _onThreadViolation(reference, v.reference);
}

class Vibrator extends jni.JlObject {
  Vibrator.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Vibrator_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  Vibrator() : super.fromRef(_ctor());

  static final _hasVibrator =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Vibrator_hasVibrator")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasVibrator()
  bool hasVibrator() => _hasVibrator(reference) != 0;

  static final _hasAmplitudeControl =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Vibrator_hasAmplitudeControl")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean hasAmplitudeControl()
  bool hasAmplitudeControl() => _hasAmplitudeControl(reference) != 0;

  static final _vibrate = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Vibrator_vibrate")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void vibrate(long milliseconds)
  void vibrate(int milliseconds) => _vibrate(reference, milliseconds);

  static final _vibrate_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                  ffi.Pointer<ffi.Void>)>>("android_os_Vibrator_vibrate_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void vibrate(long milliseconds, android.media.AudioAttributes attributes)
  void vibrate_1(int milliseconds, jni.JlObject attributes) =>
      _vibrate_1(reference, milliseconds, attributes.reference);

  static final _vibrate_2 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Vibrator_vibrate_2")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void vibrate(long[] pattern, int repeat)
  void vibrate_2(jni.JlObject pattern, int repeat) =>
      _vibrate_2(reference, pattern.reference, repeat);

  static final _vibrate_3 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Vibrator_vibrate_3")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void vibrate(long[] pattern, int repeat, android.media.AudioAttributes attributes)
  void vibrate_3(jni.JlObject pattern, int repeat, jni.JlObject attributes) =>
      _vibrate_3(reference, pattern.reference, repeat, attributes.reference);

  static final _vibrate_4 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Vibrator_vibrate_4")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void vibrate(android.os.VibrationEffect vibe)
  void vibrate_4(VibrationEffect vibe) => _vibrate_4(reference, vibe.reference);

  static final _vibrate_5 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Vibrator_vibrate_5")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void vibrate(android.os.VibrationEffect vibe, android.media.AudioAttributes attributes)
  void vibrate_5(VibrationEffect vibe, jni.JlObject attributes) =>
      _vibrate_5(reference, vibe.reference, attributes.reference);

  static final _cancel =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Vibrator_cancel")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void cancel()
  void cancel() => _cancel(reference);
}

class BaseBundle extends jni.JlObject {
  BaseBundle.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_BaseBundle_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  BaseBundle() : super.fromRef(_ctor());

  static final _size =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_BaseBundle_size")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int size()
  int size() => _size(reference);

  static final _isEmpty =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_BaseBundle_isEmpty")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEmpty()
  bool isEmpty() => _isEmpty(reference) != 0;

  static final _clear =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_BaseBundle_clear")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clear()
  void clear() => _clear(reference);

  static final _containsKey = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_containsKey")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean containsKey(java.lang.String key)
  bool containsKey(jni.JlString key) =>
      _containsKey(reference, key.reference) != 0;

  static final _get_ = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_get_")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object get(java.lang.String key)
  jni.JlObject get_(jni.JlString key) =>
      jni.JlObject.fromRef(_get_(reference, key.reference));

  static final _remove = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_remove")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void remove(java.lang.String key)
  void remove(jni.JlString key) => _remove(reference, key.reference);

  static final _keySet = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_keySet")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<java.lang.String> keySet()
  jni.JlObject keySet() => jni.JlObject.fromRef(_keySet(reference));

  static final _putBoolean = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_BaseBundle_putBoolean")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putBoolean(java.lang.String key, boolean value)
  void putBoolean(jni.JlString key, bool value) =>
      _putBoolean(reference, key.reference, value ? 1 : 0);

  static final _putInt = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_BaseBundle_putInt")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putInt(java.lang.String key, int value)
  void putInt(jni.JlString key, int value) =>
      _putInt(reference, key.reference, value);

  static final _putLong = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_BaseBundle_putLong")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putLong(java.lang.String key, long value)
  void putLong(jni.JlString key, int value) =>
      _putLong(reference, key.reference, value);

  static final _putDouble = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("android_os_BaseBundle_putDouble")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public void putDouble(java.lang.String key, double value)
  void putDouble(jni.JlString key, double value) =>
      _putDouble(reference, key.reference, value);

  static final _putString = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_putString")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putString(java.lang.String key, java.lang.String value)
  void putString(jni.JlString key, jni.JlString value) =>
      _putString(reference, key.reference, value.reference);

  static final _putBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_putBooleanArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putBooleanArray(java.lang.String key, boolean[] value)
  void putBooleanArray(jni.JlString key, jni.JlObject value) =>
      _putBooleanArray(reference, key.reference, value.reference);

  static final _putIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_putIntArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putIntArray(java.lang.String key, int[] value)
  void putIntArray(jni.JlString key, jni.JlObject value) =>
      _putIntArray(reference, key.reference, value.reference);

  static final _putLongArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_putLongArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putLongArray(java.lang.String key, long[] value)
  void putLongArray(jni.JlString key, jni.JlObject value) =>
      _putLongArray(reference, key.reference, value.reference);

  static final _putDoubleArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_putDoubleArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putDoubleArray(java.lang.String key, double[] value)
  void putDoubleArray(jni.JlString key, jni.JlObject value) =>
      _putDoubleArray(reference, key.reference, value.reference);

  static final _putStringArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_putStringArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putStringArray(java.lang.String key, java.lang.String[] value)
  void putStringArray(jni.JlString key, jni.JlObject value) =>
      _putStringArray(reference, key.reference, value.reference);

  static final _getBoolean = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getBoolean")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getBoolean(java.lang.String key)
  bool getBoolean(jni.JlString key) =>
      _getBoolean(reference, key.reference) != 0;

  static final _getBoolean_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_BaseBundle_getBoolean_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBoolean(java.lang.String key, boolean defaultValue)
  bool getBoolean_1(jni.JlString key, bool defaultValue) =>
      _getBoolean_1(reference, key.reference, defaultValue ? 1 : 0) != 0;

  static final _getInt = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getInt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int getInt(java.lang.String key)
  int getInt(jni.JlString key) => _getInt(reference, key.reference);

  static final _getInt_1 = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_BaseBundle_getInt_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getInt(java.lang.String key, int defaultValue)
  int getInt_1(jni.JlString key, int defaultValue) =>
      _getInt_1(reference, key.reference, defaultValue);

  static final _getLong = jlookup<
          ffi.NativeFunction<
              ffi.Int64 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getLong")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getLong(java.lang.String key)
  int getLong(jni.JlString key) => _getLong(reference, key.reference);

  static final _getLong_1 = jlookup<
          ffi.NativeFunction<
              ffi.Int64 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_BaseBundle_getLong_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getLong(java.lang.String key, long defaultValue)
  int getLong_1(jni.JlString key, int defaultValue) =>
      _getLong_1(reference, key.reference, defaultValue);

  static final _getDouble = jlookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getDouble")
      .asFunction<
          double Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public double getDouble(java.lang.String key)
  double getDouble(jni.JlString key) => _getDouble(reference, key.reference);

  static final _getDouble_1 = jlookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("android_os_BaseBundle_getDouble_1")
      .asFunction<
          double Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public double getDouble(java.lang.String key, double defaultValue)
  double getDouble_1(jni.JlString key, double defaultValue) =>
      _getDouble_1(reference, key.reference, defaultValue);

  static final _getString = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getString")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getString(java.lang.String key)
  jni.JlString getString(jni.JlString key) =>
      jni.JlString.fromRef(_getString(reference, key.reference));

  static final _getString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getString_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getString(java.lang.String key, java.lang.String defaultValue)
  jni.JlString getString_1(jni.JlString key, jni.JlString defaultValue) =>
      jni.JlString.fromRef(
          _getString_1(reference, key.reference, defaultValue.reference));

  static final _getBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_getBooleanArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] getBooleanArray(java.lang.String key)
  jni.JlObject getBooleanArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getBooleanArray(reference, key.reference));

  static final _getIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getIntArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getIntArray(java.lang.String key)
  jni.JlObject getIntArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getIntArray(reference, key.reference));

  static final _getLongArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_BaseBundle_getLongArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long[] getLongArray(java.lang.String key)
  jni.JlObject getLongArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getLongArray(reference, key.reference));

  static final _getDoubleArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_getDoubleArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public double[] getDoubleArray(java.lang.String key)
  jni.JlObject getDoubleArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getDoubleArray(reference, key.reference));

  static final _getStringArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_BaseBundle_getStringArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getStringArray(java.lang.String key)
  jni.JlObject getStringArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getStringArray(reference, key.reference));
}

class RecoverySystem extends jni.JlObject {
  RecoverySystem.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_RecoverySystem_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  RecoverySystem() : super.fromRef(_ctor());

  static final _verifyPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_RecoverySystem_verifyPackage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void verifyPackage(java.io.File packageFile, android.os.RecoverySystem.ProgressListener listener, java.io.File deviceCertsZipFile)
  static void verifyPackage(
          jni.JlObject packageFile,
          RecoverySystem_ProgressListener listener,
          jni.JlObject deviceCertsZipFile) =>
      _verifyPackage(packageFile.reference, listener.reference,
          deviceCertsZipFile.reference);

  static final _installPackage = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_RecoverySystem_installPackage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void installPackage(android.content.Context context, java.io.File packageFile)
  static void installPackage(
          content.Context context, jni.JlObject packageFile) =>
      _installPackage(context.reference, packageFile.reference);

  static final _rebootWipeUserData =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RecoverySystem_rebootWipeUserData")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void rebootWipeUserData(android.content.Context context)
  static void rebootWipeUserData(content.Context context) =>
      _rebootWipeUserData(context.reference);

  static final _rebootWipeCache =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RecoverySystem_rebootWipeCache")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void rebootWipeCache(android.content.Context context)
  static void rebootWipeCache(content.Context context) =>
      _rebootWipeCache(context.reference);
}

class RecoverySystem_ProgressListener extends jni.JlObject {
  RecoverySystem_ProgressListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onProgress = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_RecoverySystem__ProgressListener_onProgress")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void onProgress(int progress)
  void onProgress(int progress) => _onProgress(reference, progress);
}

class IBinder extends jni.JlObject {
  IBinder.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int DUMP_TRANSACTION
  static const DUMP_TRANSACTION = 1598311760;

  /// from: static public final int FIRST_CALL_TRANSACTION
  static const FIRST_CALL_TRANSACTION = 1;

  /// from: static public final int FLAG_ONEWAY
  static const FLAG_ONEWAY = 1;

  /// from: static public final int INTERFACE_TRANSACTION
  static const INTERFACE_TRANSACTION = 1598968902;

  /// from: static public final int LAST_CALL_TRANSACTION
  static const LAST_CALL_TRANSACTION = 16777215;

  /// from: static public final int LIKE_TRANSACTION
  static const LIKE_TRANSACTION = 1598835019;

  /// from: static public final int PING_TRANSACTION
  static const PING_TRANSACTION = 1599098439;

  /// from: static public final int TWEET_TRANSACTION
  static const TWEET_TRANSACTION = 1599362900;

  static final _getInterfaceDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_IBinder_getInterfaceDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getInterfaceDescriptor()
  jni.JlString getInterfaceDescriptor() =>
      jni.JlString.fromRef(_getInterfaceDescriptor(reference));

  static final _pingBinder =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_IBinder_pingBinder")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean pingBinder()
  bool pingBinder() => _pingBinder(reference) != 0;

  static final _isBinderAlive =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_IBinder_isBinderAlive")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isBinderAlive()
  bool isBinderAlive() => _isBinderAlive(reference) != 0;

  static final _queryLocalInterface = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_IBinder_queryLocalInterface")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.IInterface queryLocalInterface(java.lang.String descriptor)
  IInterface queryLocalInterface(jni.JlString descriptor) =>
      IInterface.fromRef(_queryLocalInterface(reference, descriptor.reference));

  static final _dump = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_IBinder_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void dump(java.io.FileDescriptor fd, java.lang.String[] args)
  void dump(jni.JlObject fd, jni.JlObject args) =>
      _dump(reference, fd.reference, args.reference);

  static final _dumpAsync = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_IBinder_dumpAsync")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void dumpAsync(java.io.FileDescriptor fd, java.lang.String[] args)
  void dumpAsync(jni.JlObject fd, jni.JlObject args) =>
      _dumpAsync(reference, fd.reference, args.reference);

  static final _transact = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_IBinder_transact")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean transact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
  bool transact(int code, Parcel data, Parcel reply, int flags) =>
      _transact(reference, code, data.reference, reply.reference, flags) != 0;

  static final _linkToDeath = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_IBinder_linkToDeath")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void linkToDeath(android.os.IBinder.DeathRecipient recipient, int flags)
  void linkToDeath(IBinder_DeathRecipient recipient, int flags) =>
      _linkToDeath(reference, recipient.reference, flags);

  static final _unlinkToDeath = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_IBinder_unlinkToDeath")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean unlinkToDeath(android.os.IBinder.DeathRecipient recipient, int flags)
  bool unlinkToDeath(IBinder_DeathRecipient recipient, int flags) =>
      _unlinkToDeath(reference, recipient.reference, flags) != 0;
}

class IBinder_DeathRecipient extends jni.JlObject {
  IBinder_DeathRecipient.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _binderDied =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_IBinder__DeathRecipient_binderDied")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void binderDied()
  void binderDied() => _binderDied(reference);
}

class TestLooperManager extends jni.JlObject {
  TestLooperManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_TestLooperManager_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Looper looper)
  TestLooperManager(Looper looper) : super.fromRef(_ctor(looper.reference));

  static final _getMessageQueue = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_TestLooperManager_getMessageQueue")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.MessageQueue getMessageQueue()
  MessageQueue getMessageQueue() =>
      MessageQueue.fromRef(_getMessageQueue(reference));

  static final _next = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_TestLooperManager_next")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Message next()
  Message next() => Message.fromRef(_next(reference));

  static final _release =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_TestLooperManager_release")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void release()
  void release() => _release(reference);

  static final _execute = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_TestLooperManager_execute")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void execute(android.os.Message message)
  void execute(Message message) => _execute(reference, message.reference);

  static final _recycle = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_TestLooperManager_recycle")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void recycle(android.os.Message msg)
  void recycle(Message msg) => _recycle(reference, msg.reference);

  static final _hasMessages = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_TestLooperManager_hasMessages")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasMessages(android.os.Handler h, java.lang.Object object, int what)
  bool hasMessages(Handler h, jni.JlObject object, int what) =>
      _hasMessages(reference, h.reference, object.reference, what) != 0;

  static final _hasMessages_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_TestLooperManager_hasMessages_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasMessages(android.os.Handler h, java.lang.Object object, java.lang.Runnable r)
  bool hasMessages_1(Handler h, jni.JlObject object, jni.JlObject r) =>
      _hasMessages_1(reference, h.reference, object.reference, r.reference) !=
      0;
}

class AsyncTask extends jni.JlObject {
  AsyncTask.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.util.concurrent.Executor SERIAL_EXECUTOR
  static final _getSERIAL_EXECUTOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_AsyncTask_SERIAL_EXECUTOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get SERIAL_EXECUTOR =>
      jni.JlObject.fromRef(_getSERIAL_EXECUTOR());

  /// from: static public final java.util.concurrent.Executor THREAD_POOL_EXECUTOR
  static final _getTHREAD_POOL_EXECUTOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_AsyncTask_THREAD_POOL_EXECUTOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get THREAD_POOL_EXECUTOR =>
      jni.JlObject.fromRef(_getTHREAD_POOL_EXECUTOR());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_AsyncTask_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  AsyncTask() : super.fromRef(_ctor());

  static final _getStatus = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_AsyncTask_getStatus")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.AsyncTask.Status getStatus()
  AsyncTask_Status getStatus() =>
      AsyncTask_Status.fromRef(_getStatus(reference));

  static final _onPreExecute =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_AsyncTask_onPreExecute")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPreExecute()
  void onPreExecute() => _onPreExecute(reference);

  static final _onProgressUpdate = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_AsyncTask_onProgressUpdate")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onProgressUpdate(Progress[] values)
  void onProgressUpdate(jni.JlObject values) =>
      _onProgressUpdate(reference, values.reference);

  static final _onCancelled_1 =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_AsyncTask_onCancelled_1")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onCancelled()
  void onCancelled_1() => _onCancelled_1(reference);

  static final _isCancelled =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_AsyncTask_isCancelled")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isCancelled()
  bool isCancelled() => _isCancelled(reference) != 0;

  static final _cancel = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_AsyncTask_cancel")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean cancel(boolean mayInterruptIfRunning)
  bool cancel(bool mayInterruptIfRunning) =>
      _cancel(reference, mayInterruptIfRunning ? 1 : 0) != 0;

  static final _execute = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_AsyncTask_execute")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.AsyncTask<Params,Progress,Result> execute(Params[] params)
  AsyncTask execute(jni.JlObject params) =>
      AsyncTask.fromRef(_execute(reference, params.reference));

  static final _executeOnExecutor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_AsyncTask_executeOnExecutor")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.AsyncTask<Params,Progress,Result> executeOnExecutor(java.util.concurrent.Executor exec, Params[] params)
  AsyncTask executeOnExecutor(jni.JlObject exec, jni.JlObject params) =>
      AsyncTask.fromRef(
          _executeOnExecutor(reference, exec.reference, params.reference));

  static final _execute_1 =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_AsyncTask_execute_1")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void execute(java.lang.Runnable runnable)
  static void execute_1(jni.JlObject runnable) =>
      _execute_1(runnable.reference);

  static final _publishProgress = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_AsyncTask_publishProgress")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected final void publishProgress(Progress[] values)
  void publishProgress(jni.JlObject values) =>
      _publishProgress(reference, values.reference);
}

class AsyncTask_Status extends jni.JlObject {
  AsyncTask_Status.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _values =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_AsyncTask__Status_values")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.AsyncTask.Status[] values()
  static jni.JlObject values() => jni.JlObject.fromRef(_values());

  static final _valueOf = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_AsyncTask__Status_valueOf")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.AsyncTask.Status valueOf(java.lang.String name)
  static AsyncTask_Status valueOf(jni.JlString name) =>
      AsyncTask_Status.fromRef(_valueOf(name.reference));

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_AsyncTask__Status_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: private void <init>()
  AsyncTask_Status() : super.fromRef(_ctor());
}

class ParcelFileDescriptor extends jni.JlObject {
  ParcelFileDescriptor.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.ParcelFileDescriptor> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_ParcelFileDescriptor_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 33554432;

  /// from: static public final int MODE_CREATE
  static const MODE_CREATE = 134217728;

  /// from: static public final int MODE_READ_ONLY
  static const MODE_READ_ONLY = 268435456;

  /// from: static public final int MODE_READ_WRITE
  static const MODE_READ_WRITE = 805306368;

  /// from: static public final int MODE_TRUNCATE
  static const MODE_TRUNCATE = 67108864;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;

  /// from: static public final int MODE_WRITE_ONLY
  static const MODE_WRITE_ONLY = 536870912;

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.ParcelFileDescriptor wrapped)
  ParcelFileDescriptor(ParcelFileDescriptor wrapped)
      : super.fromRef(_ctor(wrapped.reference));

  static final _open = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_ParcelFileDescriptor_open")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.os.ParcelFileDescriptor open(java.io.File file, int mode)
  static ParcelFileDescriptor open(jni.JlObject file, int mode) =>
      ParcelFileDescriptor.fromRef(_open(file.reference, mode));

  static final _open_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_open_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor open(java.io.File file, int mode, android.os.Handler handler, android.os.ParcelFileDescriptor.OnCloseListener listener)
  static ParcelFileDescriptor open_1(jni.JlObject file, int mode,
          Handler handler, ParcelFileDescriptor_OnCloseListener listener) =>
      ParcelFileDescriptor.fromRef(
          _open_1(file.reference, mode, handler.reference, listener.reference));

  static final _dup = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_dup")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor dup(java.io.FileDescriptor orig)
  static ParcelFileDescriptor dup(jni.JlObject orig) =>
      ParcelFileDescriptor.fromRef(_dup(orig.reference));

  static final _dup_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_dup_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.ParcelFileDescriptor dup()
  ParcelFileDescriptor dup_1() =>
      ParcelFileDescriptor.fromRef(_dup_1(reference));

  static final _fromFd =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_os_ParcelFileDescriptor_fromFd")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: static public android.os.ParcelFileDescriptor fromFd(int fd)
  static ParcelFileDescriptor fromFd(int fd) =>
      ParcelFileDescriptor.fromRef(_fromFd(fd));

  static final _adoptFd =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_os_ParcelFileDescriptor_adoptFd")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: static public android.os.ParcelFileDescriptor adoptFd(int fd)
  static ParcelFileDescriptor adoptFd(int fd) =>
      ParcelFileDescriptor.fromRef(_adoptFd(fd));

  static final _fromSocket = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_fromSocket")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor fromSocket(java.net.Socket socket)
  static ParcelFileDescriptor fromSocket(jni.JlObject socket) =>
      ParcelFileDescriptor.fromRef(_fromSocket(socket.reference));

  static final _fromDatagramSocket = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_fromDatagramSocket")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket datagramSocket)
  static ParcelFileDescriptor fromDatagramSocket(jni.JlObject datagramSocket) =>
      ParcelFileDescriptor.fromRef(
          _fromDatagramSocket(datagramSocket.reference));

  static final _createPipe =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ParcelFileDescriptor_createPipe")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.ParcelFileDescriptor[] createPipe()
  static jni.JlObject createPipe() => jni.JlObject.fromRef(_createPipe());

  static final _createReliablePipe =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ParcelFileDescriptor_createReliablePipe")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.ParcelFileDescriptor[] createReliablePipe()
  static jni.JlObject createReliablePipe() =>
      jni.JlObject.fromRef(_createReliablePipe());

  static final _createSocketPair =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ParcelFileDescriptor_createSocketPair")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.ParcelFileDescriptor[] createSocketPair()
  static jni.JlObject createSocketPair() =>
      jni.JlObject.fromRef(_createSocketPair());

  static final _createReliableSocketPair =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ParcelFileDescriptor_createReliableSocketPair")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.ParcelFileDescriptor[] createReliableSocketPair()
  static jni.JlObject createReliableSocketPair() =>
      jni.JlObject.fromRef(_createReliableSocketPair());

  static final _parseMode =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_parseMode")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public int parseMode(java.lang.String mode)
  static int parseMode(jni.JlString mode) => _parseMode(mode.reference);

  static final _getFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_getFileDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.FileDescriptor getFileDescriptor()
  jni.JlObject getFileDescriptor() =>
      jni.JlObject.fromRef(_getFileDescriptor(reference));

  static final _getStatSize =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_getStatSize")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getStatSize()
  int getStatSize() => _getStatSize(reference);

  static final _getFd =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_getFd")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFd()
  int getFd() => _getFd(reference);

  static final _detachFd =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_detachFd")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int detachFd()
  int detachFd() => _detachFd(reference);

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _closeWithError = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_closeWithError")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void closeWithError(java.lang.String msg)
  void closeWithError(jni.JlString msg) =>
      _closeWithError(reference, msg.reference);

  static final _canDetectErrors =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_canDetectErrors")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean canDetectErrors()
  bool canDetectErrors() => _canDetectErrors(reference) != 0;

  static final _checkError =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_checkError")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void checkError()
  void checkError() => _checkError(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_ParcelFileDescriptor_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class ParcelFileDescriptor_OnCloseListener extends jni.JlObject {
  ParcelFileDescriptor_OnCloseListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onClose = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor__OnCloseListener_onClose")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onClose(java.io.IOException e)
  void onClose(jni.JlObject e) => _onClose(reference, e.reference);
}

class ParcelFileDescriptor_FileDescriptorDetachedException
    extends jni.JlObject {
  ParcelFileDescriptor_FileDescriptorDetachedException.fromRef(
      ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          "android_os_ParcelFileDescriptor__FileDescriptorDetachedException_new")
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  ParcelFileDescriptor_FileDescriptorDetachedException()
      : super.fromRef(_ctor());
}

class ParcelFileDescriptor_AutoCloseOutputStream extends jni.JlObject {
  ParcelFileDescriptor_AutoCloseOutputStream.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor__AutoCloseOutputStream_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.ParcelFileDescriptor pfd)
  ParcelFileDescriptor_AutoCloseOutputStream(ParcelFileDescriptor pfd)
      : super.fromRef(_ctor(pfd.reference));

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor__AutoCloseOutputStream_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);
}

class ParcelFileDescriptor_AutoCloseInputStream extends jni.JlObject {
  ParcelFileDescriptor_AutoCloseInputStream.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFileDescriptor__AutoCloseInputStream_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.ParcelFileDescriptor pfd)
  ParcelFileDescriptor_AutoCloseInputStream(ParcelFileDescriptor pfd)
      : super.fromRef(_ctor(pfd.reference));

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelFileDescriptor__AutoCloseInputStream_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);
}

class DeadSystemException extends DeadObjectException {
  DeadSystemException.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_DeadSystemException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  DeadSystemException() : super.fromRef(_ctor());
}

class Build extends jni.JlObject {
  Build.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String BOARD
  static final _getBOARD =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_BOARD")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get BOARD => jni.JlString.fromRef(_getBOARD());

  /// from: static public final java.lang.String BOOTLOADER
  static final _getBOOTLOADER =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_BOOTLOADER")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get BOOTLOADER => jni.JlString.fromRef(_getBOOTLOADER());

  /// from: static public final java.lang.String BRAND
  static final _getBRAND =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_BRAND")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get BRAND => jni.JlString.fromRef(_getBRAND());

  /// from: static public final java.lang.String CPU_ABI
  static final _getCPU_ABI =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_CPU_ABI")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get CPU_ABI => jni.JlString.fromRef(_getCPU_ABI());

  /// from: static public final java.lang.String CPU_ABI2
  static final _getCPU_ABI2 =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_CPU_ABI2")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get CPU_ABI2 => jni.JlString.fromRef(_getCPU_ABI2());

  /// from: static public final java.lang.String DEVICE
  static final _getDEVICE =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_DEVICE")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DEVICE => jni.JlString.fromRef(_getDEVICE());

  /// from: static public final java.lang.String DISPLAY
  static final _getDISPLAY =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_DISPLAY")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DISPLAY => jni.JlString.fromRef(_getDISPLAY());

  /// from: static public final java.lang.String FINGERPRINT
  static final _getFINGERPRINT =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_FINGERPRINT")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get FINGERPRINT =>
      jni.JlString.fromRef(_getFINGERPRINT());

  /// from: static public final java.lang.String HARDWARE
  static final _getHARDWARE =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_HARDWARE")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get HARDWARE => jni.JlString.fromRef(_getHARDWARE());

  /// from: static public final java.lang.String HOST
  static final _getHOST =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_HOST")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get HOST => jni.JlString.fromRef(_getHOST());

  /// from: static public final java.lang.String ID
  static final _getID =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_ID")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get ID => jni.JlString.fromRef(_getID());

  /// from: static public final java.lang.String MANUFACTURER
  static final _getMANUFACTURER =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_MANUFACTURER")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get MANUFACTURER =>
      jni.JlString.fromRef(_getMANUFACTURER());

  /// from: static public final java.lang.String MODEL
  static final _getMODEL =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_MODEL")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get MODEL => jni.JlString.fromRef(_getMODEL());

  /// from: static public final java.lang.String PRODUCT
  static final _getPRODUCT =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_PRODUCT")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get PRODUCT => jni.JlString.fromRef(_getPRODUCT());

  /// from: static public final java.lang.String RADIO
  static final _getRADIO =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_RADIO")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get RADIO => jni.JlString.fromRef(_getRADIO());

  /// from: static public final java.lang.String SERIAL
  static final _getSERIAL =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_SERIAL")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get SERIAL => jni.JlString.fromRef(_getSERIAL());

  /// from: static public final java.lang.String[] SUPPORTED_32_BIT_ABIS
  static final _getSUPPORTED_32_BIT_ABIS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_SUPPORTED_32_BIT_ABIS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get SUPPORTED_32_BIT_ABIS =>
      jni.JlObject.fromRef(_getSUPPORTED_32_BIT_ABIS());

  /// from: static public final java.lang.String[] SUPPORTED_64_BIT_ABIS
  static final _getSUPPORTED_64_BIT_ABIS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_SUPPORTED_64_BIT_ABIS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get SUPPORTED_64_BIT_ABIS =>
      jni.JlObject.fromRef(_getSUPPORTED_64_BIT_ABIS());

  /// from: static public final java.lang.String[] SUPPORTED_ABIS
  static final _getSUPPORTED_ABIS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_SUPPORTED_ABIS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get SUPPORTED_ABIS =>
      jni.JlObject.fromRef(_getSUPPORTED_ABIS());

  /// from: static public final java.lang.String TAGS
  static final _getTAGS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_TAGS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get TAGS => jni.JlString.fromRef(_getTAGS());

  /// from: static public final long TIME
  static final _getTIME = jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          "get_android_os_Build_TIME")
      .asFunction<int Function()>();
  static int get TIME => _getTIME();

  /// from: static public final java.lang.String TYPE
  static final _getTYPE =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_TYPE")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get TYPE => jni.JlString.fromRef(_getTYPE());

  /// from: static public final java.lang.String UNKNOWN
  static const UNKNOWN = "unknown";

  /// from: static public final java.lang.String USER
  static final _getUSER =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build_USER")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get USER => jni.JlString.fromRef(_getUSER());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Build_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Build() : super.fromRef(_ctor());

  static final _getSerial =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Build_getSerial")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.lang.String getSerial()
  static jni.JlString getSerial() => jni.JlString.fromRef(_getSerial());

  static final _getRadioVersion =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Build_getRadioVersion")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.lang.String getRadioVersion()
  static jni.JlString getRadioVersion() =>
      jni.JlString.fromRef(_getRadioVersion());
}

class Build_VERSION_CODES extends jni.JlObject {
  Build_VERSION_CODES.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int BASE
  static const BASE = 1;

  /// from: static public final int BASE_1_1
  static const BASE_1_1 = 2;

  /// from: static public final int CUPCAKE
  static const CUPCAKE = 3;

  /// from: static public final int CUR_DEVELOPMENT
  static const CUR_DEVELOPMENT = 10000;

  /// from: static public final int DONUT
  static const DONUT = 4;

  /// from: static public final int ECLAIR
  static const ECLAIR = 5;

  /// from: static public final int ECLAIR_0_1
  static const ECLAIR_0_1 = 6;

  /// from: static public final int ECLAIR_MR1
  static const ECLAIR_MR1 = 7;

  /// from: static public final int FROYO
  static const FROYO = 8;

  /// from: static public final int GINGERBREAD
  static const GINGERBREAD = 9;

  /// from: static public final int GINGERBREAD_MR1
  static const GINGERBREAD_MR1 = 10;

  /// from: static public final int HONEYCOMB
  static const HONEYCOMB = 11;

  /// from: static public final int HONEYCOMB_MR1
  static const HONEYCOMB_MR1 = 12;

  /// from: static public final int HONEYCOMB_MR2
  static const HONEYCOMB_MR2 = 13;

  /// from: static public final int ICE_CREAM_SANDWICH
  static const ICE_CREAM_SANDWICH = 14;

  /// from: static public final int ICE_CREAM_SANDWICH_MR1
  static const ICE_CREAM_SANDWICH_MR1 = 15;

  /// from: static public final int JELLY_BEAN
  static const JELLY_BEAN = 16;

  /// from: static public final int JELLY_BEAN_MR1
  static const JELLY_BEAN_MR1 = 17;

  /// from: static public final int JELLY_BEAN_MR2
  static const JELLY_BEAN_MR2 = 18;

  /// from: static public final int KITKAT
  static const KITKAT = 19;

  /// from: static public final int KITKAT_WATCH
  static const KITKAT_WATCH = 20;

  /// from: static public final int LOLLIPOP
  static const LOLLIPOP = 21;

  /// from: static public final int LOLLIPOP_MR1
  static const LOLLIPOP_MR1 = 22;

  /// from: static public final int M
  static const M = 23;

  /// from: static public final int N
  static const N = 24;

  /// from: static public final int N_MR1
  static const N_MR1 = 25;

  /// from: static public final int O
  static const O = 26;

  /// from: static public final int O_MR1
  static const O_MR1 = 27;

  /// from: static public final int P
  static const P = 28;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Build__VERSION_CODES_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Build_VERSION_CODES() : super.fromRef(_ctor());
}

class Build_VERSION extends jni.JlObject {
  Build_VERSION.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String BASE_OS
  static final _getBASE_OS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_BASE_OS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get BASE_OS => jni.JlString.fromRef(_getBASE_OS());

  /// from: static public final java.lang.String CODENAME
  static final _getCODENAME =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_CODENAME")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get CODENAME => jni.JlString.fromRef(_getCODENAME());

  /// from: static public final java.lang.String INCREMENTAL
  static final _getINCREMENTAL =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_INCREMENTAL")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get INCREMENTAL =>
      jni.JlString.fromRef(_getINCREMENTAL());

  /// from: static public final int PREVIEW_SDK_INT
  static final _getPREVIEW_SDK_INT =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "get_android_os_Build__VERSION_PREVIEW_SDK_INT")
          .asFunction<int Function()>();
  static int get PREVIEW_SDK_INT => _getPREVIEW_SDK_INT();

  /// from: static public final java.lang.String RELEASE
  static final _getRELEASE =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_RELEASE")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get RELEASE => jni.JlString.fromRef(_getRELEASE());

  /// from: static public final java.lang.String SDK
  static final _getSDK =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_SDK")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get SDK => jni.JlString.fromRef(_getSDK());

  /// from: static public final int SDK_INT
  static final _getSDK_INT = jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          "get_android_os_Build__VERSION_SDK_INT")
      .asFunction<int Function()>();
  static int get SDK_INT => _getSDK_INT();

  /// from: static public final java.lang.String SECURITY_PATCH
  static final _getSECURITY_PATCH =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Build__VERSION_SECURITY_PATCH")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get SECURITY_PATCH =>
      jni.JlString.fromRef(_getSECURITY_PATCH());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Build__VERSION_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Build_VERSION() : super.fromRef(_ctor());
}

class ParcelUuid extends jni.JlObject {
  ParcelUuid.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.ParcelUuid> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_ParcelUuid_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_ParcelUuid_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.UUID uuid)
  ParcelUuid(jni.JlObject uuid) : super.fromRef(_ctor(uuid.reference));

  static final _fromString = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_ParcelUuid_fromString")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelUuid fromString(java.lang.String uuid)
  static ParcelUuid fromString(jni.JlString uuid) =>
      ParcelUuid.fromRef(_fromString(uuid.reference));

  static final _getUuid = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_ParcelUuid_getUuid")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.UUID getUuid()
  jni.JlObject getUuid() => jni.JlObject.fromRef(_getUuid(reference));

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_ParcelUuid_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelUuid_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _equals_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_ParcelUuid_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals_1(jni.JlObject object) =>
      _equals_1(reference, object.reference) != 0;

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ParcelUuid_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_ParcelUuid_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class LocaleList extends jni.JlObject {
  LocaleList.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.LocaleList> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_LocaleList_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_LocaleList_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Locale[] list)
  LocaleList(jni.JlObject list) : super.fromRef(_ctor(list.reference));

  static final _get_ = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_LocaleList_get_")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.Locale get(int index)
  jni.JlObject get_(int index) => jni.JlObject.fromRef(_get_(reference, index));

  static final _isEmpty =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_LocaleList_isEmpty")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEmpty()
  bool isEmpty() => _isEmpty(reference) != 0;

  static final _size =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_LocaleList_size")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int size()
  int size() => _size(reference);

  static final _indexOf = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_LocaleList_indexOf")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public int indexOf(java.util.Locale locale)
  int indexOf(jni.JlObject locale) => _indexOf(reference, locale.reference);

  static final _equals_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_LocaleList_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object other)
  bool equals_1(jni.JlObject other) =>
      _equals_1(reference, other.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_LocaleList_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_LocaleList_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_LocaleList_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_LocaleList_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int parcelableFlags)
  void writeToParcel(Parcel dest, int parcelableFlags) =>
      _writeToParcel(reference, dest.reference, parcelableFlags);

  static final _toLanguageTags = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_LocaleList_toLanguageTags")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toLanguageTags()
  jni.JlString toLanguageTags() =>
      jni.JlString.fromRef(_toLanguageTags(reference));

  static final _getEmptyLocaleList =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_LocaleList_getEmptyLocaleList")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.LocaleList getEmptyLocaleList()
  static LocaleList getEmptyLocaleList() =>
      LocaleList.fromRef(_getEmptyLocaleList());

  static final _forLanguageTags = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_LocaleList_forLanguageTags")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.LocaleList forLanguageTags(java.lang.String list)
  static LocaleList forLanguageTags(jni.JlString list) =>
      LocaleList.fromRef(_forLanguageTags(list.reference));

  static final _getFirstMatch = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_LocaleList_getFirstMatch")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Locale getFirstMatch(java.lang.String[] supportedLocales)
  jni.JlObject getFirstMatch(jni.JlObject supportedLocales) =>
      jni.JlObject.fromRef(
          _getFirstMatch(reference, supportedLocales.reference));

  static final _getDefault =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_LocaleList_getDefault")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.LocaleList getDefault()
  static LocaleList getDefault() => LocaleList.fromRef(_getDefault());

  static final _getAdjustedDefault =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_LocaleList_getAdjustedDefault")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.LocaleList getAdjustedDefault()
  static LocaleList getAdjustedDefault() =>
      LocaleList.fromRef(_getAdjustedDefault());

  static final _setDefault =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_LocaleList_setDefault")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setDefault(android.os.LocaleList locales)
  static void setDefault(LocaleList locales) => _setDefault(locales.reference);
}

class Parcel extends jni.JlObject {
  Parcel.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<java.lang.String> STRING_CREATOR
  static final _getSTRING_CREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Parcel_STRING_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get STRING_CREATOR =>
      Parcelable_Creator.fromRef(_getSTRING_CREATOR());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int64)>>(
              "android_os_Parcel_new")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: void <init>(long nativePtr)
  Parcel(int nativePtr) : super.fromRef(_ctor(nativePtr));

  static final _obtain =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Parcel_obtain")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.Parcel obtain()
  static Parcel obtain() => Parcel.fromRef(_obtain());

  static final _recycle =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_recycle")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recycle()
  void recycle() => _recycle(reference);

  static final _dataSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_dataSize")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int dataSize()
  int dataSize() => _dataSize(reference);

  static final _dataAvail =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_dataAvail")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int dataAvail()
  int dataAvail() => _dataAvail(reference);

  static final _dataPosition =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_dataPosition")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int dataPosition()
  int dataPosition() => _dataPosition(reference);

  static final _dataCapacity =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_dataCapacity")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int dataCapacity()
  int dataCapacity() => _dataCapacity(reference);

  static final _setDataSize = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_setDataSize")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setDataSize(int size)
  void setDataSize(int size) => _setDataSize(reference, size);

  static final _setDataPosition = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_setDataPosition")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setDataPosition(int pos)
  void setDataPosition(int pos) => _setDataPosition(reference, pos);

  static final _setDataCapacity = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_setDataCapacity")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setDataCapacity(int size)
  void setDataCapacity(int size) => _setDataCapacity(reference, size);

  static final _marshall = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_marshall")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] marshall()
  jni.JlObject marshall() => jni.JlObject.fromRef(_marshall(reference));

  static final _unmarshall = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32, ffi.Int32)>>("android_os_Parcel_unmarshall")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void unmarshall(byte[] data, int offset, int length)
  void unmarshall(jni.JlObject data, int offset, int length) =>
      _unmarshall(reference, data.reference, offset, length);

  static final _appendFrom = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32, ffi.Int32)>>("android_os_Parcel_appendFrom")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void appendFrom(android.os.Parcel parcel, int offset, int length)
  void appendFrom(Parcel parcel, int offset, int length) =>
      _appendFrom(reference, parcel.reference, offset, length);

  static final _hasFileDescriptors =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_hasFileDescriptors")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() => _hasFileDescriptors(reference) != 0;

  static final _writeInterfaceToken = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeInterfaceToken")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeInterfaceToken(java.lang.String interfaceName)
  void writeInterfaceToken(jni.JlString interfaceName) =>
      _writeInterfaceToken(reference, interfaceName.reference);

  static final _enforceInterface = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_enforceInterface")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void enforceInterface(java.lang.String interfaceName)
  void enforceInterface(jni.JlString interfaceName) =>
      _enforceInterface(reference, interfaceName.reference);

  static final _writeByteArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeByteArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeByteArray(byte[] b)
  void writeByteArray(jni.JlObject b) =>
      _writeByteArray(reference, b.reference);

  static final _writeByteArray_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32, ffi.Int32)>>("android_os_Parcel_writeByteArray_1")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void writeByteArray(byte[] b, int offset, int len)
  void writeByteArray_1(jni.JlObject b, int offset, int len) =>
      _writeByteArray_1(reference, b.reference, offset, len);

  static final _writeInt = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_writeInt")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeInt(int val)
  void writeInt(int val) => _writeInt(reference, val);

  static final _writeLong = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Parcel_writeLong")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeLong(long val)
  void writeLong(int val) => _writeLong(reference, val);

  static final _writeFloat = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("android_os_Parcel_writeFloat")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void writeFloat(float val)
  void writeFloat(double val) => _writeFloat(reference, val);

  static final _writeDouble = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Double)>>("android_os_Parcel_writeDouble")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, double)>();

  /// from: public void writeDouble(double val)
  void writeDouble(double val) => _writeDouble(reference, val);

  static final _writeString = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeString")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeString(java.lang.String val)
  void writeString(jni.JlString val) => _writeString(reference, val.reference);

  static final _writeStrongBinder = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeStrongBinder")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeStrongBinder(android.os.IBinder val)
  void writeStrongBinder(IBinder val) =>
      _writeStrongBinder(reference, val.reference);

  static final _writeStrongInterface = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeStrongInterface")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeStrongInterface(android.os.IInterface val)
  void writeStrongInterface(IInterface val) =>
      _writeStrongInterface(reference, val.reference);

  static final _writeFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeFileDescriptor")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeFileDescriptor(java.io.FileDescriptor val)
  void writeFileDescriptor(jni.JlObject val) =>
      _writeFileDescriptor(reference, val.reference);

  static final _writeByte = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int8)>>("android_os_Parcel_writeByte")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeByte(byte val)
  void writeByte(int val) => _writeByte(reference, val);

  static final _writeMap = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeMap")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeMap(java.util.Map val)
  void writeMap(jni.JlObject val) => _writeMap(reference, val.reference);

  static final _writeBundle = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeBundle")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeBundle(android.os.Bundle val)
  void writeBundle(Bundle val) => _writeBundle(reference, val.reference);

  static final _writePersistableBundle = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writePersistableBundle")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writePersistableBundle(android.os.PersistableBundle val)
  void writePersistableBundle(PersistableBundle val) =>
      _writePersistableBundle(reference, val.reference);

  static final _writeSize = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeSize")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeSize(android.util.Size val)
  void writeSize(jni.JlObject val) => _writeSize(reference, val.reference);

  static final _writeSizeF = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeSizeF")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeSizeF(android.util.SizeF val)
  void writeSizeF(jni.JlObject val) => _writeSizeF(reference, val.reference);

  static final _writeList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeList(java.util.List val)
  void writeList(jni.JlObject val) => _writeList(reference, val.reference);

  static final _writeArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeArray(java.lang.Object[] val)
  void writeArray(jni.JlObject val) => _writeArray(reference, val.reference);

  static final _writeSparseArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeSparseArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeSparseArray(android.util.SparseArray<java.lang.Object> val)
  void writeSparseArray(jni.JlObject val) =>
      _writeSparseArray(reference, val.reference);

  static final _writeSparseBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeSparseBooleanArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeSparseBooleanArray(android.util.SparseBooleanArray val)
  void writeSparseBooleanArray(jni.JlObject val) =>
      _writeSparseBooleanArray(reference, val.reference);

  static final _writeBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeBooleanArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeBooleanArray(boolean[] val)
  void writeBooleanArray(jni.JlObject val) =>
      _writeBooleanArray(reference, val.reference);

  static final _createBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createBooleanArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] createBooleanArray()
  jni.JlObject createBooleanArray() =>
      jni.JlObject.fromRef(_createBooleanArray(reference));

  static final _readBooleanArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readBooleanArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readBooleanArray(boolean[] val)
  void readBooleanArray(jni.JlObject val) =>
      _readBooleanArray(reference, val.reference);

  static final _writeCharArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeCharArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeCharArray(char[] val)
  void writeCharArray(jni.JlObject val) =>
      _writeCharArray(reference, val.reference);

  static final _createCharArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createCharArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public char[] createCharArray()
  jni.JlObject createCharArray() =>
      jni.JlObject.fromRef(_createCharArray(reference));

  static final _readCharArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readCharArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readCharArray(char[] val)
  void readCharArray(jni.JlObject val) =>
      _readCharArray(reference, val.reference);

  static final _writeIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeIntArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeIntArray(int[] val)
  void writeIntArray(jni.JlObject val) =>
      _writeIntArray(reference, val.reference);

  static final _createIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createIntArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int[] createIntArray()
  jni.JlObject createIntArray() =>
      jni.JlObject.fromRef(_createIntArray(reference));

  static final _readIntArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readIntArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readIntArray(int[] val)
  void readIntArray(jni.JlObject val) =>
      _readIntArray(reference, val.reference);

  static final _writeLongArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeLongArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeLongArray(long[] val)
  void writeLongArray(jni.JlObject val) =>
      _writeLongArray(reference, val.reference);

  static final _createLongArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createLongArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long[] createLongArray()
  jni.JlObject createLongArray() =>
      jni.JlObject.fromRef(_createLongArray(reference));

  static final _readLongArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readLongArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readLongArray(long[] val)
  void readLongArray(jni.JlObject val) =>
      _readLongArray(reference, val.reference);

  static final _writeFloatArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeFloatArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeFloatArray(float[] val)
  void writeFloatArray(jni.JlObject val) =>
      _writeFloatArray(reference, val.reference);

  static final _createFloatArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createFloatArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float[] createFloatArray()
  jni.JlObject createFloatArray() =>
      jni.JlObject.fromRef(_createFloatArray(reference));

  static final _readFloatArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readFloatArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readFloatArray(float[] val)
  void readFloatArray(jni.JlObject val) =>
      _readFloatArray(reference, val.reference);

  static final _writeDoubleArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeDoubleArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeDoubleArray(double[] val)
  void writeDoubleArray(jni.JlObject val) =>
      _writeDoubleArray(reference, val.reference);

  static final _createDoubleArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createDoubleArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double[] createDoubleArray()
  jni.JlObject createDoubleArray() =>
      jni.JlObject.fromRef(_createDoubleArray(reference));

  static final _readDoubleArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readDoubleArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readDoubleArray(double[] val)
  void readDoubleArray(jni.JlObject val) =>
      _readDoubleArray(reference, val.reference);

  static final _writeStringArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeStringArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeStringArray(java.lang.String[] val)
  void writeStringArray(jni.JlObject val) =>
      _writeStringArray(reference, val.reference);

  static final _createStringArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createStringArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] createStringArray()
  jni.JlObject createStringArray() =>
      jni.JlObject.fromRef(_createStringArray(reference));

  static final _readStringArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readStringArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readStringArray(java.lang.String[] val)
  void readStringArray(jni.JlObject val) =>
      _readStringArray(reference, val.reference);

  static final _writeBinderArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeBinderArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeBinderArray(android.os.IBinder[] val)
  void writeBinderArray(jni.JlObject val) =>
      _writeBinderArray(reference, val.reference);

  static final _createBinderArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createBinderArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IBinder[] createBinderArray()
  jni.JlObject createBinderArray() =>
      jni.JlObject.fromRef(_createBinderArray(reference));

  static final _readBinderArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readBinderArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readBinderArray(android.os.IBinder[] val)
  void readBinderArray(jni.JlObject val) =>
      _readBinderArray(reference, val.reference);

  static final _writeTypedList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeTypedList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeTypedList(java.util.List<T> val)
  void writeTypedList(jni.JlObject val) =>
      _writeTypedList(reference, val.reference);

  static final _writeStringList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeStringList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeStringList(java.util.List<java.lang.String> val)
  void writeStringList(jni.JlObject val) =>
      _writeStringList(reference, val.reference);

  static final _writeBinderList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeBinderList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeBinderList(java.util.List<android.os.IBinder> val)
  void writeBinderList(jni.JlObject val) =>
      _writeBinderList(reference, val.reference);

  static final _writeTypedArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_writeTypedArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeTypedArray(T[] val, int parcelableFlags)
  void writeTypedArray(jni.JlObject val, int parcelableFlags) =>
      _writeTypedArray(reference, val.reference, parcelableFlags);

  static final _writeValue = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeValue")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeValue(java.lang.Object v)
  void writeValue(jni.JlObject v) => _writeValue(reference, v.reference);

  static final _writeParcelable = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_writeParcelable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeParcelable(android.os.Parcelable p, int parcelableFlags)
  void writeParcelable(Parcelable p, int parcelableFlags) =>
      _writeParcelable(reference, p.reference, parcelableFlags);

  static final _writeSerializable = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_writeSerializable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeSerializable(java.io.Serializable s)
  void writeSerializable(jni.JlObject s) =>
      _writeSerializable(reference, s.reference);

  static final _writeException = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_writeException")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void writeException(java.lang.Exception e)
  void writeException(jni.JlObject e) =>
      _writeException(reference, e.reference);

  static final _writeNoException =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_writeNoException")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void writeNoException()
  void writeNoException() => _writeNoException(reference);

  static final _readException =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readException")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void readException()
  void readException() => _readException(reference);

  static final _readException_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readException_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void readException(int code, java.lang.String msg)
  void readException_1(int code, jni.JlString msg) =>
      _readException_1(reference, code, msg.reference);

  static final _readInt =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readInt")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int readInt()
  int readInt() => _readInt(reference);

  static final _readLong =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readLong")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long readLong()
  int readLong() => _readLong(reference);

  static final _readFloat =
      jlookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readFloat")
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float readFloat()
  double readFloat() => _readFloat(reference);

  static final _readDouble =
      jlookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readDouble")
          .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  /// from: public double readDouble()
  double readDouble() => _readDouble(reference);

  static final _readString = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readString")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String readString()
  jni.JlString readString() => jni.JlString.fromRef(_readString(reference));

  static final _readStrongBinder = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readStrongBinder")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IBinder readStrongBinder()
  IBinder readStrongBinder() => IBinder.fromRef(_readStrongBinder(reference));

  static final _readFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_readFileDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.ParcelFileDescriptor readFileDescriptor()
  ParcelFileDescriptor readFileDescriptor() =>
      ParcelFileDescriptor.fromRef(_readFileDescriptor(reference));

  static final _readByte =
      jlookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_readByte")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte readByte()
  int readByte() => _readByte(reference);

  static final _readMap = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readMap")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readMap(java.util.Map outVal, java.lang.ClassLoader loader)
  void readMap(jni.JlObject outVal, jni.JlObject loader) =>
      _readMap(reference, outVal.reference, loader.reference);

  static final _readList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readList(java.util.List outVal, java.lang.ClassLoader loader)
  void readList(jni.JlObject outVal, jni.JlObject loader) =>
      _readList(reference, outVal.reference, loader.reference);

  static final _readHashMap = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readHashMap")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.HashMap readHashMap(java.lang.ClassLoader loader)
  jni.JlObject readHashMap(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readHashMap(reference, loader.reference));

  static final _readBundle = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readBundle")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle readBundle()
  Bundle readBundle() => Bundle.fromRef(_readBundle(reference));

  static final _readBundle_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readBundle_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle readBundle(java.lang.ClassLoader loader)
  Bundle readBundle_1(jni.JlObject loader) =>
      Bundle.fromRef(_readBundle_1(reference, loader.reference));

  static final _readPersistableBundle = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_readPersistableBundle")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PersistableBundle readPersistableBundle()
  PersistableBundle readPersistableBundle() =>
      PersistableBundle.fromRef(_readPersistableBundle(reference));

  static final _readPersistableBundle_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_readPersistableBundle_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader loader)
  PersistableBundle readPersistableBundle_1(jni.JlObject loader) =>
      PersistableBundle.fromRef(
          _readPersistableBundle_1(reference, loader.reference));

  static final _readSize = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readSize")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.Size readSize()
  jni.JlObject readSize() => jni.JlObject.fromRef(_readSize(reference));

  static final _readSizeF = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readSizeF")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.SizeF readSizeF()
  jni.JlObject readSizeF() => jni.JlObject.fromRef(_readSizeF(reference));

  static final _createByteArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createByteArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] createByteArray()
  jni.JlObject createByteArray() =>
      jni.JlObject.fromRef(_createByteArray(reference));

  static final _readByteArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readByteArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readByteArray(byte[] val)
  void readByteArray(jni.JlObject val) =>
      _readByteArray(reference, val.reference);

  static final _readArrayList = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList readArrayList(java.lang.ClassLoader loader)
  jni.JlObject readArrayList(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readArrayList(reference, loader.reference));

  static final _readArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] readArray(java.lang.ClassLoader loader)
  jni.JlObject readArray(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readArray(reference, loader.reference));

  static final _readSparseArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readSparseArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.SparseArray readSparseArray(java.lang.ClassLoader loader)
  jni.JlObject readSparseArray(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readSparseArray(reference, loader.reference));

  static final _readSparseBooleanArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_readSparseBooleanArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.SparseBooleanArray readSparseBooleanArray()
  jni.JlObject readSparseBooleanArray() =>
      jni.JlObject.fromRef(_readSparseBooleanArray(reference));

  static final _createTypedArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createTypedArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<T> createTypedArrayList(android.os.Parcelable.Creator<T> c)
  jni.JlObject createTypedArrayList(Parcelable_Creator c) =>
      jni.JlObject.fromRef(_createTypedArrayList(reference, c.reference));

  static final _readTypedList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readTypedList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readTypedList(java.util.List<T> list, android.os.Parcelable.Creator<T> c)
  void readTypedList(jni.JlObject list, Parcelable_Creator c) =>
      _readTypedList(reference, list.reference, c.reference);

  static final _createStringArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createStringArrayList")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<java.lang.String> createStringArrayList()
  jni.JlObject createStringArrayList() =>
      jni.JlObject.fromRef(_createStringArrayList(reference));

  static final _createBinderArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_createBinderArrayList")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<android.os.IBinder> createBinderArrayList()
  jni.JlObject createBinderArrayList() =>
      jni.JlObject.fromRef(_createBinderArrayList(reference));

  static final _readStringList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readStringList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readStringList(java.util.List<java.lang.String> list)
  void readStringList(jni.JlObject list) =>
      _readStringList(reference, list.reference);

  static final _readBinderList = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readBinderList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readBinderList(java.util.List<android.os.IBinder> list)
  void readBinderList(jni.JlObject list) =>
      _readBinderList(reference, list.reference);

  static final _createTypedArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_createTypedArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T[] createTypedArray(android.os.Parcelable.Creator<T> c)
  jni.JlObject createTypedArray(Parcelable_Creator c) =>
      jni.JlObject.fromRef(_createTypedArray(reference, c.reference));

  static final _readTypedArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readTypedArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readTypedArray(T[] val, android.os.Parcelable.Creator<T> c)
  void readTypedArray(jni.JlObject val, Parcelable_Creator c) =>
      _readTypedArray(reference, val.reference, c.reference);

  static final _writeParcelableArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcel_writeParcelableArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeParcelableArray(T[] value, int parcelableFlags)
  void writeParcelableArray(jni.JlObject value, int parcelableFlags) =>
      _writeParcelableArray(reference, value.reference, parcelableFlags);

  static final _readValue = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readValue")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object readValue(java.lang.ClassLoader loader)
  jni.JlObject readValue(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readValue(reference, loader.reference));

  static final _readParcelableArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Parcel_readParcelableArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader loader)
  jni.JlObject readParcelableArray(jni.JlObject loader) =>
      jni.JlObject.fromRef(_readParcelableArray(reference, loader.reference));

  static final _readSerializable = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Parcel_readSerializable")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.Serializable readSerializable()
  jni.JlObject readSerializable() =>
      jni.JlObject.fromRef(_readSerializable(reference));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcel_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);
}

class Messenger extends jni.JlObject {
  Messenger.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.Messenger> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Messenger_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Messenger_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Handler target)
  Messenger(Handler target) : super.fromRef(_ctor(target.reference));

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Messenger_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.IBinder target)
  Messenger.ctor_1(IBinder target) : super.fromRef(_ctor_1(target.reference));

  static final _send = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Messenger_send")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void send(android.os.Message message)
  void send(Message message) => _send(reference, message.reference);

  static final _getBinder = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Messenger_getBinder")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IBinder getBinder()
  IBinder getBinder() => IBinder.fromRef(_getBinder(reference));

  static final _equals_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Messenger_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object otherObj)
  bool equals_1(jni.JlObject otherObj) =>
      _equals_1(reference, otherObj.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Messenger_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Messenger_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Messenger_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);

  static final _writeMessengerOrNullToParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Messenger_writeMessengerOrNullToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void writeMessengerOrNullToParcel(android.os.Messenger messenger, android.os.Parcel out)
  static void writeMessengerOrNullToParcel(Messenger messenger, Parcel out) =>
      _writeMessengerOrNullToParcel(messenger.reference, out.reference);

  static final _readMessengerOrNullFromParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Messenger_readMessengerOrNullFromParcel")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel in)
  static Messenger readMessengerOrNullFromParcel(Parcel in_) =>
      Messenger.fromRef(_readMessengerOrNullFromParcel(in_.reference));
}

class SharedMemory extends jni.JlObject {
  SharedMemory.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.SharedMemory> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_SharedMemory_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_SharedMemory_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.io.FileDescriptor fd)
  SharedMemory(jni.JlObject fd) : super.fromRef(_ctor(fd.reference));

  static final _create = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_SharedMemory_create")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.os.SharedMemory create(java.lang.String name, int size)
  static SharedMemory create(jni.JlString name, int size) =>
      SharedMemory.fromRef(_create(name.reference, size));

  static final _setProtect = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_SharedMemory_setProtect")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setProtect(int prot)
  bool setProtect(int prot) => _setProtect(reference, prot) != 0;

  static final _getSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_SharedMemory_getSize")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getSize()
  int getSize() => _getSize(reference);

  static final _mapReadWrite = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_SharedMemory_mapReadWrite")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.nio.ByteBuffer mapReadWrite()
  jni.JlObject mapReadWrite() => jni.JlObject.fromRef(_mapReadWrite(reference));

  static final _mapReadOnly = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_SharedMemory_mapReadOnly")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.nio.ByteBuffer mapReadOnly()
  jni.JlObject mapReadOnly() => jni.JlObject.fromRef(_mapReadOnly(reference));

  static final _map = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("android_os_SharedMemory_map")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.nio.ByteBuffer map(int prot, int offset, int length)
  jni.JlObject map(int prot, int offset, int length) =>
      jni.JlObject.fromRef(_map(reference, prot, offset, length));

  static final _unmap =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_SharedMemory_unmap")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void unmap(java.nio.ByteBuffer buffer)
  static void unmap(jni.JlObject buffer) => _unmap(buffer.reference);

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_SharedMemory_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_SharedMemory_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_SharedMemory_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class Trace extends jni.JlObject {
  Trace.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Trace_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  Trace() : super.fromRef(_ctor());

  static final _beginSection =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Trace_beginSection")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void beginSection(java.lang.String sectionName)
  static void beginSection(jni.JlString sectionName) =>
      _beginSection(sectionName.reference);

  static final _endSection = jlookup<ffi.NativeFunction<ffi.Void Function()>>(
          "android_os_Trace_endSection")
      .asFunction<void Function()>();

  /// from: static public void endSection()
  static void endSection() => _endSection();
}

class StatFs extends jni.JlObject {
  StatFs.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_StatFs_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String path)
  StatFs(jni.JlString path) : super.fromRef(_ctor(path.reference));

  static final _restat = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_StatFs_restat")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void restat(java.lang.String path)
  void restat(jni.JlString path) => _restat(reference, path.reference);

  static final _getBlockSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getBlockSize")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getBlockSize()
  int getBlockSize() => _getBlockSize(reference);

  static final _getBlockSizeLong =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getBlockSizeLong")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getBlockSizeLong()
  int getBlockSizeLong() => _getBlockSizeLong(reference);

  static final _getBlockCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getBlockCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getBlockCount()
  int getBlockCount() => _getBlockCount(reference);

  static final _getBlockCountLong =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getBlockCountLong")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getBlockCountLong()
  int getBlockCountLong() => _getBlockCountLong(reference);

  static final _getFreeBlocks =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getFreeBlocks")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFreeBlocks()
  int getFreeBlocks() => _getFreeBlocks(reference);

  static final _getFreeBlocksLong =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getFreeBlocksLong")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getFreeBlocksLong()
  int getFreeBlocksLong() => _getFreeBlocksLong(reference);

  static final _getFreeBytes =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getFreeBytes")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getFreeBytes()
  int getFreeBytes() => _getFreeBytes(reference);

  static final _getAvailableBlocks =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getAvailableBlocks")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getAvailableBlocks()
  int getAvailableBlocks() => _getAvailableBlocks(reference);

  static final _getAvailableBlocksLong =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getAvailableBlocksLong")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getAvailableBlocksLong()
  int getAvailableBlocksLong() => _getAvailableBlocksLong(reference);

  static final _getAvailableBytes =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getAvailableBytes")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getAvailableBytes()
  int getAvailableBytes() => _getAvailableBytes(reference);

  static final _getTotalBytes =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_StatFs_getTotalBytes")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTotalBytes()
  int getTotalBytes() => _getTotalBytes(reference);
}

class HardwarePropertiesManager extends jni.JlObject {
  HardwarePropertiesManager.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final int DEVICE_TEMPERATURE_BATTERY
  static const DEVICE_TEMPERATURE_BATTERY = 2;

  /// from: static public final int DEVICE_TEMPERATURE_CPU
  static const DEVICE_TEMPERATURE_CPU = 0;

  /// from: static public final int DEVICE_TEMPERATURE_GPU
  static const DEVICE_TEMPERATURE_GPU = 1;

  /// from: static public final int DEVICE_TEMPERATURE_SKIN
  static const DEVICE_TEMPERATURE_SKIN = 3;

  /// from: static public final int TEMPERATURE_CURRENT
  static const TEMPERATURE_CURRENT = 0;

  /// from: static public final int TEMPERATURE_SHUTDOWN
  static const TEMPERATURE_SHUTDOWN = 2;

  /// from: static public final int TEMPERATURE_THROTTLING
  static const TEMPERATURE_THROTTLING = 1;

  /// from: static public final int TEMPERATURE_THROTTLING_BELOW_VR_MIN
  static const TEMPERATURE_THROTTLING_BELOW_VR_MIN = 3;

  /// from: static public final float UNDEFINED_TEMPERATURE
  static const UNDEFINED_TEMPERATURE = -3.4028235e+38;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_HardwarePropertiesManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  HardwarePropertiesManager() : super.fromRef(_ctor());

  static final _getDeviceTemperatures = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>(
          "android_os_HardwarePropertiesManager_getDeviceTemperatures")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public float[] getDeviceTemperatures(int type, int source)
  jni.JlObject getDeviceTemperatures(int type, int source) =>
      jni.JlObject.fromRef(_getDeviceTemperatures(reference, type, source));

  static final _getCpuUsages = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_HardwarePropertiesManager_getCpuUsages")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.CpuUsageInfo[] getCpuUsages()
  jni.JlObject getCpuUsages() => jni.JlObject.fromRef(_getCpuUsages(reference));

  static final _getFanSpeeds = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_HardwarePropertiesManager_getFanSpeeds")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public float[] getFanSpeeds()
  jni.JlObject getFanSpeeds() => jni.JlObject.fromRef(_getFanSpeeds(reference));
}

class DropBoxManager extends jni.JlObject {
  DropBoxManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_DROPBOX_ENTRY_ADDED
  static const ACTION_DROPBOX_ENTRY_ADDED =
      "android.intent.action.DROPBOX_ENTRY_ADDED";

  /// from: static public final java.lang.String EXTRA_TAG
  static const EXTRA_TAG = "tag";

  /// from: static public final java.lang.String EXTRA_TIME
  static const EXTRA_TIME = "time";

  /// from: static public final int IS_EMPTY
  static const IS_EMPTY = 1;

  /// from: static public final int IS_GZIPPED
  static const IS_GZIPPED = 4;

  /// from: static public final int IS_TEXT
  static const IS_TEXT = 2;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_DropBoxManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: protected void <init>()
  DropBoxManager() : super.fromRef(_ctor());

  static final _addText = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_DropBoxManager_addText")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addText(java.lang.String tag, java.lang.String data)
  void addText(jni.JlString tag, jni.JlString data) =>
      _addText(reference, tag.reference, data.reference);

  static final _addData = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager_addData")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void addData(java.lang.String tag, byte[] data, int flags)
  void addData(jni.JlString tag, jni.JlObject data, int flags) =>
      _addData(reference, tag.reference, data.reference, flags);

  static final _addFile = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager_addFile")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void addFile(java.lang.String tag, java.io.File file, int flags)
  void addFile(jni.JlString tag, jni.JlObject file, int flags) =>
      _addFile(reference, tag.reference, file.reference, flags);

  static final _isTagEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_DropBoxManager_isTagEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isTagEnabled(java.lang.String tag)
  bool isTagEnabled(jni.JlString tag) =>
      _isTagEnabled(reference, tag.reference) != 0;

  static final _getNextEntry = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_DropBoxManager_getNextEntry")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.os.DropBoxManager.Entry getNextEntry(java.lang.String tag, long msec)
  DropBoxManager_Entry getNextEntry(jni.JlString tag, int msec) =>
      DropBoxManager_Entry.fromRef(
          _getNextEntry(reference, tag.reference, msec));
}

class DropBoxManager_Entry extends jni.JlObject {
  DropBoxManager_Entry.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.DropBoxManager.Entry> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_DropBoxManager__Entry_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_DropBoxManager__Entry_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String tag, long millis)
  DropBoxManager_Entry(jni.JlString tag, int millis)
      : super.fromRef(_ctor(tag.reference, millis));

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int64, ffi.Pointer<ffi.Void>)>>(
          "android_os_DropBoxManager__Entry_new_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String tag, long millis, java.lang.String text)
  DropBoxManager_Entry.ctor_1(jni.JlString tag, int millis, jni.JlString text)
      : super.fromRef(_ctor_1(tag.reference, millis, text.reference));

  static final _ctor_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager__Entry_new_2")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String tag, long millis, byte[] data, int flags)
  DropBoxManager_Entry.ctor_2(
      jni.JlString tag, int millis, jni.JlObject data, int flags)
      : super.fromRef(_ctor_2(tag.reference, millis, data.reference, flags));

  static final _ctor_3 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager__Entry_new_3")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String tag, long millis, android.os.ParcelFileDescriptor data, int flags)
  DropBoxManager_Entry.ctor_3(
      jni.JlString tag, int millis, ParcelFileDescriptor data, int flags)
      : super.fromRef(_ctor_3(tag.reference, millis, data.reference, flags));

  static final _ctor_4 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager__Entry_new_4")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String tag, long millis, java.io.File data, int flags)
  DropBoxManager_Entry.ctor_4(
      jni.JlString tag, int millis, jni.JlObject data, int flags)
      : super.fromRef(_ctor_4(tag.reference, millis, data.reference, flags));

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_DropBoxManager__Entry_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _getTag = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_DropBoxManager__Entry_getTag")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getTag()
  jni.JlString getTag() => jni.JlString.fromRef(_getTag(reference));

  static final _getTimeMillis =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_DropBoxManager__Entry_getTimeMillis")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTimeMillis()
  int getTimeMillis() => _getTimeMillis(reference);

  static final _getFlags =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_DropBoxManager__Entry_getFlags")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getFlags()
  int getFlags() => _getFlags(reference);

  static final _getText = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager__Entry_getText")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.String getText(int maxBytes)
  jni.JlString getText(int maxBytes) =>
      jni.JlString.fromRef(_getText(reference, maxBytes));

  static final _getInputStream = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_DropBoxManager__Entry_getInputStream")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream getInputStream()
  jni.JlObject getInputStream() =>
      jni.JlObject.fromRef(_getInputStream(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_DropBoxManager__Entry_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_DropBoxManager__Entry_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class CountDownTimer extends jni.JlObject {
  CountDownTimer.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Int64, ffi.Int64)>>("android_os_CountDownTimer_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// from: public void <init>(long millisInFuture, long countDownInterval)
  CountDownTimer(int millisInFuture, int countDownInterval)
      : super.fromRef(_ctor(millisInFuture, countDownInterval));

  static final _cancel =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CountDownTimer_cancel")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: synchronized public final void cancel()
  void cancel() => _cancel(reference);

  static final _start = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_CountDownTimer_start")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: synchronized public final android.os.CountDownTimer start()
  CountDownTimer start() => CountDownTimer.fromRef(_start(reference));

  static final _onTick = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_CountDownTimer_onTick")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void onTick(long millisUntilFinished)
  void onTick(int millisUntilFinished) =>
      _onTick(reference, millisUntilFinished);

  static final _onFinish =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CountDownTimer_onFinish")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onFinish()
  void onFinish() => _onFinish(reference);
}

class CancellationSignal extends jni.JlObject {
  CancellationSignal.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_CancellationSignal_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  CancellationSignal() : super.fromRef(_ctor());

  static final _isCanceled =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CancellationSignal_isCanceled")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCanceled()
  bool isCanceled() => _isCanceled(reference) != 0;

  static final _throwIfCanceled =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CancellationSignal_throwIfCanceled")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void throwIfCanceled()
  void throwIfCanceled() => _throwIfCanceled(reference);

  static final _cancel =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CancellationSignal_cancel")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void cancel()
  void cancel() => _cancel(reference);

  static final _setOnCancelListener = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_CancellationSignal_setOnCancelListener")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setOnCancelListener(android.os.CancellationSignal.OnCancelListener listener)
  void setOnCancelListener(CancellationSignal_OnCancelListener listener) =>
      _setOnCancelListener(reference, listener.reference);
}

class CancellationSignal_OnCancelListener extends jni.JlObject {
  CancellationSignal_OnCancelListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _onCancel =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CancellationSignal__OnCancelListener_onCancel")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onCancel()
  void onCancel() => _onCancel(reference);
}

class OperationCanceledException extends jni.JlObject {
  OperationCanceledException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_OperationCanceledException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  OperationCanceledException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_OperationCanceledException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String message)
  OperationCanceledException.ctor_1(jni.JlString message)
      : super.fromRef(_ctor_1(message.reference));
}

class NetworkOnMainThreadException extends jni.JlObject {
  NetworkOnMainThreadException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_NetworkOnMainThreadException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  NetworkOnMainThreadException() : super.fromRef(_ctor());
}

class PowerManager extends jni.JlObject {
  PowerManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int ACQUIRE_CAUSES_WAKEUP
  static const ACQUIRE_CAUSES_WAKEUP = 268435456;

  /// from: static public final java.lang.String ACTION_DEVICE_IDLE_MODE_CHANGED
  static const ACTION_DEVICE_IDLE_MODE_CHANGED =
      "android.os.action.DEVICE_IDLE_MODE_CHANGED";

  /// from: static public final java.lang.String ACTION_POWER_SAVE_MODE_CHANGED
  static const ACTION_POWER_SAVE_MODE_CHANGED =
      "android.os.action.POWER_SAVE_MODE_CHANGED";

  /// from: static public final int FULL_WAKE_LOCK
  static const FULL_WAKE_LOCK = 26;

  /// from: static public final int LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF
  static const LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF = 2;

  /// from: static public final int LOCATION_MODE_FOREGROUND_ONLY
  static const LOCATION_MODE_FOREGROUND_ONLY = 3;

  /// from: static public final int LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF
  static const LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF = 1;

  /// from: static public final int LOCATION_MODE_NO_CHANGE
  static const LOCATION_MODE_NO_CHANGE = 0;

  /// from: static public final int ON_AFTER_RELEASE
  static const ON_AFTER_RELEASE = 536870912;

  /// from: static public final int PARTIAL_WAKE_LOCK
  static const PARTIAL_WAKE_LOCK = 1;

  /// from: static public final int PROXIMITY_SCREEN_OFF_WAKE_LOCK
  static const PROXIMITY_SCREEN_OFF_WAKE_LOCK = 32;

  /// from: static public final int RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY
  static const RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY = 1;

  /// from: static public final int SCREEN_BRIGHT_WAKE_LOCK
  static const SCREEN_BRIGHT_WAKE_LOCK = 10;

  /// from: static public final int SCREEN_DIM_WAKE_LOCK
  static const SCREEN_DIM_WAKE_LOCK = 6;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_PowerManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  PowerManager() : super.fromRef(_ctor());

  static final _newWakeLock = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_os_PowerManager_newWakeLock")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PowerManager.WakeLock newWakeLock(int levelAndFlags, java.lang.String tag)
  PowerManager_WakeLock newWakeLock(int levelAndFlags, jni.JlString tag) =>
      PowerManager_WakeLock.fromRef(
          _newWakeLock(reference, levelAndFlags, tag.reference));

  static final _isWakeLockLevelSupported = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_PowerManager_isWakeLockLevelSupported")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean isWakeLockLevelSupported(int level)
  bool isWakeLockLevelSupported(int level) =>
      _isWakeLockLevelSupported(reference, level) != 0;

  static final _isScreenOn =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_isScreenOn")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isScreenOn()
  bool isScreenOn() => _isScreenOn(reference) != 0;

  static final _isInteractive =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_isInteractive")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isInteractive()
  bool isInteractive() => _isInteractive(reference) != 0;

  static final _reboot = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_PowerManager_reboot")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void reboot(java.lang.String reason)
  void reboot(jni.JlString reason) => _reboot(reference, reason.reference);

  static final _isPowerSaveMode =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_isPowerSaveMode")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPowerSaveMode()
  bool isPowerSaveMode() => _isPowerSaveMode(reference) != 0;

  static final _getLocationPowerSaveMode =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_getLocationPowerSaveMode")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getLocationPowerSaveMode()
  int getLocationPowerSaveMode() => _getLocationPowerSaveMode(reference);

  static final _isDeviceIdleMode =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_isDeviceIdleMode")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDeviceIdleMode()
  bool isDeviceIdleMode() => _isDeviceIdleMode(reference) != 0;

  static final _isIgnoringBatteryOptimizations = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_PowerManager_isIgnoringBatteryOptimizations")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isIgnoringBatteryOptimizations(java.lang.String packageName)
  bool isIgnoringBatteryOptimizations(jni.JlString packageName) =>
      _isIgnoringBatteryOptimizations(reference, packageName.reference) != 0;

  static final _isSustainedPerformanceModeSupported =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager_isSustainedPerformanceModeSupported")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSustainedPerformanceModeSupported()
  bool isSustainedPerformanceModeSupported() =>
      _isSustainedPerformanceModeSupported(reference) != 0;
}

class PowerManager_WakeLock extends jni.JlObject {
  PowerManager_WakeLock.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_PowerManager__WakeLock_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(int flags, java.lang.String tag, java.lang.String packageName)
  PowerManager_WakeLock(int flags, jni.JlString tag, jni.JlString packageName)
      : super.fromRef(_ctor(flags, tag.reference, packageName.reference));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager__WakeLock_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);

  static final _setReferenceCounted = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_os_PowerManager__WakeLock_setReferenceCounted")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setReferenceCounted(boolean value)
  void setReferenceCounted(bool value) =>
      _setReferenceCounted(reference, value ? 1 : 0);

  static final _acquire =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager__WakeLock_acquire")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void acquire()
  void acquire() => _acquire(reference);

  static final _acquire_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_PowerManager__WakeLock_acquire_1")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void acquire(long timeout)
  void acquire_1(int timeout) => _acquire_1(reference, timeout);

  static final _release =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager__WakeLock_release")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void release()
  void release() => _release(reference);

  static final _release_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_PowerManager__WakeLock_release_1")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void release(int flags)
  void release_1(int flags) => _release_1(reference, flags);

  static final _isHeld =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PowerManager__WakeLock_isHeld")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isHeld()
  bool isHeld() => _isHeld(reference) != 0;

  static final _setWorkSource = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_PowerManager__WakeLock_setWorkSource")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setWorkSource(android.os.WorkSource ws)
  void setWorkSource(WorkSource ws) => _setWorkSource(reference, ws.reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_PowerManager__WakeLock_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class Parcelable extends jni.JlObject {
  Parcelable.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int CONTENTS_FILE_DESCRIPTOR
  static const CONTENTS_FILE_DESCRIPTOR = 1;

  /// from: static public final int PARCELABLE_WRITE_RETURN_VALUE
  static const PARCELABLE_WRITE_RETURN_VALUE = 1;

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Parcelable_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcelable_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class Parcelable_Creator extends jni.JlObject {
  Parcelable_Creator.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _newArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Parcelable__Creator_newArray")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract T[] newArray(int size)
  jni.JlObject newArray(int size) =>
      jni.JlObject.fromRef(_newArray(reference, size));
}

class Parcelable_ClassLoaderCreator extends jni.JlObject {
  Parcelable_ClassLoaderCreator.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);
}

class DeadObjectException extends RemoteException {
  DeadObjectException.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_DeadObjectException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  DeadObjectException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_DeadObjectException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String message)
  DeadObjectException.ctor_1(jni.JlString message)
      : super.fromRef(_ctor_1(message.reference));
}

class HandlerThread extends jni.JlObject {
  HandlerThread.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_HandlerThread_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String name)
  HandlerThread(jni.JlString name) : super.fromRef(_ctor(name.reference));

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_HandlerThread_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String name, int priority)
  HandlerThread.ctor_1(jni.JlString name, int priority)
      : super.fromRef(_ctor_1(name.reference, priority));

  static final _onLooperPrepared =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_HandlerThread_onLooperPrepared")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onLooperPrepared()
  void onLooperPrepared() => _onLooperPrepared(reference);

  static final _run =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_HandlerThread_run")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void run()
  void run() => _run(reference);

  static final _getLooper = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_HandlerThread_getLooper")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Looper getLooper()
  Looper getLooper() => Looper.fromRef(_getLooper(reference));

  static final _quit =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_HandlerThread_quit")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean quit()
  bool quit() => _quit(reference) != 0;

  static final _quitSafely =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_HandlerThread_quitSafely")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean quitSafely()
  bool quitSafely() => _quitSafely(reference) != 0;

  static final _getThreadId =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_HandlerThread_getThreadId")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getThreadId()
  int getThreadId() => _getThreadId(reference);
}

class UserHandle extends jni.JlObject {
  UserHandle.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.UserHandle> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_UserHandle_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_UserHandle_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Parcel in)
  UserHandle(Parcel in_) : super.fromRef(_ctor(in_.reference));

  static final _getUserHandleForUid =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_os_UserHandle_getUserHandleForUid")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: static public android.os.UserHandle getUserHandleForUid(int uid)
  static UserHandle getUserHandleForUid(int uid) =>
      UserHandle.fromRef(_getUserHandleForUid(uid));

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_UserHandle_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _equals_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_UserHandle_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object obj)
  bool equals_1(jni.JlObject obj) => _equals_1(reference, obj.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserHandle_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserHandle_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_UserHandle_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);

  static final _writeToParcel_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserHandle_writeToParcel_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void writeToParcel(android.os.UserHandle h, android.os.Parcel out)
  static void writeToParcel_1(UserHandle h, Parcel out) =>
      _writeToParcel_1(h.reference, out.reference);

  static final _readFromParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_UserHandle_readFromParcel")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.UserHandle readFromParcel(android.os.Parcel in)
  static UserHandle readFromParcel(Parcel in_) =>
      UserHandle.fromRef(_readFromParcel(in_.reference));
}

class Looper extends jni.JlObject {
  Looper.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Uint8)>>(
              "android_os_Looper_new")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: void <init>(boolean quitAllowed)
  Looper(bool quitAllowed) : super.fromRef(_ctor(quitAllowed ? 1 : 0));

  static final _prepare = jlookup<ffi.NativeFunction<ffi.Void Function()>>(
          "android_os_Looper_prepare")
      .asFunction<void Function()>();

  /// from: static public void prepare()
  static void prepare() => _prepare();

  static final _prepareMainLooper =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Looper_prepareMainLooper")
          .asFunction<void Function()>();

  /// from: static public void prepareMainLooper()
  static void prepareMainLooper() => _prepareMainLooper();

  static final _getMainLooper =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Looper_getMainLooper")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.Looper getMainLooper()
  static Looper getMainLooper() => Looper.fromRef(_getMainLooper());

  static final _loop =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>("android_os_Looper_loop")
          .asFunction<void Function()>();

  /// from: static public void loop()
  static void loop() => _loop();

  static final _myLooper =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Looper_myLooper")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.Looper myLooper()
  static Looper myLooper() => Looper.fromRef(_myLooper());

  static final _myQueue =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Looper_myQueue")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.MessageQueue myQueue()
  static MessageQueue myQueue() => MessageQueue.fromRef(_myQueue());

  static final _isCurrentThread =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Looper_isCurrentThread")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCurrentThread()
  bool isCurrentThread() => _isCurrentThread(reference) != 0;

  static final _setMessageLogging = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Looper_setMessageLogging")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setMessageLogging(android.util.Printer printer)
  void setMessageLogging(jni.JlObject printer) =>
      _setMessageLogging(reference, printer.reference);

  static final _quit =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Looper_quit")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void quit()
  void quit() => _quit(reference);

  static final _quitSafely =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Looper_quitSafely")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void quitSafely()
  void quitSafely() => _quitSafely(reference);

  static final _getThread = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Looper_getThread")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Thread getThread()
  jni.JlObject getThread() => jni.JlObject.fromRef(_getThread(reference));

  static final _getQueue = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Looper_getQueue")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.MessageQueue getQueue()
  MessageQueue getQueue() => MessageQueue.fromRef(_getQueue(reference));

  static final _dump = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Looper_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(android.util.Printer pw, java.lang.String prefix)
  void dump(jni.JlObject pw, jni.JlString prefix) =>
      _dump(reference, pw.reference, prefix.reference);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Looper_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class MessageQueue extends jni.JlObject {
  MessageQueue.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Uint8)>>(
              "android_os_MessageQueue_new")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: void <init>(boolean quitAllowed)
  MessageQueue(bool quitAllowed) : super.fromRef(_ctor(quitAllowed ? 1 : 0));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MessageQueue_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);

  static final _isIdle =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MessageQueue_isIdle")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isIdle()
  bool isIdle() => _isIdle(reference) != 0;

  static final _addIdleHandler = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_MessageQueue_addIdleHandler")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addIdleHandler(android.os.MessageQueue.IdleHandler handler)
  void addIdleHandler(MessageQueue_IdleHandler handler) =>
      _addIdleHandler(reference, handler.reference);

  static final _removeIdleHandler = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_MessageQueue_removeIdleHandler")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeIdleHandler(android.os.MessageQueue.IdleHandler handler)
  void removeIdleHandler(MessageQueue_IdleHandler handler) =>
      _removeIdleHandler(reference, handler.reference);

  static final _addOnFileDescriptorEventListener = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_MessageQueue_addOnFileDescriptorEventListener")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addOnFileDescriptorEventListener(java.io.FileDescriptor fd, int events, android.os.MessageQueue.OnFileDescriptorEventListener listener)
  void addOnFileDescriptorEventListener(jni.JlObject fd, int events,
          MessageQueue_OnFileDescriptorEventListener listener) =>
      _addOnFileDescriptorEventListener(
          reference, fd.reference, events, listener.reference);

  static final _removeOnFileDescriptorEventListener = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_MessageQueue_removeOnFileDescriptorEventListener")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeOnFileDescriptorEventListener(java.io.FileDescriptor fd)
  void removeOnFileDescriptorEventListener(jni.JlObject fd) =>
      _removeOnFileDescriptorEventListener(reference, fd.reference);
}

class MessageQueue_OnFileDescriptorEventListener extends jni.JlObject {
  MessageQueue_OnFileDescriptorEventListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final int EVENT_ERROR
  static const EVENT_ERROR = 4;

  /// from: static public final int EVENT_INPUT
  static const EVENT_INPUT = 1;

  /// from: static public final int EVENT_OUTPUT
  static const EVENT_OUTPUT = 2;

  static final _onFileDescriptorEvents = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_MessageQueue__OnFileDescriptorEventListener_onFileDescriptorEvents")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int onFileDescriptorEvents(java.io.FileDescriptor fd, int events)
  int onFileDescriptorEvents(jni.JlObject fd, int events) =>
      _onFileDescriptorEvents(reference, fd.reference, events);
}

class MessageQueue_IdleHandler extends jni.JlObject {
  MessageQueue_IdleHandler.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _queueIdle =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MessageQueue__IdleHandler_queueIdle")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean queueIdle()
  bool queueIdle() => _queueIdle(reference) != 0;
}

class BatteryManager extends jni.JlObject {
  BatteryManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_CHARGING
  static const ACTION_CHARGING = "android.os.action.CHARGING";

  /// from: static public final java.lang.String ACTION_DISCHARGING
  static const ACTION_DISCHARGING = "android.os.action.DISCHARGING";

  /// from: static public final int BATTERY_HEALTH_COLD
  static const BATTERY_HEALTH_COLD = 7;

  /// from: static public final int BATTERY_HEALTH_DEAD
  static const BATTERY_HEALTH_DEAD = 4;

  /// from: static public final int BATTERY_HEALTH_GOOD
  static const BATTERY_HEALTH_GOOD = 2;

  /// from: static public final int BATTERY_HEALTH_OVERHEAT
  static const BATTERY_HEALTH_OVERHEAT = 3;

  /// from: static public final int BATTERY_HEALTH_OVER_VOLTAGE
  static const BATTERY_HEALTH_OVER_VOLTAGE = 5;

  /// from: static public final int BATTERY_HEALTH_UNKNOWN
  static const BATTERY_HEALTH_UNKNOWN = 1;

  /// from: static public final int BATTERY_HEALTH_UNSPECIFIED_FAILURE
  static const BATTERY_HEALTH_UNSPECIFIED_FAILURE = 6;

  /// from: static public final int BATTERY_PLUGGED_AC
  static const BATTERY_PLUGGED_AC = 1;

  /// from: static public final int BATTERY_PLUGGED_USB
  static const BATTERY_PLUGGED_USB = 2;

  /// from: static public final int BATTERY_PLUGGED_WIRELESS
  static const BATTERY_PLUGGED_WIRELESS = 4;

  /// from: static public final int BATTERY_PROPERTY_CAPACITY
  static const BATTERY_PROPERTY_CAPACITY = 4;

  /// from: static public final int BATTERY_PROPERTY_CHARGE_COUNTER
  static const BATTERY_PROPERTY_CHARGE_COUNTER = 1;

  /// from: static public final int BATTERY_PROPERTY_CURRENT_AVERAGE
  static const BATTERY_PROPERTY_CURRENT_AVERAGE = 3;

  /// from: static public final int BATTERY_PROPERTY_CURRENT_NOW
  static const BATTERY_PROPERTY_CURRENT_NOW = 2;

  /// from: static public final int BATTERY_PROPERTY_ENERGY_COUNTER
  static const BATTERY_PROPERTY_ENERGY_COUNTER = 5;

  /// from: static public final int BATTERY_PROPERTY_STATUS
  static const BATTERY_PROPERTY_STATUS = 6;

  /// from: static public final int BATTERY_STATUS_CHARGING
  static const BATTERY_STATUS_CHARGING = 2;

  /// from: static public final int BATTERY_STATUS_DISCHARGING
  static const BATTERY_STATUS_DISCHARGING = 3;

  /// from: static public final int BATTERY_STATUS_FULL
  static const BATTERY_STATUS_FULL = 5;

  /// from: static public final int BATTERY_STATUS_NOT_CHARGING
  static const BATTERY_STATUS_NOT_CHARGING = 4;

  /// from: static public final int BATTERY_STATUS_UNKNOWN
  static const BATTERY_STATUS_UNKNOWN = 1;

  /// from: static public final java.lang.String EXTRA_BATTERY_LOW
  static const EXTRA_BATTERY_LOW = "battery_low";

  /// from: static public final java.lang.String EXTRA_HEALTH
  static const EXTRA_HEALTH = "health";

  /// from: static public final java.lang.String EXTRA_ICON_SMALL
  static const EXTRA_ICON_SMALL = "icon-small";

  /// from: static public final java.lang.String EXTRA_LEVEL
  static const EXTRA_LEVEL = "level";

  /// from: static public final java.lang.String EXTRA_PLUGGED
  static const EXTRA_PLUGGED = "plugged";

  /// from: static public final java.lang.String EXTRA_PRESENT
  static const EXTRA_PRESENT = "present";

  /// from: static public final java.lang.String EXTRA_SCALE
  static const EXTRA_SCALE = "scale";

  /// from: static public final java.lang.String EXTRA_STATUS
  static const EXTRA_STATUS = "status";

  /// from: static public final java.lang.String EXTRA_TECHNOLOGY
  static const EXTRA_TECHNOLOGY = "technology";

  /// from: static public final java.lang.String EXTRA_TEMPERATURE
  static const EXTRA_TEMPERATURE = "temperature";

  /// from: static public final java.lang.String EXTRA_VOLTAGE
  static const EXTRA_VOLTAGE = "voltage";

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_BatteryManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  BatteryManager() : super.fromRef(_ctor());

  static final _isCharging =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_BatteryManager_isCharging")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCharging()
  bool isCharging() => _isCharging(reference) != 0;

  static final _getIntProperty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_BatteryManager_getIntProperty")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getIntProperty(int id)
  int getIntProperty(int id) => _getIntProperty(reference, id);

  static final _getLongProperty = jlookup<
          ffi.NativeFunction<
              ffi.Int64 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_BatteryManager_getLongProperty")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getLongProperty(int id)
  int getLongProperty(int id) => _getLongProperty(reference, id);

  static final _computeChargeTimeRemaining =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_BatteryManager_computeChargeTimeRemaining")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long computeChargeTimeRemaining()
  int computeChargeTimeRemaining() => _computeChargeTimeRemaining(reference);
}

class IInterface extends jni.JlObject {
  IInterface.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _asBinder = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_IInterface_asBinder")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.os.IBinder asBinder()
  IBinder asBinder() => IBinder.fromRef(_asBinder(reference));
}

class Message extends jni.JlObject {
  Message.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.Message> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Message_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: public int arg1
  static final _getarg1 = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_arg1")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get arg1 => _getarg1(reference);
  static final _setarg1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Message_arg1")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set arg1(int value) => _setarg1(reference, value);

  /// from: public int arg2
  static final _getarg2 = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_arg2")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get arg2 => _getarg2(reference);
  static final _setarg2 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Message_arg2")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set arg2(int value) => _setarg2(reference, value);

  /// from: public java.lang.Object obj
  static final _getobj = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_obj")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>();
  jni.JlObject get obj => jni.JlObject.fromRef(_getobj(reference));
  static final _setobj = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("set_android_os_Message_obj")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
  set obj(jni.JlObject value) => _setobj(reference, value.reference);

  /// from: public android.os.Messenger replyTo
  static final _getreplyTo = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_replyTo")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void>,
  )>();
  Messenger get replyTo => Messenger.fromRef(_getreplyTo(reference));
  static final _setreplyTo = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("set_android_os_Message_replyTo")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();
  set replyTo(Messenger value) => _setreplyTo(reference, value.reference);

  /// from: public int sendingUid
  static final _getsendingUid = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_sendingUid")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get sendingUid => _getsendingUid(reference);
  static final _setsendingUid = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Message_sendingUid")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set sendingUid(int value) => _setsendingUid(reference, value);

  /// from: public int what
  static final _getwhat = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Message_what")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get what => _getwhat(reference);
  static final _setwhat = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Message_what")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set what(int value) => _setwhat(reference, value);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Message_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Message() : super.fromRef(_ctor());

  static final _obtain =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Message_obtain")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.Message obtain()
  static Message obtain() => Message.fromRef(_obtain());

  static final _obtain_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_obtain_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Message obtain(android.os.Message orig)
  static Message obtain_1(Message orig) =>
      Message.fromRef(_obtain_1(orig.reference));

  static final _obtain_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_obtain_2")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Message obtain(android.os.Handler h)
  static Message obtain_2(Handler h) => Message.fromRef(_obtain_2(h.reference));

  static final _obtain_3 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_obtain_3")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Message obtain(android.os.Handler h, java.lang.Runnable callback)
  static Message obtain_3(Handler h, jni.JlObject callback) =>
      Message.fromRef(_obtain_3(h.reference, callback.reference));

  static final _obtain_4 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Message_obtain_4")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.os.Message obtain(android.os.Handler h, int what)
  static Message obtain_4(Handler h, int what) =>
      Message.fromRef(_obtain_4(h.reference, what));

  static final _obtain_5 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_obtain_5")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Message obtain(android.os.Handler h, int what, java.lang.Object obj)
  static Message obtain_5(Handler h, int what, jni.JlObject obj) =>
      Message.fromRef(_obtain_5(h.reference, what, obj.reference));

  static final _obtain_6 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("android_os_Message_obtain_6")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: static public android.os.Message obtain(android.os.Handler h, int what, int arg1, int arg2)
  static Message obtain_6(Handler h, int what, int arg1, int arg2) =>
      Message.fromRef(_obtain_6(h.reference, what, arg1, arg2));

  static final _obtain_7 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_obtain_7")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Message obtain(android.os.Handler h, int what, int arg1, int arg2, java.lang.Object obj)
  static Message obtain_7(
          Handler h, int what, int arg1, int arg2, jni.JlObject obj) =>
      Message.fromRef(_obtain_7(h.reference, what, arg1, arg2, obj.reference));

  static final _recycle =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Message_recycle")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recycle()
  void recycle() => _recycle(reference);

  static final _copyFrom = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_copyFrom")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void copyFrom(android.os.Message o)
  void copyFrom(Message o) => _copyFrom(reference, o.reference);

  static final _getWhen =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Message_getWhen")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getWhen()
  int getWhen() => _getWhen(reference);

  static final _setTarget = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_setTarget")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTarget(android.os.Handler target)
  void setTarget(Handler target) => _setTarget(reference, target.reference);

  static final _getTarget = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_getTarget")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Handler getTarget()
  Handler getTarget() => Handler.fromRef(_getTarget(reference));

  static final _getCallback = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_getCallback")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Runnable getCallback()
  jni.JlObject getCallback() => jni.JlObject.fromRef(_getCallback(reference));

  static final _getData = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_getData")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getData()
  Bundle getData() => Bundle.fromRef(_getData(reference));

  static final _peekData = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_peekData")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle peekData()
  Bundle peekData() => Bundle.fromRef(_peekData(reference));

  static final _setData = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_setData")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setData(android.os.Bundle data)
  void setData(Bundle data) => _setData(reference, data.reference);

  static final _sendToTarget =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Message_sendToTarget")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void sendToTarget()
  void sendToTarget() => _sendToTarget(reference);

  static final _isAsynchronous =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Message_isAsynchronous")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAsynchronous()
  bool isAsynchronous() => _isAsynchronous(reference) != 0;

  static final _setAsynchronous = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_Message_setAsynchronous")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setAsynchronous(boolean async)
  void setAsynchronous(bool async_) =>
      _setAsynchronous(reference, async_ ? 1 : 0);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Message_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Message_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Message_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);
}

class CpuUsageInfo extends jni.JlObject {
  CpuUsageInfo.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.CpuUsageInfo> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_CpuUsageInfo_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_CpuUsageInfo_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Parcel in)
  CpuUsageInfo(Parcel in_) : super.fromRef(_ctor(in_.reference));

  static final _getActive =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CpuUsageInfo_getActive")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getActive()
  int getActive() => _getActive(reference);

  static final _getTotal =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CpuUsageInfo_getTotal")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTotal()
  int getTotal() => _getTotal(reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_CpuUsageInfo_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_CpuUsageInfo_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class ResultReceiver extends jni.JlObject {
  ResultReceiver.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.ResultReceiver> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_ResultReceiver_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_ResultReceiver_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Handler handler)
  ResultReceiver(Handler handler) : super.fromRef(_ctor(handler.reference));

  static final _send = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_ResultReceiver_send")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void send(int resultCode, android.os.Bundle resultData)
  void send(int resultCode, Bundle resultData) =>
      _send(reference, resultCode, resultData.reference);

  static final _onReceiveResult = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_ResultReceiver_onReceiveResult")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onReceiveResult(int resultCode, android.os.Bundle resultData)
  void onReceiveResult(int resultCode, Bundle resultData) =>
      _onReceiveResult(reference, resultCode, resultData.reference);

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ResultReceiver_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_ResultReceiver_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);
}

class TokenWatcher extends jni.JlObject {
  TokenWatcher.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_TokenWatcher_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Handler h, java.lang.String tag)
  TokenWatcher(Handler h, jni.JlString tag)
      : super.fromRef(_ctor(h.reference, tag.reference));

  static final _acquired =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_TokenWatcher_acquired")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void acquired()
  void acquired() => _acquired(reference);

  static final _released =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_TokenWatcher_released")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void released()
  void released() => _released(reference);

  static final _acquire = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_TokenWatcher_acquire")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void acquire(android.os.IBinder token, java.lang.String tag)
  void acquire(IBinder token, jni.JlString tag) =>
      _acquire(reference, token.reference, tag.reference);

  static final _cleanup = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_TokenWatcher_cleanup")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void cleanup(android.os.IBinder token, boolean unlink)
  void cleanup(IBinder token, bool unlink) =>
      _cleanup(reference, token.reference, unlink ? 1 : 0);

  static final _release = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_TokenWatcher_release")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void release(android.os.IBinder token)
  void release(IBinder token) => _release(reference, token.reference);

  static final _isAcquired =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_TokenWatcher_isAcquired")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAcquired()
  bool isAcquired() => _isAcquired(reference) != 0;

  static final _dump =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_TokenWatcher_dump")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void dump()
  void dump() => _dump(reference);

  static final _dump_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_TokenWatcher_dump_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.io.PrintWriter pw)
  void dump_1(jni.JlObject pw) => _dump_1(reference, pw.reference);
}

class RemoteCallbackList extends jni.JlObject {
  RemoteCallbackList.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_RemoteCallbackList_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  RemoteCallbackList() : super.fromRef(_ctor());

  static final _kill =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RemoteCallbackList_kill")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void kill()
  void kill() => _kill(reference);

  static final _beginBroadcast =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RemoteCallbackList_beginBroadcast")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int beginBroadcast()
  int beginBroadcast() => _beginBroadcast(reference);

  static final _getBroadcastCookie = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_RemoteCallbackList_getBroadcastCookie")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object getBroadcastCookie(int index)
  jni.JlObject getBroadcastCookie(int index) =>
      jni.JlObject.fromRef(_getBroadcastCookie(reference, index));

  static final _finishBroadcast =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RemoteCallbackList_finishBroadcast")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishBroadcast()
  void finishBroadcast() => _finishBroadcast(reference);

  static final _getRegisteredCallbackCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_RemoteCallbackList_getRegisteredCallbackCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getRegisteredCallbackCount()
  int getRegisteredCallbackCount() => _getRegisteredCallbackCount(reference);

  static final _getRegisteredCallbackCookie = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_RemoteCallbackList_getRegisteredCallbackCookie")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object getRegisteredCallbackCookie(int index)
  jni.JlObject getRegisteredCallbackCookie(int index) =>
      jni.JlObject.fromRef(_getRegisteredCallbackCookie(reference, index));
}

class ConditionVariable extends jni.JlObject {
  ConditionVariable.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ConditionVariable_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  ConditionVariable() : super.fromRef(_ctor());

  static final _ctor_1 =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Uint8)>>(
              "android_os_ConditionVariable_new_1")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: public void <init>(boolean state)
  ConditionVariable.ctor_1(bool state) : super.fromRef(_ctor_1(state ? 1 : 0));

  static final _open =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ConditionVariable_open")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void open()
  void open() => _open(reference);

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ConditionVariable_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _block =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ConditionVariable_block")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void block()
  void block() => _block(reference);

  static final _block_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_ConditionVariable_block_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean block(long timeout)
  bool block_1(int timeout) => _block_1(reference, timeout) != 0;
}

class FileUriExposedException extends jni.JlObject {
  FileUriExposedException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_FileUriExposedException_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String message)
  FileUriExposedException(jni.JlString message)
      : super.fromRef(_ctor(message.reference));
}

class FileObserver extends jni.JlObject {
  FileObserver.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int ACCESS
  static const ACCESS = 1;

  /// from: static public final int ALL_EVENTS
  static const ALL_EVENTS = 4095;

  /// from: static public final int ATTRIB
  static const ATTRIB = 4;

  /// from: static public final int CLOSE_NOWRITE
  static const CLOSE_NOWRITE = 16;

  /// from: static public final int CLOSE_WRITE
  static const CLOSE_WRITE = 8;

  /// from: static public final int CREATE
  static const CREATE = 256;

  /// from: static public final int DELETE
  static const DELETE = 512;

  /// from: static public final int DELETE_SELF
  static const DELETE_SELF = 1024;

  /// from: static public final int MODIFY
  static const MODIFY = 2;

  /// from: static public final int MOVED_FROM
  static const MOVED_FROM = 64;

  /// from: static public final int MOVED_TO
  static const MOVED_TO = 128;

  /// from: static public final int MOVE_SELF
  static const MOVE_SELF = 2048;

  /// from: static public final int OPEN
  static const OPEN = 32;

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_FileObserver_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String path)
  FileObserver(jni.JlString path) : super.fromRef(_ctor(path.reference));

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_FileObserver_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String path, int mask)
  FileObserver.ctor_1(jni.JlString path, int mask)
      : super.fromRef(_ctor_1(path.reference, mask));

  static final _finalize =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_FileObserver_finalize")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void finalize()
  void finalize() => _finalize(reference);

  static final _startWatching =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_FileObserver_startWatching")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void startWatching()
  void startWatching() => _startWatching(reference);

  static final _stopWatching =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_FileObserver_stopWatching")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stopWatching()
  void stopWatching() => _stopWatching(reference);

  static final _onEvent = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_FileObserver_onEvent")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onEvent(int event, java.lang.String path)
  void onEvent(int event, jni.JlString path) =>
      _onEvent(reference, event, path.reference);
}

class ParcelFormatException extends jni.JlObject {
  ParcelFormatException.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ParcelFormatException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  ParcelFormatException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_ParcelFormatException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String reason)
  ParcelFormatException.ctor_1(jni.JlString reason)
      : super.fromRef(_ctor_1(reason.reference));
}

class MemoryFile extends jni.JlObject {
  MemoryFile.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_MemoryFile_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void <init>(java.lang.String name, int length)
  MemoryFile(jni.JlString name, int length)
      : super.fromRef(_ctor(name.reference, length));

  static final _close =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MemoryFile_close")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void close()
  void close() => _close(reference);

  static final _length =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MemoryFile_length")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int length()
  int length() => _length(reference);

  static final _isPurgingAllowed =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_MemoryFile_isPurgingAllowed")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPurgingAllowed()
  bool isPurgingAllowed() => _isPurgingAllowed(reference) != 0;

  static final _allowPurging = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_MemoryFile_allowPurging")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: synchronized public boolean allowPurging(boolean allowPurging)
  bool allowPurging(bool allowPurging_) =>
      _allowPurging(reference, allowPurging_ ? 1 : 0) != 0;

  static final _getInputStream = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_MemoryFile_getInputStream")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream getInputStream()
  jni.JlObject getInputStream() =>
      jni.JlObject.fromRef(_getInputStream(reference));

  static final _getOutputStream = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_MemoryFile_getOutputStream")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.OutputStream getOutputStream()
  jni.JlObject getOutputStream() =>
      jni.JlObject.fromRef(_getOutputStream(reference));

  static final _readBytes = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("android_os_MemoryFile_readBytes")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public int readBytes(byte[] buffer, int srcOffset, int destOffset, int count)
  int readBytes(
          jni.JlObject buffer, int srcOffset, int destOffset, int count) =>
      _readBytes(reference, buffer.reference, srcOffset, destOffset, count);

  static final _writeBytes = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("android_os_MemoryFile_writeBytes")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void writeBytes(byte[] buffer, int srcOffset, int destOffset, int count)
  void writeBytes(
          jni.JlObject buffer, int srcOffset, int destOffset, int count) =>
      _writeBytes(reference, buffer.reference, srcOffset, destOffset, count);
}

class BadParcelableException extends jni.JlObject {
  BadParcelableException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_BadParcelableException_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String msg)
  BadParcelableException(jni.JlString msg)
      : super.fromRef(_ctor(msg.reference));

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_BadParcelableException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.Exception cause)
  BadParcelableException.ctor_1(jni.JlObject cause)
      : super.fromRef(_ctor_1(cause.reference));
}

class TransactionTooLargeException extends RemoteException {
  TransactionTooLargeException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_TransactionTooLargeException_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  TransactionTooLargeException() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_TransactionTooLargeException_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String msg)
  TransactionTooLargeException.ctor_1(jni.JlString msg)
      : super.fromRef(_ctor_1(msg.reference));
}

class Handler extends jni.JlObject {
  Handler.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Handler_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Handler() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Handler.Callback callback)
  Handler.ctor_1(Handler_Callback callback)
      : super.fromRef(_ctor_1(callback.reference));

  static final _ctor_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_new_2")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Looper looper)
  Handler.ctor_2(Looper looper) : super.fromRef(_ctor_2(looper.reference));

  static final _ctor_3 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_new_3")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Looper looper, android.os.Handler.Callback callback)
  Handler.ctor_3(Looper looper, Handler_Callback callback)
      : super.fromRef(_ctor_3(looper.reference, callback.reference));

  static final _handleMessage = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_handleMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void handleMessage(android.os.Message msg)
  void handleMessage(Message msg) => _handleMessage(reference, msg.reference);

  static final _dispatchMessage = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_dispatchMessage")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void dispatchMessage(android.os.Message msg)
  void dispatchMessage(Message msg) =>
      _dispatchMessage(reference, msg.reference);

  static final _createAsync = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_createAsync")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Handler createAsync(android.os.Looper looper)
  static Handler createAsync(Looper looper) =>
      Handler.fromRef(_createAsync(looper.reference));

  static final _createAsync_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_createAsync_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.Handler createAsync(android.os.Looper looper, android.os.Handler.Callback callback)
  static Handler createAsync_1(Looper looper, Handler_Callback callback) =>
      Handler.fromRef(_createAsync_1(looper.reference, callback.reference));

  static final _getMessageName = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_getMessageName")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMessageName(android.os.Message message)
  jni.JlString getMessageName(Message message) =>
      jni.JlString.fromRef(_getMessageName(reference, message.reference));

  static final _obtainMessage = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_obtainMessage")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Message obtainMessage()
  Message obtainMessage() => Message.fromRef(_obtainMessage(reference));

  static final _obtainMessage_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Handler_obtainMessage_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.os.Message obtainMessage(int what)
  Message obtainMessage_1(int what) =>
      Message.fromRef(_obtainMessage_1(reference, what));

  static final _obtainMessage_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_obtainMessage_2")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Message obtainMessage(int what, java.lang.Object obj)
  Message obtainMessage_2(int what, jni.JlObject obj) =>
      Message.fromRef(_obtainMessage_2(reference, what, obj.reference));

  static final _obtainMessage_3 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Int32)>>("android_os_Handler_obtainMessage_3")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public final android.os.Message obtainMessage(int what, int arg1, int arg2)
  Message obtainMessage_3(int what, int arg1, int arg2) =>
      Message.fromRef(_obtainMessage_3(reference, what, arg1, arg2));

  static final _obtainMessage_4 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_obtainMessage_4")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Message obtainMessage(int what, int arg1, int arg2, java.lang.Object obj)
  Message obtainMessage_4(int what, int arg1, int arg2, jni.JlObject obj) =>
      Message.fromRef(
          _obtainMessage_4(reference, what, arg1, arg2, obj.reference));

  static final _post = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_post")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean post(java.lang.Runnable r)
  bool post(jni.JlObject r) => _post(reference, r.reference) != 0;

  static final _postAtTime = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_postAtTime")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean postAtTime(java.lang.Runnable r, long uptimeMillis)
  bool postAtTime(jni.JlObject r, int uptimeMillis) =>
      _postAtTime(reference, r.reference, uptimeMillis) != 0;

  static final _postAtTime_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_postAtTime_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean postAtTime(java.lang.Runnable r, java.lang.Object token, long uptimeMillis)
  bool postAtTime_1(jni.JlObject r, jni.JlObject token, int uptimeMillis) =>
      _postAtTime_1(reference, r.reference, token.reference, uptimeMillis) != 0;

  static final _postDelayed = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_postDelayed")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean postDelayed(java.lang.Runnable r, long delayMillis)
  bool postDelayed(jni.JlObject r, int delayMillis) =>
      _postDelayed(reference, r.reference, delayMillis) != 0;

  static final _postDelayed_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_postDelayed_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean postDelayed(java.lang.Runnable r, java.lang.Object token, long delayMillis)
  bool postDelayed_1(jni.JlObject r, jni.JlObject token, int delayMillis) =>
      _postDelayed_1(reference, r.reference, token.reference, delayMillis) != 0;

  static final _postAtFrontOfQueue = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler_postAtFrontOfQueue")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean postAtFrontOfQueue(java.lang.Runnable r)
  bool postAtFrontOfQueue(jni.JlObject r) =>
      _postAtFrontOfQueue(reference, r.reference) != 0;

  static final _removeCallbacks = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_removeCallbacks")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void removeCallbacks(java.lang.Runnable r)
  void removeCallbacks(jni.JlObject r) =>
      _removeCallbacks(reference, r.reference);

  static final _removeCallbacks_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler_removeCallbacks_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void removeCallbacks(java.lang.Runnable r, java.lang.Object token)
  void removeCallbacks_1(jni.JlObject r, jni.JlObject token) =>
      _removeCallbacks_1(reference, r.reference, token.reference);

  static final _sendMessage = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_sendMessage")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean sendMessage(android.os.Message msg)
  bool sendMessage(Message msg) => _sendMessage(reference, msg.reference) != 0;

  static final _sendEmptyMessage = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Handler_sendEmptyMessage")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean sendEmptyMessage(int what)
  bool sendEmptyMessage(int what) => _sendEmptyMessage(reference, what) != 0;

  static final _sendEmptyMessageDelayed = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int64)>>("android_os_Handler_sendEmptyMessageDelayed")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final boolean sendEmptyMessageDelayed(int what, long delayMillis)
  bool sendEmptyMessageDelayed(int what, int delayMillis) =>
      _sendEmptyMessageDelayed(reference, what, delayMillis) != 0;

  static final _sendEmptyMessageAtTime = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int64)>>("android_os_Handler_sendEmptyMessageAtTime")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis)
  bool sendEmptyMessageAtTime(int what, int uptimeMillis) =>
      _sendEmptyMessageAtTime(reference, what, uptimeMillis) != 0;

  static final _sendMessageDelayed = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_sendMessageDelayed")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean sendMessageDelayed(android.os.Message msg, long delayMillis)
  bool sendMessageDelayed(Message msg, int delayMillis) =>
      _sendMessageDelayed(reference, msg.reference, delayMillis) != 0;

  static final _sendMessageAtTime = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_Handler_sendMessageAtTime")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean sendMessageAtTime(android.os.Message msg, long uptimeMillis)
  bool sendMessageAtTime(Message msg, int uptimeMillis) =>
      _sendMessageAtTime(reference, msg.reference, uptimeMillis) != 0;

  static final _sendMessageAtFrontOfQueue = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler_sendMessageAtFrontOfQueue")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean sendMessageAtFrontOfQueue(android.os.Message msg)
  bool sendMessageAtFrontOfQueue(Message msg) =>
      _sendMessageAtFrontOfQueue(reference, msg.reference) != 0;

  static final _removeMessages = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Handler_removeMessages")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void removeMessages(int what)
  void removeMessages(int what) => _removeMessages(reference, what);

  static final _removeMessages_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler_removeMessages_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void removeMessages(int what, java.lang.Object object)
  void removeMessages_1(int what, jni.JlObject object) =>
      _removeMessages_1(reference, what, object.reference);

  static final _removeCallbacksAndMessages = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler_removeCallbacksAndMessages")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void removeCallbacksAndMessages(java.lang.Object token)
  void removeCallbacksAndMessages(jni.JlObject token) =>
      _removeCallbacksAndMessages(reference, token.reference);

  static final _hasMessages = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Handler_hasMessages")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean hasMessages(int what)
  bool hasMessages(int what) => _hasMessages(reference, what) != 0;

  static final _hasMessages_1 = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_hasMessages_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasMessages(int what, java.lang.Object object)
  bool hasMessages_1(int what, jni.JlObject object) =>
      _hasMessages_1(reference, what, object.reference) != 0;

  static final _getLooper = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_getLooper")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.os.Looper getLooper()
  Looper getLooper() => Looper.fromRef(_getLooper(reference));

  static final _dump = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void dump(android.util.Printer pw, java.lang.String prefix)
  void dump(jni.JlObject pw, jni.JlString prefix) =>
      _dump(reference, pw.reference, prefix.reference);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Handler_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class Handler_Callback extends jni.JlObject {
  Handler_Callback.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _handleMessage = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Handler__Callback_handleMessage")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean handleMessage(android.os.Message msg)
  bool handleMessage(Message msg) =>
      _handleMessage(reference, msg.reference) != 0;
}

class Debug extends jni.JlObject {
  Debug.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int SHOW_CLASSLOADER
  static const SHOW_CLASSLOADER = 2;

  /// from: static public final int SHOW_FULL_DETAIL
  static const SHOW_FULL_DETAIL = 1;

  /// from: static public final int SHOW_INITIALIZED
  static const SHOW_INITIALIZED = 4;

  /// from: static public final int TRACE_COUNT_ALLOCS
  static const TRACE_COUNT_ALLOCS = 1;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Debug_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  Debug() : super.fromRef(_ctor());

  static final _waitForDebugger =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_waitForDebugger")
          .asFunction<void Function()>();

  /// from: static public void waitForDebugger()
  static void waitForDebugger() => _waitForDebugger();

  static final _waitingForDebugger =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_Debug_waitingForDebugger")
          .asFunction<int Function()>();

  /// from: static public boolean waitingForDebugger()
  static bool waitingForDebugger() => _waitingForDebugger() != 0;

  static final _isDebuggerConnected =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_Debug_isDebuggerConnected")
          .asFunction<int Function()>();

  /// from: static public boolean isDebuggerConnected()
  static bool isDebuggerConnected() => _isDebuggerConnected() != 0;

  static final _changeDebugPort =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
              "android_os_Debug_changeDebugPort")
          .asFunction<void Function(int)>();

  /// from: static public void changeDebugPort(int port)
  static void changeDebugPort(int port) => _changeDebugPort(port);

  static final _startNativeTracing =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_startNativeTracing")
          .asFunction<void Function()>();

  /// from: static public void startNativeTracing()
  static void startNativeTracing() => _startNativeTracing();

  static final _stopNativeTracing =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_stopNativeTracing")
          .asFunction<void Function()>();

  /// from: static public void stopNativeTracing()
  static void stopNativeTracing() => _stopNativeTracing();

  static final _enableEmulatorTraceOutput =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_enableEmulatorTraceOutput")
          .asFunction<void Function()>();

  /// from: static public void enableEmulatorTraceOutput()
  static void enableEmulatorTraceOutput() => _enableEmulatorTraceOutput();

  static final _startMethodTracing =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_startMethodTracing")
          .asFunction<void Function()>();

  /// from: static public void startMethodTracing()
  static void startMethodTracing() => _startMethodTracing();

  static final _startMethodTracing_1 =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug_startMethodTracing_1")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void startMethodTracing(java.lang.String tracePath)
  static void startMethodTracing_1(jni.JlString tracePath) =>
      _startMethodTracing_1(tracePath.reference);

  static final _startMethodTracing_2 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Debug_startMethodTracing_2")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void startMethodTracing(java.lang.String tracePath, int bufferSize)
  static void startMethodTracing_2(jni.JlString tracePath, int bufferSize) =>
      _startMethodTracing_2(tracePath.reference, bufferSize);

  static final _startMethodTracing_3 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_os_Debug_startMethodTracing_3")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void startMethodTracing(java.lang.String tracePath, int bufferSize, int flags)
  static void startMethodTracing_3(
          jni.JlString tracePath, int bufferSize, int flags) =>
      _startMethodTracing_3(tracePath.reference, bufferSize, flags);

  static final _startMethodTracingSampling = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("android_os_Debug_startMethodTracingSampling")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public void startMethodTracingSampling(java.lang.String tracePath, int bufferSize, int intervalUs)
  static void startMethodTracingSampling(
          jni.JlString tracePath, int bufferSize, int intervalUs) =>
      _startMethodTracingSampling(tracePath.reference, bufferSize, intervalUs);

  static final _stopMethodTracing =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_stopMethodTracing")
          .asFunction<void Function()>();

  /// from: static public void stopMethodTracing()
  static void stopMethodTracing() => _stopMethodTracing();

  static final _threadCpuTimeNanos =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Debug_threadCpuTimeNanos")
          .asFunction<int Function()>();

  /// from: static public long threadCpuTimeNanos()
  static int threadCpuTimeNanos() => _threadCpuTimeNanos();

  static final _startAllocCounting =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_startAllocCounting")
          .asFunction<void Function()>();

  /// from: static public void startAllocCounting()
  static void startAllocCounting() => _startAllocCounting();

  static final _stopAllocCounting =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_stopAllocCounting")
          .asFunction<void Function()>();

  /// from: static public void stopAllocCounting()
  static void stopAllocCounting() => _stopAllocCounting();

  static final _getGlobalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalAllocCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalAllocCount()
  static int getGlobalAllocCount() => _getGlobalAllocCount();

  static final _resetGlobalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalAllocCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalAllocCount()
  static void resetGlobalAllocCount() => _resetGlobalAllocCount();

  static final _getGlobalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalAllocSize")
          .asFunction<int Function()>();

  /// from: static public int getGlobalAllocSize()
  static int getGlobalAllocSize() => _getGlobalAllocSize();

  static final _resetGlobalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalAllocSize")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalAllocSize()
  static void resetGlobalAllocSize() => _resetGlobalAllocSize();

  static final _getGlobalFreedCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalFreedCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalFreedCount()
  static int getGlobalFreedCount() => _getGlobalFreedCount();

  static final _resetGlobalFreedCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalFreedCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalFreedCount()
  static void resetGlobalFreedCount() => _resetGlobalFreedCount();

  static final _getGlobalFreedSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalFreedSize")
          .asFunction<int Function()>();

  /// from: static public int getGlobalFreedSize()
  static int getGlobalFreedSize() => _getGlobalFreedSize();

  static final _resetGlobalFreedSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalFreedSize")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalFreedSize()
  static void resetGlobalFreedSize() => _resetGlobalFreedSize();

  static final _getGlobalGcInvocationCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalGcInvocationCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalGcInvocationCount()
  static int getGlobalGcInvocationCount() => _getGlobalGcInvocationCount();

  static final _resetGlobalGcInvocationCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalGcInvocationCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalGcInvocationCount()
  static void resetGlobalGcInvocationCount() => _resetGlobalGcInvocationCount();

  static final _getGlobalClassInitCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalClassInitCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalClassInitCount()
  static int getGlobalClassInitCount() => _getGlobalClassInitCount();

  static final _resetGlobalClassInitCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalClassInitCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalClassInitCount()
  static void resetGlobalClassInitCount() => _resetGlobalClassInitCount();

  static final _getGlobalClassInitTime =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalClassInitTime")
          .asFunction<int Function()>();

  /// from: static public int getGlobalClassInitTime()
  static int getGlobalClassInitTime() => _getGlobalClassInitTime();

  static final _resetGlobalClassInitTime =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalClassInitTime")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalClassInitTime()
  static void resetGlobalClassInitTime() => _resetGlobalClassInitTime();

  static final _getGlobalExternalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalExternalAllocCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalExternalAllocCount()
  static int getGlobalExternalAllocCount() => _getGlobalExternalAllocCount();

  static final _resetGlobalExternalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalExternalAllocSize")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalExternalAllocSize()
  static void resetGlobalExternalAllocSize() => _resetGlobalExternalAllocSize();

  static final _resetGlobalExternalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalExternalAllocCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalExternalAllocCount()
  static void resetGlobalExternalAllocCount() =>
      _resetGlobalExternalAllocCount();

  static final _getGlobalExternalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalExternalAllocSize")
          .asFunction<int Function()>();

  /// from: static public int getGlobalExternalAllocSize()
  static int getGlobalExternalAllocSize() => _getGlobalExternalAllocSize();

  static final _getGlobalExternalFreedCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalExternalFreedCount")
          .asFunction<int Function()>();

  /// from: static public int getGlobalExternalFreedCount()
  static int getGlobalExternalFreedCount() => _getGlobalExternalFreedCount();

  static final _resetGlobalExternalFreedCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalExternalFreedCount")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalExternalFreedCount()
  static void resetGlobalExternalFreedCount() =>
      _resetGlobalExternalFreedCount();

  static final _getGlobalExternalFreedSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getGlobalExternalFreedSize")
          .asFunction<int Function()>();

  /// from: static public int getGlobalExternalFreedSize()
  static int getGlobalExternalFreedSize() => _getGlobalExternalFreedSize();

  static final _resetGlobalExternalFreedSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetGlobalExternalFreedSize")
          .asFunction<void Function()>();

  /// from: static public void resetGlobalExternalFreedSize()
  static void resetGlobalExternalFreedSize() => _resetGlobalExternalFreedSize();

  static final _getThreadAllocCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getThreadAllocCount")
          .asFunction<int Function()>();

  /// from: static public int getThreadAllocCount()
  static int getThreadAllocCount() => _getThreadAllocCount();

  static final _resetThreadAllocCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetThreadAllocCount")
          .asFunction<void Function()>();

  /// from: static public void resetThreadAllocCount()
  static void resetThreadAllocCount() => _resetThreadAllocCount();

  static final _getThreadAllocSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getThreadAllocSize")
          .asFunction<int Function()>();

  /// from: static public int getThreadAllocSize()
  static int getThreadAllocSize() => _getThreadAllocSize();

  static final _resetThreadAllocSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetThreadAllocSize")
          .asFunction<void Function()>();

  /// from: static public void resetThreadAllocSize()
  static void resetThreadAllocSize() => _resetThreadAllocSize();

  static final _getThreadExternalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getThreadExternalAllocCount")
          .asFunction<int Function()>();

  /// from: static public int getThreadExternalAllocCount()
  static int getThreadExternalAllocCount() => _getThreadExternalAllocCount();

  static final _resetThreadExternalAllocCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetThreadExternalAllocCount")
          .asFunction<void Function()>();

  /// from: static public void resetThreadExternalAllocCount()
  static void resetThreadExternalAllocCount() =>
      _resetThreadExternalAllocCount();

  static final _getThreadExternalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getThreadExternalAllocSize")
          .asFunction<int Function()>();

  /// from: static public int getThreadExternalAllocSize()
  static int getThreadExternalAllocSize() => _getThreadExternalAllocSize();

  static final _resetThreadExternalAllocSize =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetThreadExternalAllocSize")
          .asFunction<void Function()>();

  /// from: static public void resetThreadExternalAllocSize()
  static void resetThreadExternalAllocSize() => _resetThreadExternalAllocSize();

  static final _getThreadGcInvocationCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getThreadGcInvocationCount")
          .asFunction<int Function()>();

  /// from: static public int getThreadGcInvocationCount()
  static int getThreadGcInvocationCount() => _getThreadGcInvocationCount();

  static final _resetThreadGcInvocationCount =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetThreadGcInvocationCount")
          .asFunction<void Function()>();

  /// from: static public void resetThreadGcInvocationCount()
  static void resetThreadGcInvocationCount() => _resetThreadGcInvocationCount();

  static final _resetAllCounts =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Debug_resetAllCounts")
          .asFunction<void Function()>();

  /// from: static public void resetAllCounts()
  static void resetAllCounts() => _resetAllCounts();

  static final _getRuntimeStat = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Debug_getRuntimeStat")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getRuntimeStat(java.lang.String statName)
  static jni.JlString getRuntimeStat(jni.JlString statName) =>
      jni.JlString.fromRef(_getRuntimeStat(statName.reference));

  static final _getRuntimeStats =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Debug_getRuntimeStats")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.util.Map<java.lang.String,java.lang.String> getRuntimeStats()
  static jni.JlObject getRuntimeStats() =>
      jni.JlObject.fromRef(_getRuntimeStats());

  static final _getNativeHeapSize =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Debug_getNativeHeapSize")
          .asFunction<int Function()>();

  /// from: static public native long getNativeHeapSize()
  static int getNativeHeapSize() => _getNativeHeapSize();

  static final _getNativeHeapAllocatedSize =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Debug_getNativeHeapAllocatedSize")
          .asFunction<int Function()>();

  /// from: static public native long getNativeHeapAllocatedSize()
  static int getNativeHeapAllocatedSize() => _getNativeHeapAllocatedSize();

  static final _getNativeHeapFreeSize =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Debug_getNativeHeapFreeSize")
          .asFunction<int Function()>();

  /// from: static public native long getNativeHeapFreeSize()
  static int getNativeHeapFreeSize() => _getNativeHeapFreeSize();

  static final _getMemoryInfo =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug_getMemoryInfo")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public native void getMemoryInfo(android.os.Debug.MemoryInfo memoryInfo)
  static void getMemoryInfo(Debug_MemoryInfo memoryInfo) =>
      _getMemoryInfo(memoryInfo.reference);

  static final _getPss = jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          "android_os_Debug_getPss")
      .asFunction<int Function()>();

  /// from: static public native long getPss()
  static int getPss() => _getPss();

  static final _setAllocationLimit =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
              "android_os_Debug_setAllocationLimit")
          .asFunction<int Function(int)>();

  /// from: static public int setAllocationLimit(int limit)
  static int setAllocationLimit(int limit) => _setAllocationLimit(limit);

  static final _setGlobalAllocationLimit =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
              "android_os_Debug_setGlobalAllocationLimit")
          .asFunction<int Function(int)>();

  /// from: static public int setGlobalAllocationLimit(int limit)
  static int setGlobalAllocationLimit(int limit) =>
      _setGlobalAllocationLimit(limit);

  static final _printLoadedClasses =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
              "android_os_Debug_printLoadedClasses")
          .asFunction<void Function(int)>();

  /// from: static public void printLoadedClasses(int flags)
  static void printLoadedClasses(int flags) => _printLoadedClasses(flags);

  static final _getLoadedClassCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getLoadedClassCount")
          .asFunction<int Function()>();

  /// from: static public int getLoadedClassCount()
  static int getLoadedClassCount() => _getLoadedClassCount();

  static final _dumpHprofData =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug_dumpHprofData")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void dumpHprofData(java.lang.String fileName)
  static void dumpHprofData(jni.JlString fileName) =>
      _dumpHprofData(fileName.reference);

  static final _getBinderSentTransactions =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getBinderSentTransactions")
          .asFunction<int Function()>();

  /// from: static public native int getBinderSentTransactions()
  static int getBinderSentTransactions() => _getBinderSentTransactions();

  static final _getBinderReceivedTransactions =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getBinderReceivedTransactions")
          .asFunction<int Function()>();

  /// from: static public native int getBinderReceivedTransactions()
  static int getBinderReceivedTransactions() =>
      _getBinderReceivedTransactions();

  static final _getBinderLocalObjectCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getBinderLocalObjectCount")
          .asFunction<int Function()>();

  /// from: static public native int getBinderLocalObjectCount()
  static int getBinderLocalObjectCount() => _getBinderLocalObjectCount();

  static final _getBinderProxyObjectCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getBinderProxyObjectCount")
          .asFunction<int Function()>();

  /// from: static public native int getBinderProxyObjectCount()
  static int getBinderProxyObjectCount() => _getBinderProxyObjectCount();

  static final _getBinderDeathObjectCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Debug_getBinderDeathObjectCount")
          .asFunction<int Function()>();

  /// from: static public native int getBinderDeathObjectCount()
  static int getBinderDeathObjectCount() => _getBinderDeathObjectCount();

  static final _dumpService = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Debug_dumpService")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean dumpService(java.lang.String name, java.io.FileDescriptor fd, java.lang.String[] args)
  static bool dumpService(
          jni.JlString name, jni.JlObject fd, jni.JlObject args) =>
      _dumpService(name.reference, fd.reference, args.reference) != 0;

  static final _attachJvmtiAgent = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Debug_attachJvmtiAgent")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public void attachJvmtiAgent(java.lang.String library, java.lang.String options, java.lang.ClassLoader classLoader)
  static void attachJvmtiAgent(jni.JlString library_, jni.JlString options,
          jni.JlObject classLoader) =>
      _attachJvmtiAgent(
          library_.reference, options.reference, classLoader.reference);
}

class Debug_MemoryInfo extends jni.JlObject {
  Debug_MemoryInfo.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.Debug.MemoryInfo> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Debug__MemoryInfo_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: public int dalvikPrivateDirty
  static final _getdalvikPrivateDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_dalvikPrivateDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get dalvikPrivateDirty => _getdalvikPrivateDirty(reference);
  static final _setdalvikPrivateDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_dalvikPrivateDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set dalvikPrivateDirty(int value) => _setdalvikPrivateDirty(reference, value);

  /// from: public int dalvikPss
  static final _getdalvikPss = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_dalvikPss")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get dalvikPss => _getdalvikPss(reference);
  static final _setdalvikPss = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Debug__MemoryInfo_dalvikPss")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set dalvikPss(int value) => _setdalvikPss(reference, value);

  /// from: public int dalvikSharedDirty
  static final _getdalvikSharedDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_dalvikSharedDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get dalvikSharedDirty => _getdalvikSharedDirty(reference);
  static final _setdalvikSharedDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_dalvikSharedDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set dalvikSharedDirty(int value) => _setdalvikSharedDirty(reference, value);

  /// from: public int nativePrivateDirty
  static final _getnativePrivateDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_nativePrivateDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get nativePrivateDirty => _getnativePrivateDirty(reference);
  static final _setnativePrivateDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_nativePrivateDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set nativePrivateDirty(int value) => _setnativePrivateDirty(reference, value);

  /// from: public int nativePss
  static final _getnativePss = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_nativePss")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get nativePss => _getnativePss(reference);
  static final _setnativePss = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Debug__MemoryInfo_nativePss")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set nativePss(int value) => _setnativePss(reference, value);

  /// from: public int nativeSharedDirty
  static final _getnativeSharedDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_nativeSharedDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get nativeSharedDirty => _getnativeSharedDirty(reference);
  static final _setnativeSharedDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_nativeSharedDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set nativeSharedDirty(int value) => _setnativeSharedDirty(reference, value);

  /// from: public int otherPrivateDirty
  static final _getotherPrivateDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_otherPrivateDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get otherPrivateDirty => _getotherPrivateDirty(reference);
  static final _setotherPrivateDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_otherPrivateDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set otherPrivateDirty(int value) => _setotherPrivateDirty(reference, value);

  /// from: public int otherPss
  static final _getotherPss = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_otherPss")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get otherPss => _getotherPss(reference);
  static final _setotherPss = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("set_android_os_Debug__MemoryInfo_otherPss")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set otherPss(int value) => _setotherPss(reference, value);

  /// from: public int otherSharedDirty
  static final _getotherSharedDirty = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_android_os_Debug__MemoryInfo_otherSharedDirty")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();
  int get otherSharedDirty => _getotherSharedDirty(reference);
  static final _setotherSharedDirty = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "set_android_os_Debug__MemoryInfo_otherSharedDirty")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();
  set otherSharedDirty(int value) => _setotherSharedDirty(reference, value);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Debug__MemoryInfo_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Debug_MemoryInfo() : super.fromRef(_ctor());

  static final _getTotalPss =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalPss")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalPss()
  int getTotalPss() => _getTotalPss(reference);

  static final _getTotalSwappablePss =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalSwappablePss")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalSwappablePss()
  int getTotalSwappablePss() => _getTotalSwappablePss(reference);

  static final _getTotalPrivateDirty =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalPrivateDirty")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalPrivateDirty()
  int getTotalPrivateDirty() => _getTotalPrivateDirty(reference);

  static final _getTotalSharedDirty =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalSharedDirty")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalSharedDirty()
  int getTotalSharedDirty() => _getTotalSharedDirty(reference);

  static final _getTotalPrivateClean =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalPrivateClean")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalPrivateClean()
  int getTotalPrivateClean() => _getTotalPrivateClean(reference);

  static final _getTotalSharedClean =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_getTotalSharedClean")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTotalSharedClean()
  int getTotalSharedClean() => _getTotalSharedClean(reference);

  static final _getMemoryStat = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Debug__MemoryInfo_getMemoryStat")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMemoryStat(java.lang.String statName)
  jni.JlString getMemoryStat(jni.JlString statName) =>
      jni.JlString.fromRef(_getMemoryStat(reference, statName.reference));

  static final _getMemoryStats = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Debug__MemoryInfo_getMemoryStats")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<java.lang.String,java.lang.String> getMemoryStats()
  jni.JlObject getMemoryStats() =>
      jni.JlObject.fromRef(_getMemoryStats(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__MemoryInfo_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Debug__MemoryInfo_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel dest, int flags)
  void writeToParcel(Parcel dest, int flags) =>
      _writeToParcel(reference, dest.reference, flags);

  static final _readFromParcel = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Debug__MemoryInfo_readFromParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel source)
  void readFromParcel(Parcel source) =>
      _readFromParcel(reference, source.reference);
}

class Debug_InstructionCount extends jni.JlObject {
  Debug_InstructionCount.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Debug__InstructionCount_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Debug_InstructionCount() : super.fromRef(_ctor());

  static final _resetAndStart =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__InstructionCount_resetAndStart")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean resetAndStart()
  bool resetAndStart() => _resetAndStart(reference) != 0;

  static final _collect =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__InstructionCount_collect")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean collect()
  bool collect() => _collect(reference) != 0;

  static final _globalTotal =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__InstructionCount_globalTotal")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int globalTotal()
  int globalTotal() => _globalTotal(reference);

  static final _globalMethodInvocations =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Debug__InstructionCount_globalMethodInvocations")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int globalMethodInvocations()
  int globalMethodInvocations() => _globalMethodInvocations(reference);
}

class Bundle extends BaseBundle {
  Bundle.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.Bundle> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Bundle_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final android.os.Bundle EMPTY
  static final _getEMPTY =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Bundle_EMPTY")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Bundle get EMPTY => Bundle.fromRef(_getEMPTY());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Bundle_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Bundle() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.ClassLoader loader)
  Bundle.ctor_1(jni.JlObject loader) : super.fromRef(_ctor_1(loader.reference));

  static final _ctor_2 =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_os_Bundle_new_2")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: public void <init>(int capacity)
  Bundle.ctor_2(int capacity) : super.fromRef(_ctor_2(capacity));

  static final _ctor_3 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_new_3")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Bundle b)
  Bundle.ctor_3(Bundle b) : super.fromRef(_ctor_3(b.reference));

  static final _ctor_4 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_new_4")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.PersistableBundle b)
  Bundle.ctor_4(PersistableBundle b) : super.fromRef(_ctor_4(b.reference));

  static final _setClassLoader = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_setClassLoader")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setClassLoader(java.lang.ClassLoader loader)
  void setClassLoader(jni.JlObject loader) =>
      _setClassLoader(reference, loader.reference);

  static final _getClassLoader = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getClassLoader")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.ClassLoader getClassLoader()
  jni.JlObject getClassLoader() =>
      jni.JlObject.fromRef(_getClassLoader(reference));

  static final _clone = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_clone")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object clone()
  jni.JlObject clone() => jni.JlObject.fromRef(_clone(reference));

  static final _deepCopy = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_deepCopy")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle deepCopy()
  Bundle deepCopy() => Bundle.fromRef(_deepCopy(reference));

  static final _clear =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Bundle_clear")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void clear()
  void clear() => _clear(reference);

  static final _remove = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_remove")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void remove(java.lang.String key)
  void remove(jni.JlString key) => _remove(reference, key.reference);

  static final _putAll = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putAll")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void putAll(android.os.Bundle bundle)
  void putAll(Bundle bundle) => _putAll(reference, bundle.reference);

  static final _hasFileDescriptors =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Bundle_hasFileDescriptors")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() => _hasFileDescriptors(reference) != 0;

  static final _putByte = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int8)>>("android_os_Bundle_putByte")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putByte(java.lang.String key, byte value)
  void putByte(jni.JlString key, int value) =>
      _putByte(reference, key.reference, value);

  static final _putChar = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int16)>>("android_os_Bundle_putChar")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putChar(java.lang.String key, char value)
  void putChar(jni.JlString key, int value) =>
      _putChar(reference, key.reference, value);

  static final _putShort = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int16)>>("android_os_Bundle_putShort")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void putShort(java.lang.String key, short value)
  void putShort(jni.JlString key, int value) =>
      _putShort(reference, key.reference, value);

  static final _putFloat = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("android_os_Bundle_putFloat")
      .asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public void putFloat(java.lang.String key, float value)
  void putFloat(jni.JlString key, double value) =>
      _putFloat(reference, key.reference, value);

  static final _putCharSequence = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putCharSequence")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putCharSequence(java.lang.String key, java.lang.CharSequence value)
  void putCharSequence(jni.JlString key, jni.JlObject value) =>
      _putCharSequence(reference, key.reference, value.reference);

  static final _putParcelable = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putParcelable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putParcelable(java.lang.String key, android.os.Parcelable value)
  void putParcelable(jni.JlString key, Parcelable value) =>
      _putParcelable(reference, key.reference, value.reference);

  static final _putSize = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putSize")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putSize(java.lang.String key, android.util.Size value)
  void putSize(jni.JlString key, jni.JlObject value) =>
      _putSize(reference, key.reference, value.reference);

  static final _putSizeF = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putSizeF")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putSizeF(java.lang.String key, android.util.SizeF value)
  void putSizeF(jni.JlString key, jni.JlObject value) =>
      _putSizeF(reference, key.reference, value.reference);

  static final _putParcelableArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putParcelableArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putParcelableArray(java.lang.String key, android.os.Parcelable[] value)
  void putParcelableArray(jni.JlString key, jni.JlObject value) =>
      _putParcelableArray(reference, key.reference, value.reference);

  static final _putParcelableArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putParcelableArrayList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putParcelableArrayList(java.lang.String key, java.util.ArrayList<? extends android.os.Parcelable> value)
  void putParcelableArrayList(jni.JlString key, jni.JlObject value) =>
      _putParcelableArrayList(reference, key.reference, value.reference);

  static final _putSparseParcelableArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putSparseParcelableArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putSparseParcelableArray(java.lang.String key, android.util.SparseArray<? extends android.os.Parcelable> value)
  void putSparseParcelableArray(jni.JlString key, jni.JlObject value) =>
      _putSparseParcelableArray(reference, key.reference, value.reference);

  static final _putIntegerArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putIntegerArrayList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putIntegerArrayList(java.lang.String key, java.util.ArrayList<java.lang.Integer> value)
  void putIntegerArrayList(jni.JlString key, jni.JlObject value) =>
      _putIntegerArrayList(reference, key.reference, value.reference);

  static final _putStringArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putStringArrayList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putStringArrayList(java.lang.String key, java.util.ArrayList<java.lang.String> value)
  void putStringArrayList(jni.JlString key, jni.JlObject value) =>
      _putStringArrayList(reference, key.reference, value.reference);

  static final _putCharSequenceArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putCharSequenceArrayList")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putCharSequenceArrayList(java.lang.String key, java.util.ArrayList<java.lang.CharSequence> value)
  void putCharSequenceArrayList(jni.JlString key, jni.JlObject value) =>
      _putCharSequenceArrayList(reference, key.reference, value.reference);

  static final _putSerializable = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putSerializable")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putSerializable(java.lang.String key, java.io.Serializable value)
  void putSerializable(jni.JlString key, jni.JlObject value) =>
      _putSerializable(reference, key.reference, value.reference);

  static final _putByteArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putByteArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putByteArray(java.lang.String key, byte[] value)
  void putByteArray(jni.JlString key, jni.JlObject value) =>
      _putByteArray(reference, key.reference, value.reference);

  static final _putShortArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putShortArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putShortArray(java.lang.String key, short[] value)
  void putShortArray(jni.JlString key, jni.JlObject value) =>
      _putShortArray(reference, key.reference, value.reference);

  static final _putCharArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putCharArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putCharArray(java.lang.String key, char[] value)
  void putCharArray(jni.JlString key, jni.JlObject value) =>
      _putCharArray(reference, key.reference, value.reference);

  static final _putFloatArray = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putFloatArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putFloatArray(java.lang.String key, float[] value)
  void putFloatArray(jni.JlString key, jni.JlObject value) =>
      _putFloatArray(reference, key.reference, value.reference);

  static final _putCharSequenceArray = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_putCharSequenceArray")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putCharSequenceArray(java.lang.String key, java.lang.CharSequence[] value)
  void putCharSequenceArray(jni.JlString key, jni.JlObject value) =>
      _putCharSequenceArray(reference, key.reference, value.reference);

  static final _putBundle = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putBundle")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putBundle(java.lang.String key, android.os.Bundle value)
  void putBundle(jni.JlString key, Bundle value) =>
      _putBundle(reference, key.reference, value.reference);

  static final _putBinder = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_putBinder")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putBinder(java.lang.String key, android.os.IBinder value)
  void putBinder(jni.JlString key, IBinder value) =>
      _putBinder(reference, key.reference, value.reference);

  static final _getByte = jlookup<
          ffi.NativeFunction<
              ffi.Int8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getByte")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public byte getByte(java.lang.String key)
  int getByte(jni.JlString key) => _getByte(reference, key.reference);

  static final _getByte_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int8)>>("android_os_Bundle_getByte_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Byte getByte(java.lang.String key, byte defaultValue)
  jni.JlObject getByte_1(jni.JlString key, int defaultValue) =>
      jni.JlObject.fromRef(_getByte_1(reference, key.reference, defaultValue));

  static final _getChar = jlookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getChar")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public char getChar(java.lang.String key)
  int getChar(jni.JlString key) => _getChar(reference, key.reference);

  static final _getChar_1 = jlookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int16)>>("android_os_Bundle_getChar_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public char getChar(java.lang.String key, char defaultValue)
  int getChar_1(jni.JlString key, int defaultValue) =>
      _getChar_1(reference, key.reference, defaultValue);

  static final _getShort = jlookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getShort")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public short getShort(java.lang.String key)
  int getShort(jni.JlString key) => _getShort(reference, key.reference);

  static final _getShort_1 = jlookup<
          ffi.NativeFunction<
              ffi.Int16 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int16)>>("android_os_Bundle_getShort_1")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public short getShort(java.lang.String key, short defaultValue)
  int getShort_1(jni.JlString key, int defaultValue) =>
      _getShort_1(reference, key.reference, defaultValue);

  static final _getFloat = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getFloat")
      .asFunction<
          double Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public float getFloat(java.lang.String key)
  double getFloat(jni.JlString key) => _getFloat(reference, key.reference);

  static final _getFloat_1 = jlookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Float)>>("android_os_Bundle_getFloat_1")
      .asFunction<
          double Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double)>();

  /// from: public float getFloat(java.lang.String key, float defaultValue)
  double getFloat_1(jni.JlString key, double defaultValue) =>
      _getFloat_1(reference, key.reference, defaultValue);

  static final _getCharSequence = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getCharSequence")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getCharSequence(java.lang.String key)
  jni.JlObject getCharSequence(jni.JlString key) =>
      jni.JlObject.fromRef(_getCharSequence(reference, key.reference));

  static final _getCharSequence_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getCharSequence_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getCharSequence(java.lang.String key, java.lang.CharSequence defaultValue)
  jni.JlObject getCharSequence_1(jni.JlString key, jni.JlObject defaultValue) =>
      jni.JlObject.fromRef(
          _getCharSequence_1(reference, key.reference, defaultValue.reference));

  static final _getSize = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getSize")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.Size getSize(java.lang.String key)
  jni.JlObject getSize(jni.JlString key) =>
      jni.JlObject.fromRef(_getSize(reference, key.reference));

  static final _getSizeF = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getSizeF")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.SizeF getSizeF(java.lang.String key)
  jni.JlObject getSizeF(jni.JlString key) =>
      jni.JlObject.fromRef(_getSizeF(reference, key.reference));

  static final _getBundle = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getBundle")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getBundle(java.lang.String key)
  Bundle getBundle(jni.JlString key) =>
      Bundle.fromRef(_getBundle(reference, key.reference));

  static final _getParcelableArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getParcelableArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Parcelable[] getParcelableArray(java.lang.String key)
  jni.JlObject getParcelableArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getParcelableArray(reference, key.reference));

  static final _getParcelableArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getParcelableArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<T> getParcelableArrayList(java.lang.String key)
  jni.JlObject getParcelableArrayList(jni.JlString key) =>
      jni.JlObject.fromRef(_getParcelableArrayList(reference, key.reference));

  static final _getSparseParcelableArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getSparseParcelableArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.util.SparseArray<T> getSparseParcelableArray(java.lang.String key)
  jni.JlObject getSparseParcelableArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getSparseParcelableArray(reference, key.reference));

  static final _getSerializable = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getSerializable")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.Serializable getSerializable(java.lang.String key)
  jni.JlObject getSerializable(jni.JlString key) =>
      jni.JlObject.fromRef(_getSerializable(reference, key.reference));

  static final _getIntegerArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getIntegerArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<java.lang.Integer> getIntegerArrayList(java.lang.String key)
  jni.JlObject getIntegerArrayList(jni.JlString key) =>
      jni.JlObject.fromRef(_getIntegerArrayList(reference, key.reference));

  static final _getStringArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getStringArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<java.lang.String> getStringArrayList(java.lang.String key)
  jni.JlObject getStringArrayList(jni.JlString key) =>
      jni.JlObject.fromRef(_getStringArrayList(reference, key.reference));

  static final _getCharSequenceArrayList = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getCharSequenceArrayList")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList<java.lang.CharSequence> getCharSequenceArrayList(java.lang.String key)
  jni.JlObject getCharSequenceArrayList(jni.JlString key) =>
      jni.JlObject.fromRef(_getCharSequenceArrayList(reference, key.reference));

  static final _getByteArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getByteArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getByteArray(java.lang.String key)
  jni.JlObject getByteArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getByteArray(reference, key.reference));

  static final _getShortArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getShortArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public short[] getShortArray(java.lang.String key)
  jni.JlObject getShortArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getShortArray(reference, key.reference));

  static final _getCharArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getCharArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public char[] getCharArray(java.lang.String key)
  jni.JlObject getCharArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getCharArray(reference, key.reference));

  static final _getFloatArray = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getFloatArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public float[] getFloatArray(java.lang.String key)
  jni.JlObject getFloatArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getFloatArray(reference, key.reference));

  static final _getCharSequenceArray = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Bundle_getCharSequenceArray")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence[] getCharSequenceArray(java.lang.String key)
  jni.JlObject getCharSequenceArray(jni.JlString key) =>
      jni.JlObject.fromRef(_getCharSequenceArray(reference, key.reference));

  static final _getBinder = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_getBinder")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IBinder getBinder(java.lang.String key)
  IBinder getBinder(jni.JlString key) =>
      IBinder.fromRef(_getBinder(reference, key.reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Bundle_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Bundle_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(Parcel parcel, int flags) =>
      _writeToParcel(reference, parcel.reference, flags);

  static final _readFromParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_readFromParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(Parcel parcel) =>
      _readFromParcel(reference, parcel.reference);

  static final _toString_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_Bundle_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: synchronized public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class Environment extends jni.JlObject {
  Environment.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public java.lang.String DIRECTORY_ALARMS
  static final _getDIRECTORY_ALARMS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_ALARMS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_ALARMS =>
      jni.JlString.fromRef(_getDIRECTORY_ALARMS());
  static final _setDIRECTORY_ALARMS =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_ALARMS")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_ALARMS(jni.JlString value) =>
      _setDIRECTORY_ALARMS(value.reference);

  /// from: static public java.lang.String DIRECTORY_DCIM
  static final _getDIRECTORY_DCIM =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_DCIM")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_DCIM =>
      jni.JlString.fromRef(_getDIRECTORY_DCIM());
  static final _setDIRECTORY_DCIM =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_DCIM")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_DCIM(jni.JlString value) =>
      _setDIRECTORY_DCIM(value.reference);

  /// from: static public java.lang.String DIRECTORY_DOCUMENTS
  static final _getDIRECTORY_DOCUMENTS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_DOCUMENTS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_DOCUMENTS =>
      jni.JlString.fromRef(_getDIRECTORY_DOCUMENTS());
  static final _setDIRECTORY_DOCUMENTS =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_DOCUMENTS")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_DOCUMENTS(jni.JlString value) =>
      _setDIRECTORY_DOCUMENTS(value.reference);

  /// from: static public java.lang.String DIRECTORY_DOWNLOADS
  static final _getDIRECTORY_DOWNLOADS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_DOWNLOADS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_DOWNLOADS =>
      jni.JlString.fromRef(_getDIRECTORY_DOWNLOADS());
  static final _setDIRECTORY_DOWNLOADS =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_DOWNLOADS")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_DOWNLOADS(jni.JlString value) =>
      _setDIRECTORY_DOWNLOADS(value.reference);

  /// from: static public java.lang.String DIRECTORY_MOVIES
  static final _getDIRECTORY_MOVIES =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_MOVIES")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_MOVIES =>
      jni.JlString.fromRef(_getDIRECTORY_MOVIES());
  static final _setDIRECTORY_MOVIES =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_MOVIES")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_MOVIES(jni.JlString value) =>
      _setDIRECTORY_MOVIES(value.reference);

  /// from: static public java.lang.String DIRECTORY_MUSIC
  static final _getDIRECTORY_MUSIC =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_MUSIC")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_MUSIC =>
      jni.JlString.fromRef(_getDIRECTORY_MUSIC());
  static final _setDIRECTORY_MUSIC =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_MUSIC")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_MUSIC(jni.JlString value) =>
      _setDIRECTORY_MUSIC(value.reference);

  /// from: static public java.lang.String DIRECTORY_NOTIFICATIONS
  static final _getDIRECTORY_NOTIFICATIONS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_NOTIFICATIONS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_NOTIFICATIONS =>
      jni.JlString.fromRef(_getDIRECTORY_NOTIFICATIONS());
  static final _setDIRECTORY_NOTIFICATIONS =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_NOTIFICATIONS")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_NOTIFICATIONS(jni.JlString value) =>
      _setDIRECTORY_NOTIFICATIONS(value.reference);

  /// from: static public java.lang.String DIRECTORY_PICTURES
  static final _getDIRECTORY_PICTURES =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_PICTURES")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_PICTURES =>
      jni.JlString.fromRef(_getDIRECTORY_PICTURES());
  static final _setDIRECTORY_PICTURES =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_PICTURES")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_PICTURES(jni.JlString value) =>
      _setDIRECTORY_PICTURES(value.reference);

  /// from: static public java.lang.String DIRECTORY_PODCASTS
  static final _getDIRECTORY_PODCASTS =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_PODCASTS")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_PODCASTS =>
      jni.JlString.fromRef(_getDIRECTORY_PODCASTS());
  static final _setDIRECTORY_PODCASTS =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_PODCASTS")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_PODCASTS(jni.JlString value) =>
      _setDIRECTORY_PODCASTS(value.reference);

  /// from: static public java.lang.String DIRECTORY_RINGTONES
  static final _getDIRECTORY_RINGTONES =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_Environment_DIRECTORY_RINGTONES")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlString get DIRECTORY_RINGTONES =>
      jni.JlString.fromRef(_getDIRECTORY_RINGTONES());
  static final _setDIRECTORY_RINGTONES =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_android_os_Environment_DIRECTORY_RINGTONES")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
  static set DIRECTORY_RINGTONES(jni.JlString value) =>
      _setDIRECTORY_RINGTONES(value.reference);

  /// from: static public final java.lang.String MEDIA_BAD_REMOVAL
  static const MEDIA_BAD_REMOVAL = "bad_removal";

  /// from: static public final java.lang.String MEDIA_CHECKING
  static const MEDIA_CHECKING = "checking";

  /// from: static public final java.lang.String MEDIA_EJECTING
  static const MEDIA_EJECTING = "ejecting";

  /// from: static public final java.lang.String MEDIA_MOUNTED
  static const MEDIA_MOUNTED = "mounted";

  /// from: static public final java.lang.String MEDIA_MOUNTED_READ_ONLY
  static const MEDIA_MOUNTED_READ_ONLY = "mounted_ro";

  /// from: static public final java.lang.String MEDIA_NOFS
  static const MEDIA_NOFS = "nofs";

  /// from: static public final java.lang.String MEDIA_REMOVED
  static const MEDIA_REMOVED = "removed";

  /// from: static public final java.lang.String MEDIA_SHARED
  static const MEDIA_SHARED = "shared";

  /// from: static public final java.lang.String MEDIA_UNKNOWN
  static const MEDIA_UNKNOWN = "unknown";

  /// from: static public final java.lang.String MEDIA_UNMOUNTABLE
  static const MEDIA_UNMOUNTABLE = "unmountable";

  /// from: static public final java.lang.String MEDIA_UNMOUNTED
  static const MEDIA_UNMOUNTED = "unmounted";

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Environment() : super.fromRef(_ctor());

  static final _getRootDirectory =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_getRootDirectory")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.io.File getRootDirectory()
  static jni.JlObject getRootDirectory() =>
      jni.JlObject.fromRef(_getRootDirectory());

  static final _getDataDirectory =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_getDataDirectory")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.io.File getDataDirectory()
  static jni.JlObject getDataDirectory() =>
      jni.JlObject.fromRef(_getDataDirectory());

  static final _getExternalStorageDirectory =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_getExternalStorageDirectory")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.io.File getExternalStorageDirectory()
  static jni.JlObject getExternalStorageDirectory() =>
      jni.JlObject.fromRef(_getExternalStorageDirectory());

  static final _getExternalStoragePublicDirectory = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Environment_getExternalStoragePublicDirectory")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.io.File getExternalStoragePublicDirectory(java.lang.String type)
  static jni.JlObject getExternalStoragePublicDirectory(jni.JlString type) =>
      jni.JlObject.fromRef(_getExternalStoragePublicDirectory(type.reference));

  static final _getDownloadCacheDirectory =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_getDownloadCacheDirectory")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.io.File getDownloadCacheDirectory()
  static jni.JlObject getDownloadCacheDirectory() =>
      jni.JlObject.fromRef(_getDownloadCacheDirectory());

  static final _getExternalStorageState =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Environment_getExternalStorageState")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public java.lang.String getExternalStorageState()
  static jni.JlString getExternalStorageState() =>
      jni.JlString.fromRef(_getExternalStorageState());

  static final _getStorageState = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Environment_getStorageState")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getStorageState(java.io.File path)
  static jni.JlString getStorageState(jni.JlObject path) =>
      jni.JlString.fromRef(_getStorageState(path.reference));

  static final _getExternalStorageState_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Environment_getExternalStorageState_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String getExternalStorageState(java.io.File path)
  static jni.JlString getExternalStorageState_1(jni.JlObject path) =>
      jni.JlString.fromRef(_getExternalStorageState_1(path.reference));

  static final _isExternalStorageRemovable =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_Environment_isExternalStorageRemovable")
          .asFunction<int Function()>();

  /// from: static public boolean isExternalStorageRemovable()
  static bool isExternalStorageRemovable() =>
      _isExternalStorageRemovable() != 0;

  static final _isExternalStorageRemovable_1 =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Environment_isExternalStorageRemovable_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isExternalStorageRemovable(java.io.File path)
  static bool isExternalStorageRemovable_1(jni.JlObject path) =>
      _isExternalStorageRemovable_1(path.reference) != 0;

  static final _isExternalStorageEmulated =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_Environment_isExternalStorageEmulated")
          .asFunction<int Function()>();

  /// from: static public boolean isExternalStorageEmulated()
  static bool isExternalStorageEmulated() => _isExternalStorageEmulated() != 0;

  static final _isExternalStorageEmulated_1 =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Environment_isExternalStorageEmulated_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isExternalStorageEmulated(java.io.File path)
  static bool isExternalStorageEmulated_1(jni.JlObject path) =>
      _isExternalStorageEmulated_1(path.reference) != 0;
}

class UserManager extends jni.JlObject {
  UserManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ALLOW_PARENT_PROFILE_APP_LINKING
  static const ALLOW_PARENT_PROFILE_APP_LINKING =
      "allow_parent_profile_app_linking";

  /// from: static public final java.lang.String DISALLOW_ADD_MANAGED_PROFILE
  static const DISALLOW_ADD_MANAGED_PROFILE = "no_add_managed_profile";

  /// from: static public final java.lang.String DISALLOW_ADD_USER
  static const DISALLOW_ADD_USER = "no_add_user";

  /// from: static public final java.lang.String DISALLOW_ADJUST_VOLUME
  static const DISALLOW_ADJUST_VOLUME = "no_adjust_volume";

  /// from: static public final java.lang.String DISALLOW_AIRPLANE_MODE
  static const DISALLOW_AIRPLANE_MODE = "no_airplane_mode";

  /// from: static public final java.lang.String DISALLOW_AMBIENT_DISPLAY
  static const DISALLOW_AMBIENT_DISPLAY = "no_ambient_display";

  /// from: static public final java.lang.String DISALLOW_APPS_CONTROL
  static const DISALLOW_APPS_CONTROL = "no_control_apps";

  /// from: static public final java.lang.String DISALLOW_AUTOFILL
  static const DISALLOW_AUTOFILL = "no_autofill";

  /// from: static public final java.lang.String DISALLOW_BLUETOOTH
  static const DISALLOW_BLUETOOTH = "no_bluetooth";

  /// from: static public final java.lang.String DISALLOW_BLUETOOTH_SHARING
  static const DISALLOW_BLUETOOTH_SHARING = "no_bluetooth_sharing";

  /// from: static public final java.lang.String DISALLOW_CONFIG_BLUETOOTH
  static const DISALLOW_CONFIG_BLUETOOTH = "no_config_bluetooth";

  /// from: static public final java.lang.String DISALLOW_CONFIG_BRIGHTNESS
  static const DISALLOW_CONFIG_BRIGHTNESS = "no_config_brightness";

  /// from: static public final java.lang.String DISALLOW_CONFIG_CELL_BROADCASTS
  static const DISALLOW_CONFIG_CELL_BROADCASTS = "no_config_cell_broadcasts";

  /// from: static public final java.lang.String DISALLOW_CONFIG_CREDENTIALS
  static const DISALLOW_CONFIG_CREDENTIALS = "no_config_credentials";

  /// from: static public final java.lang.String DISALLOW_CONFIG_DATE_TIME
  static const DISALLOW_CONFIG_DATE_TIME = "no_config_date_time";

  /// from: static public final java.lang.String DISALLOW_CONFIG_LOCALE
  static const DISALLOW_CONFIG_LOCALE = "no_config_locale";

  /// from: static public final java.lang.String DISALLOW_CONFIG_LOCATION
  static const DISALLOW_CONFIG_LOCATION = "no_config_location";

  /// from: static public final java.lang.String DISALLOW_CONFIG_MOBILE_NETWORKS
  static const DISALLOW_CONFIG_MOBILE_NETWORKS = "no_config_mobile_networks";

  /// from: static public final java.lang.String DISALLOW_CONFIG_SCREEN_TIMEOUT
  static const DISALLOW_CONFIG_SCREEN_TIMEOUT = "no_config_screen_timeout";

  /// from: static public final java.lang.String DISALLOW_CONFIG_TETHERING
  static const DISALLOW_CONFIG_TETHERING = "no_config_tethering";

  /// from: static public final java.lang.String DISALLOW_CONFIG_VPN
  static const DISALLOW_CONFIG_VPN = "no_config_vpn";

  /// from: static public final java.lang.String DISALLOW_CONFIG_WIFI
  static const DISALLOW_CONFIG_WIFI = "no_config_wifi";

  /// from: static public final java.lang.String DISALLOW_CREATE_WINDOWS
  static const DISALLOW_CREATE_WINDOWS = "no_create_windows";

  /// from: static public final java.lang.String DISALLOW_CROSS_PROFILE_COPY_PASTE
  static const DISALLOW_CROSS_PROFILE_COPY_PASTE =
      "no_cross_profile_copy_paste";

  /// from: static public final java.lang.String DISALLOW_DATA_ROAMING
  static const DISALLOW_DATA_ROAMING = "no_data_roaming";

  /// from: static public final java.lang.String DISALLOW_DEBUGGING_FEATURES
  static const DISALLOW_DEBUGGING_FEATURES = "no_debugging_features";

  /// from: static public final java.lang.String DISALLOW_FACTORY_RESET
  static const DISALLOW_FACTORY_RESET = "no_factory_reset";

  /// from: static public final java.lang.String DISALLOW_FUN
  static const DISALLOW_FUN = "no_fun";

  /// from: static public final java.lang.String DISALLOW_INSTALL_APPS
  static const DISALLOW_INSTALL_APPS = "no_install_apps";

  /// from: static public final java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES
  static const DISALLOW_INSTALL_UNKNOWN_SOURCES = "no_install_unknown_sources";

  /// from: static public final java.lang.String DISALLOW_MODIFY_ACCOUNTS
  static const DISALLOW_MODIFY_ACCOUNTS = "no_modify_accounts";

  /// from: static public final java.lang.String DISALLOW_MOUNT_PHYSICAL_MEDIA
  static const DISALLOW_MOUNT_PHYSICAL_MEDIA = "no_physical_media";

  /// from: static public final java.lang.String DISALLOW_NETWORK_RESET
  static const DISALLOW_NETWORK_RESET = "no_network_reset";

  /// from: static public final java.lang.String DISALLOW_OUTGOING_BEAM
  static const DISALLOW_OUTGOING_BEAM = "no_outgoing_beam";

  /// from: static public final java.lang.String DISALLOW_OUTGOING_CALLS
  static const DISALLOW_OUTGOING_CALLS = "no_outgoing_calls";

  /// from: static public final java.lang.String DISALLOW_PRINTING
  static const DISALLOW_PRINTING = "no_printing";

  /// from: static public final java.lang.String DISALLOW_REMOVE_MANAGED_PROFILE
  static const DISALLOW_REMOVE_MANAGED_PROFILE = "no_remove_managed_profile";

  /// from: static public final java.lang.String DISALLOW_REMOVE_USER
  static const DISALLOW_REMOVE_USER = "no_remove_user";

  /// from: static public final java.lang.String DISALLOW_SAFE_BOOT
  static const DISALLOW_SAFE_BOOT = "no_safe_boot";

  /// from: static public final java.lang.String DISALLOW_SET_USER_ICON
  static const DISALLOW_SET_USER_ICON = "no_set_user_icon";

  /// from: static public final java.lang.String DISALLOW_SET_WALLPAPER
  static const DISALLOW_SET_WALLPAPER = "no_set_wallpaper";

  /// from: static public final java.lang.String DISALLOW_SHARE_INTO_MANAGED_PROFILE
  static const DISALLOW_SHARE_INTO_MANAGED_PROFILE = "no_sharing_into_profile";

  /// from: static public final java.lang.String DISALLOW_SHARE_LOCATION
  static const DISALLOW_SHARE_LOCATION = "no_share_location";

  /// from: static public final java.lang.String DISALLOW_SMS
  static const DISALLOW_SMS = "no_sms";

  /// from: static public final java.lang.String DISALLOW_SYSTEM_ERROR_DIALOGS
  static const DISALLOW_SYSTEM_ERROR_DIALOGS = "no_system_error_dialogs";

  /// from: static public final java.lang.String DISALLOW_UNIFIED_PASSWORD
  static const DISALLOW_UNIFIED_PASSWORD = "no_unified_password";

  /// from: static public final java.lang.String DISALLOW_UNINSTALL_APPS
  static const DISALLOW_UNINSTALL_APPS = "no_uninstall_apps";

  /// from: static public final java.lang.String DISALLOW_UNMUTE_MICROPHONE
  static const DISALLOW_UNMUTE_MICROPHONE = "no_unmute_microphone";

  /// from: static public final java.lang.String DISALLOW_USB_FILE_TRANSFER
  static const DISALLOW_USB_FILE_TRANSFER = "no_usb_file_transfer";

  /// from: static public final java.lang.String DISALLOW_USER_SWITCH
  static const DISALLOW_USER_SWITCH = "no_user_switch";

  /// from: static public final java.lang.String ENSURE_VERIFY_APPS
  static const ENSURE_VERIFY_APPS = "ensure_verify_apps";

  /// from: static public final java.lang.String KEY_RESTRICTIONS_PENDING
  static const KEY_RESTRICTIONS_PENDING = "restrictions_pending";

  /// from: static public final int USER_CREATION_FAILED_NOT_PERMITTED
  static const USER_CREATION_FAILED_NOT_PERMITTED = 1;

  /// from: static public final int USER_CREATION_FAILED_NO_MORE_USERS
  static const USER_CREATION_FAILED_NO_MORE_USERS = 2;

  /// from: static public final int USER_OPERATION_ERROR_CURRENT_USER
  static const USER_OPERATION_ERROR_CURRENT_USER = 4;

  /// from: static public final int USER_OPERATION_ERROR_LOW_STORAGE
  static const USER_OPERATION_ERROR_LOW_STORAGE = 5;

  /// from: static public final int USER_OPERATION_ERROR_MANAGED_PROFILE
  static const USER_OPERATION_ERROR_MANAGED_PROFILE = 2;

  /// from: static public final int USER_OPERATION_ERROR_MAX_RUNNING_USERS
  static const USER_OPERATION_ERROR_MAX_RUNNING_USERS = 3;

  /// from: static public final int USER_OPERATION_ERROR_MAX_USERS
  static const USER_OPERATION_ERROR_MAX_USERS = 6;

  /// from: static public final int USER_OPERATION_ERROR_UNKNOWN
  static const USER_OPERATION_ERROR_UNKNOWN = 1;

  /// from: static public final int USER_OPERATION_SUCCESS
  static const USER_OPERATION_SUCCESS = 0;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_UserManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  UserManager() : super.fromRef(_ctor());

  static final _supportsMultipleUsers =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_UserManager_supportsMultipleUsers")
          .asFunction<int Function()>();

  /// from: static public boolean supportsMultipleUsers()
  static bool supportsMultipleUsers() => _supportsMultipleUsers() != 0;

  static final _getUserName = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_UserManager_getUserName")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getUserName()
  jni.JlString getUserName() => jni.JlString.fromRef(_getUserName(reference));

  static final _isUserAGoat =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserManager_isUserAGoat")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUserAGoat()
  bool isUserAGoat() => _isUserAGoat(reference) != 0;

  static final _isSystemUser =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserManager_isSystemUser")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSystemUser()
  bool isSystemUser() => _isSystemUser(reference) != 0;

  static final _isDemoUser =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserManager_isDemoUser")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDemoUser()
  bool isDemoUser() => _isDemoUser(reference) != 0;

  static final _isUserRunning = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_isUserRunning")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUserRunning(android.os.UserHandle user)
  bool isUserRunning(UserHandle user) =>
      _isUserRunning(reference, user.reference) != 0;

  static final _isUserRunningOrStopping = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_isUserRunningOrStopping")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUserRunningOrStopping(android.os.UserHandle user)
  bool isUserRunningOrStopping(UserHandle user) =>
      _isUserRunningOrStopping(reference, user.reference) != 0;

  static final _isUserUnlocked =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserManager_isUserUnlocked")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUserUnlocked()
  bool isUserUnlocked() => _isUserUnlocked(reference) != 0;

  static final _isUserUnlocked_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_isUserUnlocked_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isUserUnlocked(android.os.UserHandle user)
  bool isUserUnlocked_1(UserHandle user) =>
      _isUserUnlocked_1(reference, user.reference) != 0;

  static final _getUserRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getUserRestrictions")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getUserRestrictions()
  Bundle getUserRestrictions() =>
      Bundle.fromRef(_getUserRestrictions(reference));

  static final _getUserRestrictions_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getUserRestrictions_1")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getUserRestrictions(android.os.UserHandle userHandle)
  Bundle getUserRestrictions_1(UserHandle userHandle) =>
      Bundle.fromRef(_getUserRestrictions_1(reference, userHandle.reference));

  static final _setUserRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_setUserRestrictions")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setUserRestrictions(android.os.Bundle restrictions)
  void setUserRestrictions(Bundle restrictions) =>
      _setUserRestrictions(reference, restrictions.reference);

  static final _setUserRestrictions_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_setUserRestrictions_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setUserRestrictions(android.os.Bundle restrictions, android.os.UserHandle userHandle)
  void setUserRestrictions_1(Bundle restrictions, UserHandle userHandle) =>
      _setUserRestrictions_1(
          reference, restrictions.reference, userHandle.reference);

  static final _setUserRestriction = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("android_os_UserManager_setUserRestriction")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setUserRestriction(java.lang.String key, boolean value)
  void setUserRestriction(jni.JlString key, bool value) =>
      _setUserRestriction(reference, key.reference, value ? 1 : 0);

  static final _hasUserRestriction = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_hasUserRestriction")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasUserRestriction(java.lang.String restrictionKey)
  bool hasUserRestriction(jni.JlString restrictionKey) =>
      _hasUserRestriction(reference, restrictionKey.reference) != 0;

  static final _getSerialNumberForUser = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getSerialNumberForUser")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getSerialNumberForUser(android.os.UserHandle user)
  int getSerialNumberForUser(UserHandle user) =>
      _getSerialNumberForUser(reference, user.reference);

  static final _getUserForSerialNumber = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_UserManager_getUserForSerialNumber")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.os.UserHandle getUserForSerialNumber(long serialNumber)
  UserHandle getUserForSerialNumber(int serialNumber) =>
      UserHandle.fromRef(_getUserForSerialNumber(reference, serialNumber));

  static final _createUserCreationIntent = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_createUserCreationIntent")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createUserCreationIntent(java.lang.String userName, java.lang.String accountName, java.lang.String accountType, android.os.PersistableBundle accountOptions)
  static content.Intent createUserCreationIntent(
          jni.JlString userName,
          jni.JlString accountName,
          jni.JlString accountType,
          PersistableBundle accountOptions) =>
      content.Intent.fromRef(_createUserCreationIntent(
          userName.reference,
          accountName.reference,
          accountType.reference,
          accountOptions.reference));

  static final _getUserCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_UserManager_getUserCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getUserCount()
  int getUserCount() => _getUserCount(reference);

  static final _getUserProfiles = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getUserProfiles")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.os.UserHandle> getUserProfiles()
  jni.JlObject getUserProfiles() =>
      jni.JlObject.fromRef(_getUserProfiles(reference));

  static final _requestQuietModeEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_requestQuietModeEnabled")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean requestQuietModeEnabled(boolean enableQuietMode, android.os.UserHandle userHandle)
  bool requestQuietModeEnabled(bool enableQuietMode, UserHandle userHandle) =>
      _requestQuietModeEnabled(
          reference, enableQuietMode ? 1 : 0, userHandle.reference) !=
      0;

  static final _isQuietModeEnabled = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_isQuietModeEnabled")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isQuietModeEnabled(android.os.UserHandle userHandle)
  bool isQuietModeEnabled(UserHandle userHandle) =>
      _isQuietModeEnabled(reference, userHandle.reference) != 0;

  static final _getApplicationRestrictions = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getApplicationRestrictions")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getApplicationRestrictions(java.lang.String packageName)
  Bundle getApplicationRestrictions(jni.JlString packageName) => Bundle.fromRef(
      _getApplicationRestrictions(reference, packageName.reference));

  static final _setRestrictionsChallenge = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_setRestrictionsChallenge")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setRestrictionsChallenge(java.lang.String newPin)
  bool setRestrictionsChallenge(jni.JlString newPin) =>
      _setRestrictionsChallenge(reference, newPin.reference) != 0;

  static final _getUserCreationTime = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager_getUserCreationTime")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getUserCreationTime(android.os.UserHandle userHandle)
  int getUserCreationTime(UserHandle userHandle) =>
      _getUserCreationTime(reference, userHandle.reference);
}

class UserManager_UserOperationException extends jni.JlObject {
  UserManager_UserOperationException.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_UserManager__UserOperationException_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: void <init>(java.lang.String message, int userOperationResult)
  UserManager_UserOperationException(
      jni.JlString message, int userOperationResult)
      : super.fromRef(_ctor(message.reference, userOperationResult));

  static final _getUserOperationResult = jlookup<
              ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_UserManager__UserOperationException_getUserOperationResult")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getUserOperationResult()
  int getUserOperationResult() => _getUserOperationResult(reference);
}

class ProxyFileDescriptorCallback extends jni.JlObject {
  ProxyFileDescriptorCallback.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_ProxyFileDescriptorCallback_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  ProxyFileDescriptorCallback() : super.fromRef(_ctor());

  static final _onGetSize =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ProxyFileDescriptorCallback_onGetSize")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long onGetSize()
  int onGetSize() => _onGetSize(reference);

  static final _onRead = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_os_ProxyFileDescriptorCallback_onRead")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public int onRead(long offset, int size, byte[] data)
  int onRead(int offset, int size, jni.JlObject data) =>
      _onRead(reference, offset, size, data.reference);

  static final _onWrite = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int64,
                      ffi.Int32, ffi.Pointer<ffi.Void>)>>(
          "android_os_ProxyFileDescriptorCallback_onWrite")
      .asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public int onWrite(long offset, int size, byte[] data)
  int onWrite(int offset, int size, jni.JlObject data) =>
      _onWrite(reference, offset, size, data.reference);

  static final _onFsync =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ProxyFileDescriptorCallback_onFsync")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onFsync()
  void onFsync() => _onFsync(reference);

  static final _onRelease =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_ProxyFileDescriptorCallback_onRelease")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onRelease()
  void onRelease() => _onRelease(reference);
}

class PersistableBundle extends BaseBundle {
  PersistableBundle.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.PersistableBundle> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_PersistableBundle_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static Parcelable_Creator get CREATOR =>
      Parcelable_Creator.fromRef(_getCREATOR());

  /// from: static public final android.os.PersistableBundle EMPTY
  static final _getEMPTY =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_PersistableBundle_EMPTY")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static PersistableBundle get EMPTY => PersistableBundle.fromRef(_getEMPTY());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_PersistableBundle_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  PersistableBundle() : super.fromRef(_ctor());

  static final _ctor_1 =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
              "android_os_PersistableBundle_new_1")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: public void <init>(int capacity)
  PersistableBundle.ctor_1(int capacity) : super.fromRef(_ctor_1(capacity));

  static final _ctor_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_PersistableBundle_new_2")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.PersistableBundle b)
  PersistableBundle.ctor_2(PersistableBundle b)
      : super.fromRef(_ctor_2(b.reference));

  static final _clone = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_PersistableBundle_clone")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object clone()
  jni.JlObject clone() => jni.JlObject.fromRef(_clone(reference));

  static final _deepCopy = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_PersistableBundle_deepCopy")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PersistableBundle deepCopy()
  PersistableBundle deepCopy() =>
      PersistableBundle.fromRef(_deepCopy(reference));

  static final _putPersistableBundle = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_PersistableBundle_putPersistableBundle")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void putPersistableBundle(java.lang.String key, android.os.PersistableBundle value)
  void putPersistableBundle(jni.JlString key, PersistableBundle value) =>
      _putPersistableBundle(reference, key.reference, value.reference);

  static final _getPersistableBundle = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_PersistableBundle_getPersistableBundle")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.PersistableBundle getPersistableBundle(java.lang.String key)
  PersistableBundle getPersistableBundle(jni.JlString key) =>
      PersistableBundle.fromRef(
          _getPersistableBundle(reference, key.reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_PersistableBundle_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_PersistableBundle_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(Parcel parcel, int flags) =>
      _writeToParcel(reference, parcel.reference, flags);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_PersistableBundle_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: synchronized public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));
}

class Process extends jni.JlObject {
  Process.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int FIRST_APPLICATION_UID
  static const FIRST_APPLICATION_UID = 10000;

  /// from: static public final int LAST_APPLICATION_UID
  static const LAST_APPLICATION_UID = 19999;

  /// from: static public final int PHONE_UID
  static const PHONE_UID = 1001;

  /// from: static public final int SIGNAL_KILL
  static const SIGNAL_KILL = 9;

  /// from: static public final int SIGNAL_QUIT
  static const SIGNAL_QUIT = 3;

  /// from: static public final int SIGNAL_USR1
  static const SIGNAL_USR1 = 10;

  /// from: static public final int SYSTEM_UID
  static const SYSTEM_UID = 1000;

  /// from: static public final int THREAD_PRIORITY_AUDIO
  static const THREAD_PRIORITY_AUDIO = -16;

  /// from: static public final int THREAD_PRIORITY_BACKGROUND
  static const THREAD_PRIORITY_BACKGROUND = 10;

  /// from: static public final int THREAD_PRIORITY_DEFAULT
  static const THREAD_PRIORITY_DEFAULT = 0;

  /// from: static public final int THREAD_PRIORITY_DISPLAY
  static const THREAD_PRIORITY_DISPLAY = -4;

  /// from: static public final int THREAD_PRIORITY_FOREGROUND
  static const THREAD_PRIORITY_FOREGROUND = -2;

  /// from: static public final int THREAD_PRIORITY_LESS_FAVORABLE
  static const THREAD_PRIORITY_LESS_FAVORABLE = 1;

  /// from: static public final int THREAD_PRIORITY_LOWEST
  static const THREAD_PRIORITY_LOWEST = 19;

  /// from: static public final int THREAD_PRIORITY_MORE_FAVORABLE
  static const THREAD_PRIORITY_MORE_FAVORABLE = -1;

  /// from: static public final int THREAD_PRIORITY_URGENT_AUDIO
  static const THREAD_PRIORITY_URGENT_AUDIO = -19;

  /// from: static public final int THREAD_PRIORITY_URGENT_DISPLAY
  static const THREAD_PRIORITY_URGENT_DISPLAY = -8;

  /// from: static public final int THREAD_PRIORITY_VIDEO
  static const THREAD_PRIORITY_VIDEO = -10;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Process_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Process() : super.fromRef(_ctor());

  static final _getElapsedCpuTime =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Process_getElapsedCpuTime")
          .asFunction<int Function()>();

  /// from: static public native final long getElapsedCpuTime()
  static int getElapsedCpuTime() => _getElapsedCpuTime();

  static final _getStartElapsedRealtime =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Process_getStartElapsedRealtime")
          .asFunction<int Function()>();

  /// from: static public final long getStartElapsedRealtime()
  static int getStartElapsedRealtime() => _getStartElapsedRealtime();

  static final _getStartUptimeMillis =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Process_getStartUptimeMillis")
          .asFunction<int Function()>();

  /// from: static public final long getStartUptimeMillis()
  static int getStartUptimeMillis() => _getStartUptimeMillis();

  static final _is64Bit = jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          "android_os_Process_is64Bit")
      .asFunction<int Function()>();

  /// from: static public final boolean is64Bit()
  static bool is64Bit() => _is64Bit() != 0;

  static final _myPid = jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          "android_os_Process_myPid")
      .asFunction<int Function()>();

  /// from: static public final int myPid()
  static int myPid() => _myPid();

  static final _myTid = jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          "android_os_Process_myTid")
      .asFunction<int Function()>();

  /// from: static public final int myTid()
  static int myTid() => _myTid();

  static final _myUid = jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          "android_os_Process_myUid")
      .asFunction<int Function()>();

  /// from: static public final int myUid()
  static int myUid() => _myUid();

  static final _myUserHandle =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Process_myUserHandle")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public android.os.UserHandle myUserHandle()
  static UserHandle myUserHandle() => UserHandle.fromRef(_myUserHandle());

  static final _isApplicationUid =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int32)>>(
              "android_os_Process_isApplicationUid")
          .asFunction<int Function(int)>();

  /// from: static public boolean isApplicationUid(int uid)
  static bool isApplicationUid(int uid) => _isApplicationUid(uid) != 0;

  static final _isIsolated = jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          "android_os_Process_isIsolated")
      .asFunction<int Function()>();

  /// from: static public final boolean isIsolated()
  static bool isIsolated() => _isIsolated() != 0;

  static final _getUidForName =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Process_getUidForName")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public native final int getUidForName(java.lang.String name)
  static int getUidForName(jni.JlString name) => _getUidForName(name.reference);

  static final _getGidForName =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Process_getGidForName")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public native final int getGidForName(java.lang.String name)
  static int getGidForName(jni.JlString name) => _getGidForName(name.reference);

  static final _setThreadPriority =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
              "android_os_Process_setThreadPriority")
          .asFunction<void Function(int, int)>();

  /// from: static public native final void setThreadPriority(int tid, int priority)
  static void setThreadPriority(int tid, int priority) =>
      _setThreadPriority(tid, priority);

  static final _getExclusiveCores =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Process_getExclusiveCores")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public native final int[] getExclusiveCores()
  static jni.JlObject getExclusiveCores() =>
      jni.JlObject.fromRef(_getExclusiveCores());

  static final _setThreadPriority_1 =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
              "android_os_Process_setThreadPriority_1")
          .asFunction<void Function(int)>();

  /// from: static public native final void setThreadPriority(int priority)
  static void setThreadPriority_1(int priority) =>
      _setThreadPriority_1(priority);

  static final _getThreadPriority =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
              "android_os_Process_getThreadPriority")
          .asFunction<int Function(int)>();

  /// from: static public native final int getThreadPriority(int tid)
  static int getThreadPriority(int tid) => _getThreadPriority(tid);

  static final _supportsProcesses =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
              "android_os_Process_supportsProcesses")
          .asFunction<int Function()>();

  /// from: static public final boolean supportsProcesses()
  static bool supportsProcesses() => _supportsProcesses() != 0;

  static final _killProcess =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
              "android_os_Process_killProcess")
          .asFunction<void Function(int)>();

  /// from: static public final void killProcess(int pid)
  static void killProcess(int pid) => _killProcess(pid);

  static final _sendSignal =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
              "android_os_Process_sendSignal")
          .asFunction<void Function(int, int)>();

  /// from: static public native final void sendSignal(int pid, int signal)
  static void sendSignal(int pid, int signal) => _sendSignal(pid, signal);
}

class SystemClock extends jni.JlObject {
  SystemClock.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_SystemClock_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  SystemClock() : super.fromRef(_ctor());

  static final _sleep =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
              "android_os_SystemClock_sleep")
          .asFunction<void Function(int)>();

  /// from: static public void sleep(long ms)
  static void sleep(int ms) => _sleep(ms);

  static final _setCurrentTimeMillis =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int64)>>(
              "android_os_SystemClock_setCurrentTimeMillis")
          .asFunction<int Function(int)>();

  /// from: static public boolean setCurrentTimeMillis(long millis)
  static bool setCurrentTimeMillis(int millis) =>
      _setCurrentTimeMillis(millis) != 0;

  static final _uptimeMillis =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_SystemClock_uptimeMillis")
          .asFunction<int Function()>();

  /// from: static public native long uptimeMillis()
  static int uptimeMillis() => _uptimeMillis();

  static final _elapsedRealtime =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_SystemClock_elapsedRealtime")
          .asFunction<int Function()>();

  /// from: static public native long elapsedRealtime()
  static int elapsedRealtime() => _elapsedRealtime();

  static final _elapsedRealtimeNanos =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_SystemClock_elapsedRealtimeNanos")
          .asFunction<int Function()>();

  /// from: static public native long elapsedRealtimeNanos()
  static int elapsedRealtimeNanos() => _elapsedRealtimeNanos();

  static final _currentThreadTimeMillis =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_SystemClock_currentThreadTimeMillis")
          .asFunction<int Function()>();

  /// from: static public native long currentThreadTimeMillis()
  static int currentThreadTimeMillis() => _currentThreadTimeMillis();
}

class Binder extends jni.JlObject {
  Binder.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Binder_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Binder() : super.fromRef(_ctor());

  static final _getCallingPid =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Binder_getCallingPid")
          .asFunction<int Function()>();

  /// from: static public native final int getCallingPid()
  static int getCallingPid() => _getCallingPid();

  static final _getCallingUid =
      jlookup<ffi.NativeFunction<ffi.Int32 Function()>>(
              "android_os_Binder_getCallingUid")
          .asFunction<int Function()>();

  /// from: static public native final int getCallingUid()
  static int getCallingUid() => _getCallingUid();

  static final _getCallingUserHandle =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_Binder_getCallingUserHandle")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public final android.os.UserHandle getCallingUserHandle()
  static UserHandle getCallingUserHandle() =>
      UserHandle.fromRef(_getCallingUserHandle());

  static final _clearCallingIdentity =
      jlookup<ffi.NativeFunction<ffi.Int64 Function()>>(
              "android_os_Binder_clearCallingIdentity")
          .asFunction<int Function()>();

  /// from: static public native final long clearCallingIdentity()
  static int clearCallingIdentity() => _clearCallingIdentity();

  static final _restoreCallingIdentity =
      jlookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
              "android_os_Binder_restoreCallingIdentity")
          .asFunction<void Function(int)>();

  /// from: static public native final void restoreCallingIdentity(long token)
  static void restoreCallingIdentity(int token) =>
      _restoreCallingIdentity(token);

  static final _flushPendingCommands =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Binder_flushPendingCommands")
          .asFunction<void Function()>();

  /// from: static public native final void flushPendingCommands()
  static void flushPendingCommands() => _flushPendingCommands();

  static final _joinThreadPool =
      jlookup<ffi.NativeFunction<ffi.Void Function()>>(
              "android_os_Binder_joinThreadPool")
          .asFunction<void Function()>();

  /// from: static public final void joinThreadPool()
  static void joinThreadPool() => _joinThreadPool();

  static final _attachInterface = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Binder_attachInterface")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void attachInterface(android.os.IInterface owner, java.lang.String descriptor)
  void attachInterface(IInterface owner, jni.JlString descriptor) =>
      _attachInterface(reference, owner.reference, descriptor.reference);

  static final _getInterfaceDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_Binder_getInterfaceDescriptor")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getInterfaceDescriptor()
  jni.JlString getInterfaceDescriptor() =>
      jni.JlString.fromRef(_getInterfaceDescriptor(reference));

  static final _pingBinder =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Binder_pingBinder")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean pingBinder()
  bool pingBinder() => _pingBinder(reference) != 0;

  static final _isBinderAlive =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_Binder_isBinderAlive")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isBinderAlive()
  bool isBinderAlive() => _isBinderAlive(reference) != 0;

  static final _queryLocalInterface = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_Binder_queryLocalInterface")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IInterface queryLocalInterface(java.lang.String descriptor)
  IInterface queryLocalInterface(jni.JlString descriptor) =>
      IInterface.fromRef(_queryLocalInterface(reference, descriptor.reference));

  static final _onTransact = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Binder_onTransact")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: protected boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
  bool onTransact(int code, Parcel data, Parcel reply, int flags) =>
      _onTransact(reference, code, data.reference, reply.reference, flags) != 0;

  static final _dump = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Binder_dump")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.io.FileDescriptor fd, java.lang.String[] args)
  void dump(jni.JlObject fd, jni.JlObject args) =>
      _dump(reference, fd.reference, args.reference);

  static final _dumpAsync = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Binder_dumpAsync")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dumpAsync(java.io.FileDescriptor fd, java.lang.String[] args)
  void dumpAsync(jni.JlObject fd, jni.JlObject args) =>
      _dumpAsync(reference, fd.reference, args.reference);

  static final _dump_1 = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("android_os_Binder_dump_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter fout, java.lang.String[] args)
  void dump_1(jni.JlObject fd, jni.JlObject fout, jni.JlObject args) =>
      _dump_1(reference, fd.reference, fout.reference, args.reference);

  static final _transact = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Binder_transact")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean transact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)
  bool transact(int code, Parcel data, Parcel reply, int flags) =>
      _transact(reference, code, data.reference, reply.reference, flags) != 0;

  static final _linkToDeath = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Binder_linkToDeath")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void linkToDeath(android.os.IBinder.DeathRecipient recipient, int flags)
  void linkToDeath(IBinder_DeathRecipient recipient, int flags) =>
      _linkToDeath(reference, recipient.reference, flags);

  static final _unlinkToDeath = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_Binder_unlinkToDeath")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean unlinkToDeath(android.os.IBinder.DeathRecipient recipient, int flags)
  bool unlinkToDeath(IBinder_DeathRecipient recipient, int flags) =>
      _unlinkToDeath(reference, recipient.reference, flags) != 0;
}
