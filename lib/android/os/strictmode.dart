// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "../../init.dart" show jlookup;

class ResourceMismatchViolation extends Violation {
  ResourceMismatchViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_ResourceMismatchViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.Object tag)
  ResourceMismatchViolation(jni.JlObject tag)
      : super.fromRef(_ctor(tag.reference));
}

class DiskWriteViolation extends Violation {
  DiskWriteViolation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_strictmode_DiskWriteViolation_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  DiskWriteViolation() : super.fromRef(_ctor());
}

class InstanceCountViolation extends Violation {
  InstanceCountViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int32)>>(
          "android_os_strictmode_InstanceCountViolation_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: void <init>(java.lang.Class klass, long instances, int limit)
  InstanceCountViolation(jni.JlObject klass, int instances, int limit)
      : super.fromRef(_ctor(klass.reference, instances, limit));

  static final _getNumberOfInstances = jlookup<
              ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_InstanceCountViolation_getNumberOfInstances")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getNumberOfInstances()
  int getNumberOfInstances() => _getNumberOfInstances(reference);
}

class SqliteObjectLeakedViolation extends Violation {
  SqliteObjectLeakedViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_SqliteObjectLeakedViolation_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String message, java.lang.Throwable originStack)
  SqliteObjectLeakedViolation(jni.JlString message, jni.JlObject originStack)
      : super.fromRef(_ctor(message.reference, originStack.reference));
}

class CustomViolation extends Violation {
  CustomViolation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_CustomViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String name)
  CustomViolation(jni.JlString name) : super.fromRef(_ctor(name.reference));
}

class LeakedClosableViolation extends Violation {
  LeakedClosableViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_LeakedClosableViolation_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String message, java.lang.Throwable allocationSite)
  LeakedClosableViolation(jni.JlString message, jni.JlObject allocationSite)
      : super.fromRef(_ctor(message.reference, allocationSite.reference));
}

class WebViewMethodCalledOnWrongThreadViolation extends Violation {
  WebViewMethodCalledOnWrongThreadViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_WebViewMethodCalledOnWrongThreadViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.Throwable originStack)
  WebViewMethodCalledOnWrongThreadViolation(jni.JlObject originStack)
      : super.fromRef(_ctor(originStack.reference));
}

class FileUriExposedViolation extends Violation {
  FileUriExposedViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_FileUriExposedViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String msg)
  FileUriExposedViolation(jni.JlString msg)
      : super.fromRef(_ctor(msg.reference));
}

class ContentUriWithoutPermissionViolation extends Violation {
  ContentUriWithoutPermissionViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_ContentUriWithoutPermissionViolation_new")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.net.Uri uri, java.lang.String location)
  ContentUriWithoutPermissionViolation(jni.JlObject uri, jni.JlString location)
      : super.fromRef(_ctor(uri.reference, location.reference));
}

class NonSdkApiUsedViolation extends Violation {
  NonSdkApiUsedViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_NonSdkApiUsedViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String message)
  NonSdkApiUsedViolation(jni.JlString message)
      : super.fromRef(_ctor(message.reference));
}

class IntentReceiverLeakedViolation extends Violation {
  IntentReceiverLeakedViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_IntentReceiverLeakedViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.Throwable originStack)
  IntentReceiverLeakedViolation(jni.JlObject originStack)
      : super.fromRef(_ctor(originStack.reference));
}

class UnbufferedIoViolation extends Violation {
  UnbufferedIoViolation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_strictmode_UnbufferedIoViolation_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  UnbufferedIoViolation() : super.fromRef(_ctor());
}

class ServiceConnectionLeakedViolation extends Violation {
  ServiceConnectionLeakedViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_ServiceConnectionLeakedViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.Throwable originStack)
  ServiceConnectionLeakedViolation(jni.JlObject originStack)
      : super.fromRef(_ctor(originStack.reference));
}

class Violation extends jni.JlObject {
  Violation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_Violation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String message)
  Violation(jni.JlString message) : super.fromRef(_ctor(message.reference));
}

class UntaggedSocketViolation extends Violation {
  UntaggedSocketViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_strictmode_UntaggedSocketViolation_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  UntaggedSocketViolation() : super.fromRef(_ctor());
}

class NetworkViolation extends Violation {
  NetworkViolation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_strictmode_NetworkViolation_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  NetworkViolation() : super.fromRef(_ctor());
}

class DiskReadViolation extends Violation {
  DiskReadViolation.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_strictmode_DiskReadViolation_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  DiskReadViolation() : super.fromRef(_ctor());
}

class CleartextNetworkViolation extends Violation {
  CleartextNetworkViolation.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_strictmode_CleartextNetworkViolation_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(java.lang.String msg)
  CleartextNetworkViolation(jni.JlString msg)
      : super.fromRef(_ctor(msg.reference));
}
