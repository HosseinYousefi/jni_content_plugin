// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "package:content_plugin/android/os.dart" as os;
import "../../init.dart" show jlookup;

class ProcessHealthStats extends jni.JlObject {
  ProcessHealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int MEASUREMENT_ANR_COUNT
  static const MEASUREMENT_ANR_COUNT = 30005;

  /// from: static public final int MEASUREMENT_CRASHES_COUNT
  static const MEASUREMENT_CRASHES_COUNT = 30004;

  /// from: static public final int MEASUREMENT_FOREGROUND_MS
  static const MEASUREMENT_FOREGROUND_MS = 30006;

  /// from: static public final int MEASUREMENT_STARTS_COUNT
  static const MEASUREMENT_STARTS_COUNT = 30003;

  /// from: static public final int MEASUREMENT_SYSTEM_TIME_MS
  static const MEASUREMENT_SYSTEM_TIME_MS = 30002;

  /// from: static public final int MEASUREMENT_USER_TIME_MS
  static const MEASUREMENT_USER_TIME_MS = 30001;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_ProcessHealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  ProcessHealthStats() : super.fromRef(_ctor());
}

class PidHealthStats extends jni.JlObject {
  PidHealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int MEASUREMENT_WAKE_NESTING_COUNT
  static const MEASUREMENT_WAKE_NESTING_COUNT = 20001;

  /// from: static public final int MEASUREMENT_WAKE_START_MS
  static const MEASUREMENT_WAKE_START_MS = 20003;

  /// from: static public final int MEASUREMENT_WAKE_SUM_MS
  static const MEASUREMENT_WAKE_SUM_MS = 20002;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_PidHealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  PidHealthStats() : super.fromRef(_ctor());
}

class HealthStats extends jni.JlObject {
  HealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_HealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  HealthStats() : super.fromRef(_ctor());

  static final _getDataType = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_health_HealthStats_getDataType")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDataType()
  jni.JlString getDataType() => jni.JlString.fromRef(_getDataType(reference));

  static final _hasTimer = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_hasTimer")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasTimer(int key)
  bool hasTimer(int key) => _hasTimer(reference, key) != 0;

  static final _getTimer = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimer")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.os.health.TimerStat getTimer(int key)
  TimerStat getTimer(int key) => TimerStat.fromRef(_getTimer(reference, key));

  static final _getTimerCount = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimerCount")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getTimerCount(int key)
  int getTimerCount(int key) => _getTimerCount(reference, key);

  static final _getTimerTime = jlookup<
          ffi.NativeFunction<
              ffi.Int64 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimerTime")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getTimerTime(int key)
  int getTimerTime(int key) => _getTimerTime(reference, key);

  static final _getTimerKeyCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_HealthStats_getTimerKeyCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTimerKeyCount()
  int getTimerKeyCount() => _getTimerKeyCount(reference);

  static final _getTimerKeyAt = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimerKeyAt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getTimerKeyAt(int index)
  int getTimerKeyAt(int index) => _getTimerKeyAt(reference, index);

  static final _hasMeasurement = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_hasMeasurement")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasMeasurement(int key)
  bool hasMeasurement(int key) => _hasMeasurement(reference, key) != 0;

  static final _getMeasurement = jlookup<
          ffi.NativeFunction<
              ffi.Int64 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getMeasurement")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getMeasurement(int key)
  int getMeasurement(int key) => _getMeasurement(reference, key);

  static final _getMeasurementKeyCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_HealthStats_getMeasurementKeyCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMeasurementKeyCount()
  int getMeasurementKeyCount() => _getMeasurementKeyCount(reference);

  static final _getMeasurementKeyAt = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_health_HealthStats_getMeasurementKeyAt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getMeasurementKeyAt(int index)
  int getMeasurementKeyAt(int index) => _getMeasurementKeyAt(reference, index);

  static final _hasStats = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_hasStats")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasStats(int key)
  bool hasStats(int key) => _hasStats(reference, key) != 0;

  static final _getStats = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getStats")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.Map<java.lang.String,android.os.health.HealthStats> getStats(int key)
  jni.JlObject getStats(int key) =>
      jni.JlObject.fromRef(_getStats(reference, key));

  static final _getStatsKeyCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_HealthStats_getStatsKeyCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getStatsKeyCount()
  int getStatsKeyCount() => _getStatsKeyCount(reference);

  static final _getStatsKeyAt = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getStatsKeyAt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getStatsKeyAt(int index)
  int getStatsKeyAt(int index) => _getStatsKeyAt(reference, index);

  static final _hasTimers = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_hasTimers")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasTimers(int key)
  bool hasTimers(int key) => _hasTimers(reference, key) != 0;

  static final _getTimers = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimers")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.Map<java.lang.String,android.os.health.TimerStat> getTimers(int key)
  jni.JlObject getTimers(int key) =>
      jni.JlObject.fromRef(_getTimers(reference, key));

  static final _getTimersKeyCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_HealthStats_getTimersKeyCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTimersKeyCount()
  int getTimersKeyCount() => _getTimersKeyCount(reference);

  static final _getTimersKeyAt = jlookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getTimersKeyAt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getTimersKeyAt(int index)
  int getTimersKeyAt(int index) => _getTimersKeyAt(reference, index);

  static final _hasMeasurements = jlookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_hasMeasurements")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean hasMeasurements(int key)
  bool hasMeasurements(int key) => _hasMeasurements(reference, key) != 0;

  static final _getMeasurements = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_HealthStats_getMeasurements")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.util.Map<java.lang.String,java.lang.Long> getMeasurements(int key)
  jni.JlObject getMeasurements(int key) =>
      jni.JlObject.fromRef(_getMeasurements(reference, key));

  static final _getMeasurementsKeyCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_HealthStats_getMeasurementsKeyCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMeasurementsKeyCount()
  int getMeasurementsKeyCount() => _getMeasurementsKeyCount(reference);

  static final _getMeasurementsKeyAt = jlookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_health_HealthStats_getMeasurementsKeyAt")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getMeasurementsKeyAt(int index)
  int getMeasurementsKeyAt(int index) =>
      _getMeasurementsKeyAt(reference, index);
}

class UidHealthStats extends jni.JlObject {
  UidHealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int MEASUREMENT_BLUETOOTH_IDLE_MS
  static const MEASUREMENT_BLUETOOTH_IDLE_MS = 10020;

  /// from: static public final int MEASUREMENT_BLUETOOTH_POWER_MAMS
  static const MEASUREMENT_BLUETOOTH_POWER_MAMS = 10023;

  /// from: static public final int MEASUREMENT_BLUETOOTH_RX_BYTES
  static const MEASUREMENT_BLUETOOTH_RX_BYTES = 10052;

  /// from: static public final int MEASUREMENT_BLUETOOTH_RX_MS
  static const MEASUREMENT_BLUETOOTH_RX_MS = 10021;

  /// from: static public final int MEASUREMENT_BLUETOOTH_RX_PACKETS
  static const MEASUREMENT_BLUETOOTH_RX_PACKETS = 10058;

  /// from: static public final int MEASUREMENT_BLUETOOTH_TX_BYTES
  static const MEASUREMENT_BLUETOOTH_TX_BYTES = 10053;

  /// from: static public final int MEASUREMENT_BLUETOOTH_TX_MS
  static const MEASUREMENT_BLUETOOTH_TX_MS = 10022;

  /// from: static public final int MEASUREMENT_BLUETOOTH_TX_PACKETS
  static const MEASUREMENT_BLUETOOTH_TX_PACKETS = 10059;

  /// from: static public final int MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT
  static const MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT = 10046;

  /// from: static public final int MEASUREMENT_CPU_POWER_MAMS
  static const MEASUREMENT_CPU_POWER_MAMS = 10064;

  /// from: static public final int MEASUREMENT_MOBILE_IDLE_MS
  static const MEASUREMENT_MOBILE_IDLE_MS = 10024;

  /// from: static public final int MEASUREMENT_MOBILE_POWER_MAMS
  static const MEASUREMENT_MOBILE_POWER_MAMS = 10027;

  /// from: static public final int MEASUREMENT_MOBILE_RX_BYTES
  static const MEASUREMENT_MOBILE_RX_BYTES = 10048;

  /// from: static public final int MEASUREMENT_MOBILE_RX_MS
  static const MEASUREMENT_MOBILE_RX_MS = 10025;

  /// from: static public final int MEASUREMENT_MOBILE_RX_PACKETS
  static const MEASUREMENT_MOBILE_RX_PACKETS = 10054;

  /// from: static public final int MEASUREMENT_MOBILE_TX_BYTES
  static const MEASUREMENT_MOBILE_TX_BYTES = 10049;

  /// from: static public final int MEASUREMENT_MOBILE_TX_MS
  static const MEASUREMENT_MOBILE_TX_MS = 10026;

  /// from: static public final int MEASUREMENT_MOBILE_TX_PACKETS
  static const MEASUREMENT_MOBILE_TX_PACKETS = 10055;

  /// from: static public final int MEASUREMENT_OTHER_USER_ACTIVITY_COUNT
  static const MEASUREMENT_OTHER_USER_ACTIVITY_COUNT = 10045;

  /// from: static public final int MEASUREMENT_REALTIME_BATTERY_MS
  static const MEASUREMENT_REALTIME_BATTERY_MS = 10001;

  /// from: static public final int MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS
  static const MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS = 10003;

  /// from: static public final int MEASUREMENT_SYSTEM_CPU_TIME_MS
  static const MEASUREMENT_SYSTEM_CPU_TIME_MS = 10063;

  /// from: static public final int MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT
  static const MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT = 10047;

  /// from: static public final int MEASUREMENT_UPTIME_BATTERY_MS
  static const MEASUREMENT_UPTIME_BATTERY_MS = 10002;

  /// from: static public final int MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS
  static const MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS = 10004;

  /// from: static public final int MEASUREMENT_USER_CPU_TIME_MS
  static const MEASUREMENT_USER_CPU_TIME_MS = 10062;

  /// from: static public final int MEASUREMENT_WIFI_FULL_LOCK_MS
  static const MEASUREMENT_WIFI_FULL_LOCK_MS = 10029;

  /// from: static public final int MEASUREMENT_WIFI_IDLE_MS
  static const MEASUREMENT_WIFI_IDLE_MS = 10016;

  /// from: static public final int MEASUREMENT_WIFI_MULTICAST_MS
  static const MEASUREMENT_WIFI_MULTICAST_MS = 10031;

  /// from: static public final int MEASUREMENT_WIFI_POWER_MAMS
  static const MEASUREMENT_WIFI_POWER_MAMS = 10019;

  /// from: static public final int MEASUREMENT_WIFI_RUNNING_MS
  static const MEASUREMENT_WIFI_RUNNING_MS = 10028;

  /// from: static public final int MEASUREMENT_WIFI_RX_BYTES
  static const MEASUREMENT_WIFI_RX_BYTES = 10050;

  /// from: static public final int MEASUREMENT_WIFI_RX_MS
  static const MEASUREMENT_WIFI_RX_MS = 10017;

  /// from: static public final int MEASUREMENT_WIFI_RX_PACKETS
  static const MEASUREMENT_WIFI_RX_PACKETS = 10056;

  /// from: static public final int MEASUREMENT_WIFI_TX_BYTES
  static const MEASUREMENT_WIFI_TX_BYTES = 10051;

  /// from: static public final int MEASUREMENT_WIFI_TX_MS
  static const MEASUREMENT_WIFI_TX_MS = 10018;

  /// from: static public final int MEASUREMENT_WIFI_TX_PACKETS
  static const MEASUREMENT_WIFI_TX_PACKETS = 10057;

  /// from: static public final int STATS_PACKAGES
  static const STATS_PACKAGES = 10015;

  /// from: static public final int STATS_PIDS
  static const STATS_PIDS = 10013;

  /// from: static public final int STATS_PROCESSES
  static const STATS_PROCESSES = 10014;

  /// from: static public final int TIMERS_JOBS
  static const TIMERS_JOBS = 10010;

  /// from: static public final int TIMERS_SENSORS
  static const TIMERS_SENSORS = 10012;

  /// from: static public final int TIMERS_SYNCS
  static const TIMERS_SYNCS = 10009;

  /// from: static public final int TIMERS_WAKELOCKS_DRAW
  static const TIMERS_WAKELOCKS_DRAW = 10008;

  /// from: static public final int TIMERS_WAKELOCKS_FULL
  static const TIMERS_WAKELOCKS_FULL = 10005;

  /// from: static public final int TIMERS_WAKELOCKS_PARTIAL
  static const TIMERS_WAKELOCKS_PARTIAL = 10006;

  /// from: static public final int TIMERS_WAKELOCKS_WINDOW
  static const TIMERS_WAKELOCKS_WINDOW = 10007;

  /// from: static public final int TIMER_AUDIO
  static const TIMER_AUDIO = 10032;

  /// from: static public final int TIMER_BLUETOOTH_SCAN
  static const TIMER_BLUETOOTH_SCAN = 10037;

  /// from: static public final int TIMER_CAMERA
  static const TIMER_CAMERA = 10035;

  /// from: static public final int TIMER_FLASHLIGHT
  static const TIMER_FLASHLIGHT = 10034;

  /// from: static public final int TIMER_FOREGROUND_ACTIVITY
  static const TIMER_FOREGROUND_ACTIVITY = 10036;

  /// from: static public final int TIMER_GPS_SENSOR
  static const TIMER_GPS_SENSOR = 10011;

  /// from: static public final int TIMER_MOBILE_RADIO_ACTIVE
  static const TIMER_MOBILE_RADIO_ACTIVE = 10061;

  /// from: static public final int TIMER_PROCESS_STATE_BACKGROUND_MS
  static const TIMER_PROCESS_STATE_BACKGROUND_MS = 10042;

  /// from: static public final int TIMER_PROCESS_STATE_CACHED_MS
  static const TIMER_PROCESS_STATE_CACHED_MS = 10043;

  /// from: static public final int TIMER_PROCESS_STATE_FOREGROUND_MS
  static const TIMER_PROCESS_STATE_FOREGROUND_MS = 10041;

  /// from: static public final int TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS
  static const TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS = 10039;

  /// from: static public final int TIMER_PROCESS_STATE_TOP_MS
  static const TIMER_PROCESS_STATE_TOP_MS = 10038;

  /// from: static public final int TIMER_PROCESS_STATE_TOP_SLEEPING_MS
  static const TIMER_PROCESS_STATE_TOP_SLEEPING_MS = 10040;

  /// from: static public final int TIMER_VIBRATOR
  static const TIMER_VIBRATOR = 10044;

  /// from: static public final int TIMER_VIDEO
  static const TIMER_VIDEO = 10033;

  /// from: static public final int TIMER_WIFI_SCAN
  static const TIMER_WIFI_SCAN = 10030;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_UidHealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  UidHealthStats() : super.fromRef(_ctor());
}

class SystemHealthManager extends jni.JlObject {
  SystemHealthManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_SystemHealthManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  SystemHealthManager() : super.fromRef(_ctor());

  static final _takeUidSnapshot = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_health_SystemHealthManager_takeUidSnapshot")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.os.health.HealthStats takeUidSnapshot(int uid)
  HealthStats takeUidSnapshot(int uid) =>
      HealthStats.fromRef(_takeUidSnapshot(reference, uid));

  static final _takeMyUidSnapshot = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_health_SystemHealthManager_takeMyUidSnapshot")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.health.HealthStats takeMyUidSnapshot()
  HealthStats takeMyUidSnapshot() =>
      HealthStats.fromRef(_takeMyUidSnapshot(reference));

  static final _takeUidSnapshots = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_health_SystemHealthManager_takeUidSnapshots")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.health.HealthStats[] takeUidSnapshots(int[] uids)
  jni.JlObject takeUidSnapshots(jni.JlObject uids) =>
      jni.JlObject.fromRef(_takeUidSnapshots(reference, uids.reference));
}

class PackageHealthStats extends jni.JlObject {
  PackageHealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int MEASUREMENTS_WAKEUP_ALARMS_COUNT
  static const MEASUREMENTS_WAKEUP_ALARMS_COUNT = 40002;

  /// from: static public final int STATS_SERVICES
  static const STATS_SERVICES = 40001;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_PackageHealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  PackageHealthStats() : super.fromRef(_ctor());
}

class ServiceHealthStats extends jni.JlObject {
  ServiceHealthStats.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int MEASUREMENT_LAUNCH_COUNT
  static const MEASUREMENT_LAUNCH_COUNT = 50002;

  /// from: static public final int MEASUREMENT_START_SERVICE_COUNT
  static const MEASUREMENT_START_SERVICE_COUNT = 50001;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_ServiceHealthStats_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  ServiceHealthStats() : super.fromRef(_ctor());
}

class TimerStat extends jni.JlObject {
  TimerStat.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.health.TimerStat> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_health_TimerStat_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static os.Parcelable_Creator get CREATOR =>
      os.Parcelable_Creator.fromRef(_getCREATOR());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_health_TimerStat_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  TimerStat() : super.fromRef(_ctor());

  static final _ctor_1 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Int32, ffi.Int64)>>("android_os_health_TimerStat_new_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  /// from: public void <init>(int count, long time)
  TimerStat.ctor_1(int count, int time) : super.fromRef(_ctor_1(count, time));

  static final _ctor_2 = jlookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>)>>("android_os_health_TimerStat_new_2")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.os.Parcel in)
  TimerStat.ctor_2(os.Parcel in_) : super.fromRef(_ctor_2(in_.reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_TimerStat_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_TimerStat_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel out, int flags)
  void writeToParcel(os.Parcel out, int flags) =>
      _writeToParcel(reference, out.reference, flags);

  static final _setCount = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_health_TimerStat_setCount")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCount(int count)
  void setCount(int count) => _setCount(reference, count);

  static final _getCount =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_TimerStat_getCount")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getCount()
  int getCount() => _getCount(reference);

  static final _setTime = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>,
                  ffi.Int64)>>("android_os_health_TimerStat_setTime")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTime(long time)
  void setTime(int time) => _setTime(reference, time);

  static final _getTime =
      jlookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_health_TimerStat_getTime")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public long getTime()
  int getTime() => _getTime(reference);
}
