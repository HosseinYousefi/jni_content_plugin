// AutoGenerated by jni_gen. Do not edit.
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;

import "package:jni/jni.dart" as jni;
import "../../init.dart" show jlookup;

class StorageVolume extends jni.JlObject {
  StorageVolume.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final android.os.Parcelable.Creator<android.os.storage.StorageVolume> CREATOR
  static final _getCREATOR =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_storage_StorageVolume_CREATOR")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get CREATOR => jni.JlObject.fromRef(_getCREATOR());

  /// from: static public final java.lang.String EXTRA_STORAGE_VOLUME
  static const EXTRA_STORAGE_VOLUME = "android.os.storage.extra.STORAGE_VOLUME";

  static final _ctor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_new")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: void <init>(android.os.Parcel in)
  StorageVolume(jni.JlObject in_) : super.fromRef(_ctor(in_.reference));

  static final _getDescription = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_getDescription")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDescription(android.content.Context context)
  jni.JlString getDescription(jni.JlObject context) =>
      jni.JlString.fromRef(_getDescription(reference, context.reference));

  static final _isPrimary =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_storage_StorageVolume_isPrimary")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isPrimary()
  bool isPrimary() => _isPrimary(reference) != 0;

  static final _isRemovable =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_storage_StorageVolume_isRemovable")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isRemovable()
  bool isRemovable() => _isRemovable(reference) != 0;

  static final _isEmulated =
      jlookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_storage_StorageVolume_isEmulated")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEmulated()
  bool isEmulated() => _isEmulated(reference) != 0;

  static final _getUuid = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_getUuid")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getUuid()
  jni.JlString getUuid() => jni.JlString.fromRef(_getUuid(reference));

  static final _getState = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_getState")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getState()
  jni.JlString getState() => jni.JlString.fromRef(_getState(reference));

  static final _createAccessIntent = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_createAccessIntent")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent createAccessIntent(java.lang.String directoryName)
  jni.JlObject createAccessIntent(jni.JlString directoryName) =>
      jni.JlObject.fromRef(
          _createAccessIntent(reference, directoryName.reference));

  static final _equals_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_equals_1")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object obj)
  bool equals_1(jni.JlObject obj) => _equals_1(reference, obj.reference) != 0;

  static final _hashCode_1 =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_storage_StorageVolume_hashCode_1")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode_1() => _hashCode_1(reference);

  static final _toString_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageVolume_toString_1")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  jni.JlString toString_1() => jni.JlString.fromRef(_toString_1(reference));

  static final _describeContents =
      jlookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "android_os_storage_StorageVolume_describeContents")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int describeContents()
  int describeContents() => _describeContents(reference);

  static final _writeToParcel = jlookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("android_os_storage_StorageVolume_writeToParcel")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int flags)
  void writeToParcel(jni.JlObject parcel, int flags) =>
      _writeToParcel(reference, parcel.reference, flags);
}

class OnObbStateChangeListener extends jni.JlObject {
  OnObbStateChangeListener.fromRef(ffi.Pointer<ffi.Void> ref)
      : super.fromRef(ref);

  /// from: static public final int ERROR_ALREADY_MOUNTED
  static const ERROR_ALREADY_MOUNTED = 24;

  /// from: static public final int ERROR_COULD_NOT_MOUNT
  static const ERROR_COULD_NOT_MOUNT = 21;

  /// from: static public final int ERROR_COULD_NOT_UNMOUNT
  static const ERROR_COULD_NOT_UNMOUNT = 22;

  /// from: static public final int ERROR_INTERNAL
  static const ERROR_INTERNAL = 20;

  /// from: static public final int ERROR_NOT_MOUNTED
  static const ERROR_NOT_MOUNTED = 23;

  /// from: static public final int ERROR_PERMISSION_DENIED
  static const ERROR_PERMISSION_DENIED = 25;

  /// from: static public final int MOUNTED
  static const MOUNTED = 1;

  /// from: static public final int UNMOUNTED
  static const UNMOUNTED = 2;

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_storage_OnObbStateChangeListener_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  OnObbStateChangeListener() : super.fromRef(_ctor());

  static final _onObbStateChange = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "android_os_storage_OnObbStateChangeListener_onObbStateChange")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onObbStateChange(java.lang.String path, int state)
  void onObbStateChange(jni.JlString path, int state) =>
      _onObbStateChange(reference, path.reference, state);
}

class StorageManager extends jni.JlObject {
  StorageManager.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final java.lang.String ACTION_MANAGE_STORAGE
  static const ACTION_MANAGE_STORAGE =
      "android.os.storage.action.MANAGE_STORAGE";

  /// from: static public final java.lang.String EXTRA_REQUESTED_BYTES
  static const EXTRA_REQUESTED_BYTES =
      "android.os.storage.extra.REQUESTED_BYTES";

  /// from: static public final java.lang.String EXTRA_UUID
  static const EXTRA_UUID = "android.os.storage.extra.UUID";

  /// from: static public final java.util.UUID UUID_DEFAULT
  static final _getUUID_DEFAULT =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_android_os_storage_StorageManager_UUID_DEFAULT")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();
  static jni.JlObject get UUID_DEFAULT =>
      jni.JlObject.fromRef(_getUUID_DEFAULT());

  static final _ctor =
      jlookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "android_os_storage_StorageManager_new")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: void <init>()
  StorageManager() : super.fromRef(_ctor());

  static final _mountObb = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_mountObb")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean mountObb(java.lang.String rawPath, java.lang.String key, android.os.storage.OnObbStateChangeListener listener)
  bool mountObb(jni.JlString rawPath, jni.JlString key,
          OnObbStateChangeListener listener) =>
      _mountObb(
          reference, rawPath.reference, key.reference, listener.reference) !=
      0;

  static final _unmountObb = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_unmountObb")
      .asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean unmountObb(java.lang.String rawPath, boolean force, android.os.storage.OnObbStateChangeListener listener)
  bool unmountObb(jni.JlString rawPath, bool force,
          OnObbStateChangeListener listener) =>
      _unmountObb(
          reference, rawPath.reference, force ? 1 : 0, listener.reference) !=
      0;

  static final _isObbMounted = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_isObbMounted")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isObbMounted(java.lang.String rawPath)
  bool isObbMounted(jni.JlString rawPath) =>
      _isObbMounted(reference, rawPath.reference) != 0;

  static final _getMountedObbPath = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getMountedObbPath")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getMountedObbPath(java.lang.String rawPath)
  jni.JlString getMountedObbPath(jni.JlString rawPath) =>
      jni.JlString.fromRef(_getMountedObbPath(reference, rawPath.reference));

  static final _getUuidForPath = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getUuidForPath")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.UUID getUuidForPath(java.io.File path)
  jni.JlObject getUuidForPath(jni.JlObject path) =>
      jni.JlObject.fromRef(_getUuidForPath(reference, path.reference));

  static final _isAllocationSupported = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_isAllocationSupported")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAllocationSupported(java.io.FileDescriptor fd)
  bool isAllocationSupported(jni.JlObject fd) =>
      _isAllocationSupported(reference, fd.reference) != 0;

  static final _getStorageVolume = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getStorageVolume")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.storage.StorageVolume getStorageVolume(java.io.File file)
  StorageVolume getStorageVolume(jni.JlObject file) =>
      StorageVolume.fromRef(_getStorageVolume(reference, file.reference));

  static final _getStorageVolumes = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getStorageVolumes")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<android.os.storage.StorageVolume> getStorageVolumes()
  jni.JlObject getStorageVolumes() =>
      jni.JlObject.fromRef(_getStorageVolumes(reference));

  static final _getPrimaryStorageVolume = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getPrimaryStorageVolume")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.storage.StorageVolume getPrimaryStorageVolume()
  StorageVolume getPrimaryStorageVolume() =>
      StorageVolume.fromRef(_getPrimaryStorageVolume(reference));

  static final _isEncrypted = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_isEncrypted")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isEncrypted(java.io.File file)
  bool isEncrypted(jni.JlObject file) =>
      _isEncrypted(reference, file.reference) != 0;

  static final _openProxyFileDescriptor = jlookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_openProxyFileDescriptor")
      .asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.ParcelFileDescriptor openProxyFileDescriptor(int mode, android.os.ProxyFileDescriptorCallback callback, android.os.Handler handler)
  jni.JlObject openProxyFileDescriptor(
          int mode, jni.JlObject callback, jni.JlObject handler) =>
      jni.JlObject.fromRef(_openProxyFileDescriptor(
          reference, mode, callback.reference, handler.reference));

  static final _getCacheQuotaBytes = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getCacheQuotaBytes")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getCacheQuotaBytes(java.util.UUID storageUuid)
  int getCacheQuotaBytes(jni.JlObject storageUuid) =>
      _getCacheQuotaBytes(reference, storageUuid.reference);

  static final _getCacheSizeBytes = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getCacheSizeBytes")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getCacheSizeBytes(java.util.UUID storageUuid)
  int getCacheSizeBytes(jni.JlObject storageUuid) =>
      _getCacheSizeBytes(reference, storageUuid.reference);

  static final _getAllocatableBytes = jlookup<
              ffi.NativeFunction<
                  ffi.Int64 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_getAllocatableBytes")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long getAllocatableBytes(java.util.UUID storageUuid)
  int getAllocatableBytes(jni.JlObject storageUuid) =>
      _getAllocatableBytes(reference, storageUuid.reference);

  static final _allocateBytes = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_os_storage_StorageManager_allocateBytes")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void allocateBytes(java.util.UUID storageUuid, long bytes)
  void allocateBytes(jni.JlObject storageUuid, int bytes) =>
      _allocateBytes(reference, storageUuid.reference, bytes);

  static final _allocateBytes_1 = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Int64)>>(
          "android_os_storage_StorageManager_allocateBytes_1")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void allocateBytes(java.io.FileDescriptor fd, long bytes)
  void allocateBytes_1(jni.JlObject fd, int bytes) =>
      _allocateBytes_1(reference, fd.reference, bytes);

  static final _setCacheBehaviorGroup = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_os_storage_StorageManager_setCacheBehaviorGroup")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCacheBehaviorGroup(java.io.File path, boolean group)
  void setCacheBehaviorGroup(jni.JlObject path, bool group) =>
      _setCacheBehaviorGroup(reference, path.reference, group ? 1 : 0);

  static final _isCacheBehaviorGroup = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_isCacheBehaviorGroup")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCacheBehaviorGroup(java.io.File path)
  bool isCacheBehaviorGroup(jni.JlObject path) =>
      _isCacheBehaviorGroup(reference, path.reference) != 0;

  static final _setCacheBehaviorTombstone = jlookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "android_os_storage_StorageManager_setCacheBehaviorTombstone")
      .asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setCacheBehaviorTombstone(java.io.File path, boolean tombstone)
  void setCacheBehaviorTombstone(jni.JlObject path, bool tombstone) =>
      _setCacheBehaviorTombstone(reference, path.reference, tombstone ? 1 : 0);

  static final _isCacheBehaviorTombstone = jlookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "android_os_storage_StorageManager_isCacheBehaviorTombstone")
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isCacheBehaviorTombstone(java.io.File path)
  bool isCacheBehaviorTombstone(jni.JlObject path) =>
      _isCacheBehaviorTombstone(reference, path.reference) != 0;
}
